/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OlympusStakingInterface extends ethers.utils.Interface {
  functions: {
    "epochLengthInBlocks()": FunctionFragment;
    "initialize(address,address,uint8)": FunctionFragment;
    "ox()": FunctionFragment;
    "ohmToDistributeNextEpoch()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sOX()": FunctionFragment;
    "setEpochLengthintBlock(uint256)": FunctionFragment;
    "stakeOX(uint256)": FunctionFragment;
    "stakeOXWithPermit(uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstakeOX(uint256)": FunctionFragment;
    "unstakeOXWithPermit(uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "epochLengthInBlocks", values?: undefined): string;
  encodeFunctionData(functionFragment: "initialize", values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "ox", values?: undefined): string;
  encodeFunctionData(functionFragment: "ohmToDistributeNextEpoch", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "sOX", values?: undefined): string;
  encodeFunctionData(functionFragment: "setEpochLengthintBlock", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "stakeOX", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeOXWithPermit",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
  encodeFunctionData(functionFragment: "unstakeOX", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "unstakeOXWithPermit",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;

  decodeFunctionResult(functionFragment: "epochLengthInBlocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ohmToDistributeNextEpoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sOX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEpochLengthintBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeOX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeOXWithPermit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstakeOX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstakeOXWithPermit", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<[string, string] & { previousOwner: string; newOwner: string }>;

export class OlympusStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OlympusStakingInterface;

  functions: {
    epochLengthInBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      ohmTokenAddress_: string,
      sOX_: string,
      epochLengthInBlocks_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    ox(overrides?: CallOverrides): Promise<[string]>;

    ohmToDistributeNextEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    sOX(overrides?: CallOverrides): Promise<[string]>;

    setEpochLengthintBlock(
      newEpochLengthInBlocks_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stakeOX(
      amountToStake_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stakeOXWithPermit(
      amountToStake_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unstakeOX(
      amountToWithdraw_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unstakeOXWithPermit(
      amountToWithdraw_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  epochLengthInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    ohmTokenAddress_: string,
    sOX_: string,
    epochLengthInBlocks_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  ox(overrides?: CallOverrides): Promise<string>;

  ohmToDistributeNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  sOX(overrides?: CallOverrides): Promise<string>;

  setEpochLengthintBlock(
    newEpochLengthInBlocks_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stakeOX(
    amountToStake_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stakeOXWithPermit(
    amountToStake_: BigNumberish,
    deadline_: BigNumberish,
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unstakeOX(
    amountToWithdraw_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unstakeOXWithPermit(
    amountToWithdraw_: BigNumberish,
    deadline_: BigNumberish,
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    epochLengthInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      ohmTokenAddress_: string,
      sOX_: string,
      epochLengthInBlocks_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    ox(overrides?: CallOverrides): Promise<string>;

    ohmToDistributeNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sOX(overrides?: CallOverrides): Promise<string>;

    setEpochLengthintBlock(newEpochLengthInBlocks_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeOX(amountToStake_: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    stakeOXWithPermit(
      amountToStake_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(newOwner_: string, overrides?: CallOverrides): Promise<void>;

    unstakeOX(amountToWithdraw_: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    unstakeOXWithPermit(
      amountToWithdraw_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;
  };

  estimateGas: {
    epochLengthInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      ohmTokenAddress_: string,
      sOX_: string,
      epochLengthInBlocks_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    ox(overrides?: CallOverrides): Promise<BigNumber>;

    ohmToDistributeNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    sOX(overrides?: CallOverrides): Promise<BigNumber>;

    setEpochLengthintBlock(
      newEpochLengthInBlocks_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    stakeOX(
      amountToStake_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    stakeOXWithPermit(
      amountToStake_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unstakeOX(
      amountToWithdraw_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unstakeOXWithPermit(
      amountToWithdraw_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    epochLengthInBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      ohmTokenAddress_: string,
      sOX_: string,
      epochLengthInBlocks_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    ox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ohmToDistributeNextEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    sOX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEpochLengthintBlock(
      newEpochLengthInBlocks_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stakeOX(
      amountToStake_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stakeOXWithPermit(
      amountToStake_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unstakeOX(
      amountToWithdraw_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unstakeOXWithPermit(
      amountToWithdraw_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
