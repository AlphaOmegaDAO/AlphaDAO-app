{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport allBonds from \"src/helpers/AllBonds\";\n// TODO REPLACE TO ANOTHER FILE AFTER REMOVING THE MOCK\nimport { ReactComponent as GoldImg } from \"@svgr/webpack?-svgo,+titleProp,+ref!src/assets/tokens/GOLD.svg\";\nimport { ReactComponent as FineWineImg } from \"@svgr/webpack?-svgo,+titleProp,+ref!src/assets/tokens/WINE.svg\";\nimport { ReactComponent as RealEstateImg } from \"@svgr/webpack?-svgo,+titleProp,+ref!src/assets/tokens/ESTATE.svg\";\nimport { ReactComponent as ArtImg } from \"@svgr/webpack?-svgo,+titleProp,+ref!src/assets/tokens/ART.svg\";\nconst initialBondArray = allBonds; // Slaps together bond data within the account & bonding states\n\nfunction useBonds(chainID) {\n  _s();\n\n  const bondLoading = useSelector(state => !state.bonding.loading);\n  const bondState = useSelector(state => state.bonding);\n  const accountBondsState = useSelector(state => state.account.bonds);\n  const [bonds, setBonds] = useState(initialBondArray);\n  const [realBonds, setRealBonds] = useState(); // TODO set Bond with real  world assets instead of mock:\n\n  const realBondsMock = [{\n    bondContractABI: [],\n    bondIconSvg: GoldImg,\n    bondToken: \"GOLD\",\n    displayName: \"GOLD\",\n    displayUnits: \"LP\",\n    isAvailable: false,\n    isLP: false,\n    lpUrl: \"\",\n    name: \"gold\",\n    networkAddrs: {},\n    reserveContract: [],\n    bondDiscount: \"Coming soon\",\n    type: 1,\n    price: \"-\"\n  }, {\n    bondContractABI: [],\n    bondIconSvg: FineWineImg,\n    bondToken: \"FINE WINE\",\n    displayName: \"FINE WINE\",\n    displayUnits: \"LP\",\n    isAvailable: false,\n    isLP: false,\n    lpUrl: \"\",\n    name: \"fine_wine\",\n    networkAddrs: {},\n    reserveContract: [],\n    bondDiscount: \"Coming soon\",\n    type: 1,\n    price: \"-\"\n  }, {\n    bondContractABI: [],\n    bondIconSvg: RealEstateImg,\n    bondToken: \"REAL ESTATE\",\n    displayName: \"REAL ESTATE\",\n    displayUnits: \"LP\",\n    isAvailable: false,\n    isLP: false,\n    lpUrl: \"\",\n    name: \"real_estate\",\n    networkAddrs: {},\n    reserveContract: [],\n    bondDiscount: \"Coming soon\",\n    type: 1,\n    price: \"-\"\n  }, {\n    bondContractABI: [],\n    bondIconSvg: ArtImg,\n    bondToken: \"ART\",\n    displayName: \"ART\",\n    displayUnits: \"LP\",\n    isAvailable: false,\n    isLP: false,\n    lpUrl: \"\",\n    name: \"art\",\n    networkAddrs: {},\n    reserveContract: [],\n    bondDiscount: \"Coming soon\",\n    type: 1,\n    price: \"-\"\n  }];\n  useEffect(() => {\n    let bondDetails;\n    bondDetails = allBonds.flatMap(bond => {\n      if (bondState[bond.name] && bondState[bond.name].bondDiscount) {\n        return Object.assign(bond, bondState[bond.name]); // Keeps the object type\n      }\n\n      return bond;\n    }).flatMap(bond => {\n      if (accountBondsState[bond.name]) {\n        return Object.assign(bond, accountBondsState[bond.name]);\n      }\n\n      return bond;\n    });\n    const mostProfitableBonds = bondDetails.concat().sort((a, b) => {\n      if (a.getAvailability(chainID) === false) return 1;\n      return a[\"bondDiscount\"] > b[\"bondDiscount\"] ? -1 : b[\"bondDiscount\"] > a[\"bondDiscount\"] ? 1 : 0;\n    });\n    setBonds(mostProfitableBonds); // @ts-ignore\n\n    setRealBonds(realBondsMock);\n  }, [bondState, accountBondsState, bondLoading]); // Debug Log:\n  // console.log(bonds);\n  // console.log(realBonds);\n\n  return {\n    bonds,\n    realBonds,\n    loading: bondLoading\n  };\n}\n\n_s(useBonds, \"gH85PlbKgRc/tCNI2Pd5h62wWCI=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\nexport default useBonds;","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/hooks/Bonds.ts"],"names":["useSelector","useEffect","useState","allBonds","initialBondArray","useBonds","chainID","bondLoading","state","bonding","loading","bondState","accountBondsState","account","bonds","setBonds","realBonds","setRealBonds","realBondsMock","bondContractABI","bondIconSvg","GoldImg","bondToken","displayName","displayUnits","isAvailable","isLP","lpUrl","name","networkAddrs","reserveContract","bondDiscount","type","price","FineWineImg","RealEstateImg","ArtImg","bondDetails","flatMap","bond","Object","assign","mostProfitableBonds","concat","sort","a","b","getAvailability"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport allBonds from \"src/helpers/AllBonds\";\nimport { IUserBondDetails } from \"src/slices/AccountSlice\";\nimport { Bond } from \"src/lib/Bond\";\nimport { IBondDetails } from \"src/slices/BondSlice\";\n\n// TODO REPLACE TO ANOTHER FILE AFTER REMOVING THE MOCK\nimport { ReactComponent as GoldImg } from \"src/assets/tokens/GOLD.svg\";\nimport { ReactComponent as FineWineImg } from \"src/assets/tokens/WINE.svg\";\nimport { ReactComponent as RealEstateImg } from \"src/assets/tokens/ESTATE.svg\";\nimport { ReactComponent as ArtImg } from \"src/assets/tokens/ART.svg\";\n\ninterface IBondingStateView {\n  account: {\n    bonds: {\n      [key: string]: IUserBondDetails;\n    };\n  };\n  bonding: {\n    loading: Boolean;\n    [key: string]: any;\n  };\n}\n\n// Smash all the interfaces together to get the BondData Type\ninterface IAllBondData extends Bond, IBondDetails, IUserBondDetails {}\n\nconst initialBondArray = allBonds;\n// Slaps together bond data within the account & bonding states\nfunction useBonds(chainID: number) {\n  const bondLoading = useSelector((state: IBondingStateView) => !state.bonding.loading);\n  const bondState = useSelector((state: IBondingStateView) => state.bonding);\n  const accountBondsState = useSelector((state: IBondingStateView) => state.account.bonds);\n  const [bonds, setBonds] = useState<Bond[] | IAllBondData[]>(initialBondArray);\n  const [realBonds, setRealBonds] = useState();\n\n  // TODO set Bond with real  world assets instead of mock:\n\n  const realBondsMock = [\n    {\n      bondContractABI: [],\n      bondIconSvg: GoldImg,\n      bondToken: \"GOLD\",\n      displayName: \"GOLD\",\n      displayUnits: \"LP\",\n      isAvailable: false,\n      isLP: false,\n      lpUrl: \"\",\n      name: \"gold\",\n      networkAddrs: {},\n      reserveContract: [],\n      bondDiscount: \"Coming soon\",\n      type: 1,\n      price: \"-\",\n    },\n    {\n      bondContractABI: [],\n      bondIconSvg: FineWineImg,\n      bondToken: \"FINE WINE\",\n      displayName: \"FINE WINE\",\n      displayUnits: \"LP\",\n      isAvailable: false,\n      isLP: false,\n      lpUrl: \"\",\n      name: \"fine_wine\",\n      networkAddrs: {},\n      reserveContract: [],\n      bondDiscount: \"Coming soon\",\n      type: 1,\n      price: \"-\",\n    },\n    {\n      bondContractABI: [],\n      bondIconSvg: RealEstateImg,\n      bondToken: \"REAL ESTATE\",\n      displayName: \"REAL ESTATE\",\n      displayUnits: \"LP\",\n      isAvailable: false,\n      isLP: false,\n      lpUrl: \"\",\n      name: \"real_estate\",\n      networkAddrs: {},\n      reserveContract: [],\n      bondDiscount: \"Coming soon\",\n      type: 1,\n      price: \"-\",\n    },\n    {\n      bondContractABI: [],\n      bondIconSvg: ArtImg,\n      bondToken: \"ART\",\n      displayName: \"ART\",\n      displayUnits: \"LP\",\n      isAvailable: false,\n      isLP: false,\n      lpUrl: \"\",\n      name: \"art\",\n      networkAddrs: {},\n      reserveContract: [],\n      bondDiscount: \"Coming soon\",\n      type: 1,\n      price: \"-\",\n    },\n  ];\n\n  useEffect(() => {\n    let bondDetails: IAllBondData[];\n    bondDetails = allBonds\n      .flatMap(bond => {\n        if (bondState[bond.name] && bondState[bond.name].bondDiscount) {\n          return Object.assign(bond, bondState[bond.name]); // Keeps the object type\n        }\n        return bond;\n      })\n      .flatMap(bond => {\n        if (accountBondsState[bond.name]) {\n          return Object.assign(bond, accountBondsState[bond.name]);\n        }\n        return bond;\n      });\n\n    const mostProfitableBonds = bondDetails.concat().sort((a, b) => {\n      if (a.getAvailability(chainID) === false) return 1;\n      return a[\"bondDiscount\"] > b[\"bondDiscount\"] ? -1 : b[\"bondDiscount\"] > a[\"bondDiscount\"] ? 1 : 0;\n    });\n\n    setBonds(mostProfitableBonds);\n    // @ts-ignore\n    setRealBonds(realBondsMock);\n  }, [bondState, accountBondsState, bondLoading]);\n\n  // Debug Log:\n  // console.log(bonds);\n  // console.log(realBonds);\n  return { bonds, realBonds, loading: bondLoading };\n}\n\nexport default useBonds;\n"]},"metadata":{},"sourceType":"module"}