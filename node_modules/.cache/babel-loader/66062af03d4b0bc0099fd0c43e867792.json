{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst MESSAGES_MAX_DISPLAY_DURATION = 60000;\nlet nb_messages = 0;\n\n// Adds a message to the store\nconst createMessage = function (state, severity, title, text) {\n  let message = {\n    id: nb_messages++,\n    severity,\n    title,\n    text,\n    created: Date.now(),\n    open: true\n  };\n  state.items.push(message);\n  state.items = state.items.slice(0);\n};\n\nconst initialState = {\n  items: []\n};\nconst messagesSlice = createSlice({\n  name: \"messages\",\n  initialState,\n  reducers: {\n    // Creates an error message\n    error(state, action) {\n      createMessage(state, \"error\", \"Error\", action.payload);\n    },\n\n    // Creates an information message\n    info(state, action) {\n      createMessage(state, \"info\", \"Information\", action.payload);\n    },\n\n    // Closes a message\n    close(state, action) {\n      state.items = state.items.map(message => {\n        return message.id == action.payload.id ? Object.assign({}, message, {\n          open: false\n        }) : message;\n      });\n    },\n\n    // Finds and removes obsolete messages\n    handle_obsolete(state) {\n      let activeMessages = state.items.filter(message => {\n        return Date.now() - message.created < MESSAGES_MAX_DISPLAY_DURATION;\n      });\n\n      if (state.items.length != activeMessages.length) {\n        state.items = activeMessages;\n      }\n    }\n\n  }\n});\nexport const {\n  error,\n  info,\n  close,\n  handle_obsolete\n} = messagesSlice.actions;\nexport default messagesSlice.reducer;","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/slices/MessagesSlice.ts"],"names":["createSlice","MESSAGES_MAX_DISPLAY_DURATION","nb_messages","createMessage","state","severity","title","text","message","id","created","Date","now","open","items","push","slice","initialState","messagesSlice","name","reducers","error","action","payload","info","close","map","Object","assign","handle_obsolete","activeMessages","filter","length","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAEA,MAAMC,6BAA6B,GAAG,KAAtC;AACA,IAAIC,WAAW,GAAG,CAAlB;;AAaA;AACA,MAAMC,aAAa,GAAG,UAAUC,KAAV,EAAgCC,QAAhC,EAAkDC,KAAlD,EAAiEC,IAAjE,EAA+E;AACnG,MAAIC,OAAgB,GAAG;AACrBC,IAAAA,EAAE,EAAEP,WAAW,EADM;AAErBG,IAAAA,QAFqB;AAGrBC,IAAAA,KAHqB;AAIrBC,IAAAA,IAJqB;AAKrBG,IAAAA,OAAO,EAAEC,IAAI,CAACC,GAAL,EALY;AAMrBC,IAAAA,IAAI,EAAE;AANe,GAAvB;AAQAT,EAAAA,KAAK,CAACU,KAAN,CAAYC,IAAZ,CAAiBP,OAAjB;AACAJ,EAAAA,KAAK,CAACU,KAAN,GAAcV,KAAK,CAACU,KAAN,CAAYE,KAAZ,CAAkB,CAAlB,CAAd;AACD,CAXD;;AAYA,MAAMC,YAA2B,GAAG;AAClCH,EAAAA,KAAK,EAAE;AAD2B,CAApC;AAGA,MAAMI,aAAa,GAAGlB,WAAW,CAAC;AAChCmB,EAAAA,IAAI,EAAE,UAD0B;AAEhCF,EAAAA,YAFgC;AAGhCG,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,KAAK,CAACjB,KAAD,EAAQkB,MAAR,EAAuC;AAC1CnB,MAAAA,aAAa,CAACC,KAAD,EAAQ,OAAR,EAAiB,OAAjB,EAA0BkB,MAAM,CAACC,OAAjC,CAAb;AACD,KAJO;;AAKR;AACAC,IAAAA,IAAI,CAACpB,KAAD,EAAQkB,MAAR,EAAuC;AACzCnB,MAAAA,aAAa,CAACC,KAAD,EAAQ,MAAR,EAAgB,aAAhB,EAA+BkB,MAAM,CAACC,OAAtC,CAAb;AACD,KARO;;AASR;AACAE,IAAAA,KAAK,CAACrB,KAAD,EAAQkB,MAAR,EAAwC;AAC3ClB,MAAAA,KAAK,CAACU,KAAN,GAAcV,KAAK,CAACU,KAAN,CAAYY,GAAZ,CAAgBlB,OAAO,IAAI;AACvC,eAAOA,OAAO,CAACC,EAAR,IAAca,MAAM,CAACC,OAAP,CAAed,EAA7B,GAAkCkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBpB,OAAlB,EAA2B;AAAEK,UAAAA,IAAI,EAAE;AAAR,SAA3B,CAAlC,GAAgFL,OAAvF;AACD,OAFa,CAAd;AAGD,KAdO;;AAeR;AACAqB,IAAAA,eAAe,CAACzB,KAAD,EAAQ;AACrB,UAAI0B,cAAc,GAAG1B,KAAK,CAACU,KAAN,CAAYiB,MAAZ,CAAmBvB,OAAO,IAAI;AACjD,eAAOG,IAAI,CAACC,GAAL,KAAaJ,OAAO,CAACE,OAArB,GAA+BT,6BAAtC;AACD,OAFoB,CAArB;;AAGA,UAAIG,KAAK,CAACU,KAAN,CAAYkB,MAAZ,IAAsBF,cAAc,CAACE,MAAzC,EAAiD;AAC/C5B,QAAAA,KAAK,CAACU,KAAN,GAAcgB,cAAd;AACD;AACF;;AAvBO;AAHsB,CAAD,CAAjC;AA8BA,OAAO,MAAM;AAAET,EAAAA,KAAF;AAASG,EAAAA,IAAT;AAAeC,EAAAA,KAAf;AAAsBI,EAAAA;AAAtB,IAA0CX,aAAa,CAACe,OAA9D;AAEP,eAAef,aAAa,CAACgB,OAA7B","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nconst MESSAGES_MAX_DISPLAY_DURATION = 60000;\nlet nb_messages = 0;\n\ninterface Message {\n  id: number;\n  title: string;\n  text: string;\n  severity: string;\n  created: number;\n  open: boolean;\n}\ninterface MessagesState {\n  items: Array<Message>;\n}\n// Adds a message to the store\nconst createMessage = function (state: MessagesState, severity: string, title: string, text: string) {\n  let message: Message = {\n    id: nb_messages++,\n    severity,\n    title,\n    text,\n    created: Date.now(),\n    open: true,\n  };\n  state.items.push(message);\n  state.items = state.items.slice(0);\n};\nconst initialState: MessagesState = {\n  items: [],\n};\nconst messagesSlice = createSlice({\n  name: \"messages\",\n  initialState,\n  reducers: {\n    // Creates an error message\n    error(state, action: PayloadAction<string>) {\n      createMessage(state, \"error\", \"Error\", action.payload);\n    },\n    // Creates an information message\n    info(state, action: PayloadAction<string>) {\n      createMessage(state, \"info\", \"Information\", action.payload);\n    },\n    // Closes a message\n    close(state, action: PayloadAction<Message>) {\n      state.items = state.items.map(message => {\n        return message.id == action.payload.id ? Object.assign({}, message, { open: false }) : message;\n      });\n    },\n    // Finds and removes obsolete messages\n    handle_obsolete(state) {\n      let activeMessages = state.items.filter(message => {\n        return Date.now() - message.created < MESSAGES_MAX_DISPLAY_DURATION;\n      });\n      if (state.items.length != activeMessages.length) {\n        state.items = activeMessages;\n      }\n    },\n  },\n});\n\nexport const { error, info, close, handle_obsolete } = messagesSlice.actions;\n\nexport default messagesSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}