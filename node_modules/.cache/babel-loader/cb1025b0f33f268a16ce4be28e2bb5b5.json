{"ast":null,"code":"var _jsxFileName = \"C:\\\\arete\\\\AlphaDAO-react\\\\src\\\\components\\\\RebaseTimer\\\\RebaseTimer.jsx\",\n    _s = $RefreshSig$();\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getRebaseBlock, secondsUntilBlock, prettifySeconds } from \"../../helpers\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport \"./rebasetimer.scss\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { loadAppDetails } from \"../../slices/AppSlice\";\nimport { useWeb3Context } from \"../../hooks/web3Context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction RebaseTimer() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    provider,\n    chainID\n  } = useWeb3Context();\n  const SECONDS_TO_REFRESH = 60;\n  const [secondsToRebase, setSecondsToRebase] = useState(0);\n  const [rebaseString, setRebaseString] = useState(\"\");\n  const [secondsToRefresh, setSecondsToRefresh] = useState(SECONDS_TO_REFRESH);\n  const currentBlock = useSelector(state => {\n    return state.app.currentBlock;\n  });\n\n  function initializeTimer() {\n    const rebaseBlock = getRebaseBlock(currentBlock);\n    const seconds = secondsUntilBlock(currentBlock, rebaseBlock);\n    setSecondsToRebase(seconds);\n    const prettified = prettifySeconds(seconds);\n    setRebaseString(prettified !== \"\" ? prettified : \"Less than a minute\");\n  } // This initializes secondsToRebase as soon as currentBlock becomes available\n\n\n  useMemo(() => {\n    if (currentBlock) {\n      initializeTimer();\n    }\n  }, [currentBlock]); // After every period SECONDS_TO_REFRESH, decrement secondsToRebase by SECONDS_TO_REFRESH,\n  // keeping the display up to date without requiring an on chain request to update currentBlock.\n\n  useEffect(() => {\n    let interval = null;\n\n    if (secondsToRefresh > 0) {\n      interval = setInterval(() => {\n        setSecondsToRefresh(secondsToRefresh => secondsToRefresh - 1);\n      }, 1000);\n    } else {\n      // When the countdown goes negative, reload the app details and reinitialize the timer\n      if (secondsToRebase < 0) {\n        async function reload() {\n          await dispatch(loadAppDetails({\n            networkID: chainID,\n            provider: provider\n          }));\n        }\n\n        reload();\n        setRebaseString(\"\");\n      } else {\n        clearInterval(interval);\n        setSecondsToRebase(secondsToRebase => secondsToRebase - SECONDS_TO_REFRESH);\n        setSecondsToRefresh(SECONDS_TO_REFRESH);\n        const prettified = prettifySeconds(secondsToRebase);\n        setRebaseString(prettified !== \"\" ? prettified : \"Less than a minute\");\n      }\n    }\n\n    return () => clearInterval(interval);\n  }, [secondsToRebase, secondsToRefresh]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"rebase-timer\",\n    children: /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      children: currentBlock ? secondsToRebase > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: rebaseString\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this), \" to next rebase\"]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"rebasing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"155px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RebaseTimer, \"fM+fmZBJnpv80eSXWHQFZMbrWgs=\", false, function () {\n  return [useDispatch, useWeb3Context, useSelector];\n});\n\n_c = RebaseTimer;\nexport default RebaseTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"RebaseTimer\");","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/components/RebaseTimer/RebaseTimer.jsx"],"names":["useSelector","useDispatch","getRebaseBlock","secondsUntilBlock","prettifySeconds","Box","Typography","Skeleton","useEffect","useMemo","useState","loadAppDetails","useWeb3Context","RebaseTimer","dispatch","provider","chainID","SECONDS_TO_REFRESH","secondsToRebase","setSecondsToRebase","rebaseString","setRebaseString","secondsToRefresh","setSecondsToRefresh","currentBlock","state","app","initializeTimer","rebaseBlock","seconds","prettified","interval","setInterval","reload","networkID","clearInterval"],"mappings":"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","sourcesContent":["import { useSelector, useDispatch } from \"react-redux\";\nimport { getRebaseBlock, secondsUntilBlock, prettifySeconds } from \"../../helpers\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport \"./rebasetimer.scss\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { loadAppDetails } from \"../../slices/AppSlice\";\nimport { useWeb3Context } from \"../../hooks/web3Context\";\n\nfunction RebaseTimer() {\n  const dispatch = useDispatch();\n  const { provider, chainID } = useWeb3Context();\n\n  const SECONDS_TO_REFRESH = 60;\n  const [secondsToRebase, setSecondsToRebase] = useState(0);\n  const [rebaseString, setRebaseString] = useState(\"\");\n  const [secondsToRefresh, setSecondsToRefresh] = useState(SECONDS_TO_REFRESH);\n\n  const currentBlock = useSelector(state => {\n    return state.app.currentBlock;\n  });\n\n  function initializeTimer() {\n    const rebaseBlock = getRebaseBlock(currentBlock);\n    const seconds = secondsUntilBlock(currentBlock, rebaseBlock);\n    setSecondsToRebase(seconds);\n    const prettified = prettifySeconds(seconds);\n    setRebaseString(prettified !== \"\" ? prettified : \"Less than a minute\");\n  }\n\n  // This initializes secondsToRebase as soon as currentBlock becomes available\n  useMemo(() => {\n    if (currentBlock) {\n      initializeTimer();\n    }\n  }, [currentBlock]);\n\n  // After every period SECONDS_TO_REFRESH, decrement secondsToRebase by SECONDS_TO_REFRESH,\n  // keeping the display up to date without requiring an on chain request to update currentBlock.\n  useEffect(() => {\n    let interval = null;\n    if (secondsToRefresh > 0) {\n      interval = setInterval(() => {\n        setSecondsToRefresh(secondsToRefresh => secondsToRefresh - 1);\n      }, 1000);\n    } else {\n      // When the countdown goes negative, reload the app details and reinitialize the timer\n      if (secondsToRebase < 0) {\n        async function reload() {\n          await dispatch(loadAppDetails({ networkID: chainID, provider: provider }));\n        }\n        reload();\n        setRebaseString(\"\");\n      } else {\n        clearInterval(interval);\n        setSecondsToRebase(secondsToRebase => secondsToRebase - SECONDS_TO_REFRESH);\n        setSecondsToRefresh(SECONDS_TO_REFRESH);\n        const prettified = prettifySeconds(secondsToRebase);\n        setRebaseString(prettified !== \"\" ? prettified : \"Less than a minute\");\n      }\n    }\n    return () => clearInterval(interval);\n  }, [secondsToRebase, secondsToRefresh]);\n\n  return (\n    <Box className=\"rebase-timer\">\n      <Typography variant=\"body2\">\n        {currentBlock ? (\n          secondsToRebase > 0 ? (\n            <>\n              <strong>{rebaseString}</strong> to next rebase\n            </>\n          ) : (\n            <strong>rebasing</strong>\n          )\n        ) : (\n          <Skeleton width=\"155px\" />\n        )}\n      </Typography>\n    </Box>\n  );\n}\n\nexport default RebaseTimer;\n"]},"metadata":{},"sourceType":"module"}