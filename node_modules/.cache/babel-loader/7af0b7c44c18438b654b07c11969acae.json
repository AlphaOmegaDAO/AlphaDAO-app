{"ast":null,"code":"/**\n * Access `process.env` in an environment helper\n * Usage: `EnvHelper.env`\n * - Other static methods can be added as needed per\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\n */\nexport class EnvHelper {\n  /**\n   * @returns `process.env`\n   */\n\n  /**\n   * Returns env contingent segment api key\n   * @returns segment\n   */\n  static getSegmentKey() {\n    return EnvHelper.env.REACT_APP_SEGMENT_API_KEY;\n  }\n\n  static isNotEmpty(envVariable) {\n    if (envVariable.length > 10) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * in development environment will return the `ethers` community api key so that devs don't need to add elements to their .env\n   * @returns Array of Alchemy API URIs or empty set\n   */\n\n\n  static getAlchemyAPIKeyList() {\n    let ALCHEMY_ID_LIST; // split the provided API keys on whitespace\n\n    if (EnvHelper.env.REACT_APP_ALCHEMY_IDS && EnvHelper.isNotEmpty(EnvHelper.env.REACT_APP_ALCHEMY_IDS)) {\n      ALCHEMY_ID_LIST = EnvHelper.env.REACT_APP_ALCHEMY_IDS.split(EnvHelper.whitespaceRegex);\n    } else {\n      ALCHEMY_ID_LIST = [];\n    } // now add the uri path\n\n\n    if (ALCHEMY_ID_LIST.length > 0) {\n      ALCHEMY_ID_LIST = ALCHEMY_ID_LIST.map(alchemyID => `https://eth-mainnet.alchemyapi.io/v2/${alchemyID}`);\n    } else {\n      ALCHEMY_ID_LIST = [];\n    }\n\n    return ALCHEMY_ID_LIST;\n  }\n  /**\n   * NOTE(appleseed): Infura IDs are only used as Fallbacks & are not Mandatory\n   * @returns {Array} Array of Infura API Ids\n   */\n\n\n  static getInfuraIdList() {\n    let INFURA_ID_LIST; // split the provided API keys on whitespace\n\n    if (EnvHelper.env.REACT_APP_INFURA_IDS && EnvHelper.isNotEmpty(EnvHelper.env.REACT_APP_INFURA_IDS)) {\n      INFURA_ID_LIST = EnvHelper.env.REACT_APP_INFURA_IDS.split(new RegExp(EnvHelper.whitespaceRegex));\n    } else {\n      INFURA_ID_LIST = [];\n    } // now add the uri path\n\n\n    if (INFURA_ID_LIST.length > 0) {\n      INFURA_ID_LIST = INFURA_ID_LIST.map(infuraID => `https://mainnet.infura.io/v3/${infuraID}`);\n    } else {\n      INFURA_ID_LIST = [];\n    }\n\n    return INFURA_ID_LIST;\n  }\n  /**\n   * @returns {Array} Array of node url addresses or empty set\n   * node url addresses can be whitespace-separated string of \"https\" addresses\n   * - functionality for Websocket addresses has been deprecated due to issues with WalletConnect\n   *     - WalletConnect Issue: https://github.com/WalletConnect/walletconnect-monorepo/issues/193\n   */\n\n\n  static getSelfHostedNode() {\n    let URI_LIST;\n\n    if (EnvHelper.env.REACT_APP_SELF_HOSTED_NODE && EnvHelper.isNotEmpty(EnvHelper.env.REACT_APP_SELF_HOSTED_NODE)) {\n      URI_LIST = EnvHelper.env.REACT_APP_SELF_HOSTED_NODE.split(new RegExp(EnvHelper.whitespaceRegex));\n    } else {\n      URI_LIST = [];\n    }\n\n    return URI_LIST;\n  }\n  /**\n   * in development will always return the `ethers` community key url even if .env is blank\n   * in prod if .env is blank API connections will fail\n   * @returns array of API urls\n   */\n\n\n  static getAPIUris() {\n    let ALL_URIs = EnvHelper.getSelfHostedNode();\n\n    if (EnvHelper.env.NODE_ENV === \"development\" && ALL_URIs.length === 0) {\n      // push in the common ethers key in development\n      ALL_URIs.push(\"https://eth-mainnet.alchemyapi.io/v2/_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\");\n    }\n\n    if (ALL_URIs.length === 0) console.error(\"API keys must be set in the .env\");\n    return ALL_URIs;\n  }\n\n  static getFallbackURIs() {\n    const ALL_URIs = [...EnvHelper.getAlchemyAPIKeyList(), ...EnvHelper.getInfuraIdList()];\n    return ALL_URIs;\n  }\n\n  static getGeoapifyAPIKey() {\n    var apiKey = EnvHelper.env.REACT_APP_GEOAPIFY_API_KEY;\n\n    if (!apiKey) {\n      console.warn(\"Missing REACT_APP_GEOAPIFY_API_KEY environment variable\");\n      return null;\n    }\n\n    return apiKey;\n  }\n\n}\nEnvHelper.env = process.env;\nEnvHelper.alchemyTestnetURI = `https://eth-rinkeby.alchemyapi.io/v2/${EnvHelper.env.REACT_APP_TESTNET_ALCHEMY}`;\nEnvHelper.mumbaiTestnetURI = `https://polygon-mumbai.infura.io/v3/${EnvHelper.env.REACT_APP_INFURA_IDS}`;\nEnvHelper.polygonURI = `https://polygon-mainnet.infura.io/v3/${EnvHelper.env.REACT_APP_INFURA_IDS}`;\nEnvHelper.whitespaceRegex = /\\s+/;","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/helpers/Environment.ts"],"names":["EnvHelper","getSegmentKey","env","REACT_APP_SEGMENT_API_KEY","isNotEmpty","envVariable","length","getAlchemyAPIKeyList","ALCHEMY_ID_LIST","REACT_APP_ALCHEMY_IDS","split","whitespaceRegex","map","alchemyID","getInfuraIdList","INFURA_ID_LIST","REACT_APP_INFURA_IDS","RegExp","infuraID","getSelfHostedNode","URI_LIST","REACT_APP_SELF_HOSTED_NODE","getAPIUris","ALL_URIs","NODE_ENV","push","console","error","getFallbackURIs","getGeoapifyAPIKey","apiKey","REACT_APP_GEOAPIFY_API_KEY","warn","process","alchemyTestnetURI","REACT_APP_TESTNET_ALCHEMY","mumbaiTestnetURI","polygonURI"],"mappings":"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","sourcesContent":["/**\n * Access `process.env` in an environment helper\n * Usage: `EnvHelper.env`\n * - Other static methods can be added as needed per\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\n */\nexport class EnvHelper {\n  /**\n   * @returns `process.env`\n   */\n  static env = process.env;\n  static alchemyTestnetURI = `https://eth-rinkeby.alchemyapi.io/v2/${EnvHelper.env.REACT_APP_TESTNET_ALCHEMY}`;\n  static mumbaiTestnetURI = `https://polygon-mumbai.infura.io/v3/${EnvHelper.env.REACT_APP_INFURA_IDS}`;\n  static polygonURI = `https://polygon-mainnet.infura.io/v3/${EnvHelper.env.REACT_APP_INFURA_IDS}`;\n  static whitespaceRegex = /\\s+/;\n\n  /**\n   * Returns env contingent segment api key\n   * @returns segment\n   */\n  static getSegmentKey() {\n    return EnvHelper.env.REACT_APP_SEGMENT_API_KEY;\n  }\n\n  static isNotEmpty(envVariable: string) {\n    if (envVariable.length > 10) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * in development environment will return the `ethers` community api key so that devs don't need to add elements to their .env\n   * @returns Array of Alchemy API URIs or empty set\n   */\n  static getAlchemyAPIKeyList() {\n    let ALCHEMY_ID_LIST: string[];\n\n    // split the provided API keys on whitespace\n    if (EnvHelper.env.REACT_APP_ALCHEMY_IDS && EnvHelper.isNotEmpty(EnvHelper.env.REACT_APP_ALCHEMY_IDS)) {\n      ALCHEMY_ID_LIST = EnvHelper.env.REACT_APP_ALCHEMY_IDS.split(EnvHelper.whitespaceRegex);\n    } else {\n      ALCHEMY_ID_LIST = [];\n    }\n\n    // now add the uri path\n    if (ALCHEMY_ID_LIST.length > 0) {\n      ALCHEMY_ID_LIST = ALCHEMY_ID_LIST.map(alchemyID => `https://eth-mainnet.alchemyapi.io/v2/${alchemyID}`);\n    } else {\n      ALCHEMY_ID_LIST = [];\n    }\n    return ALCHEMY_ID_LIST;\n  }\n\n  /**\n   * NOTE(appleseed): Infura IDs are only used as Fallbacks & are not Mandatory\n   * @returns {Array} Array of Infura API Ids\n   */\n  static getInfuraIdList() {\n    let INFURA_ID_LIST: string[];\n\n    // split the provided API keys on whitespace\n    if (EnvHelper.env.REACT_APP_INFURA_IDS && EnvHelper.isNotEmpty(EnvHelper.env.REACT_APP_INFURA_IDS)) {\n      INFURA_ID_LIST = EnvHelper.env.REACT_APP_INFURA_IDS.split(new RegExp(EnvHelper.whitespaceRegex));\n    } else {\n      INFURA_ID_LIST = [];\n    }\n\n    // now add the uri path\n    if (INFURA_ID_LIST.length > 0) {\n      INFURA_ID_LIST = INFURA_ID_LIST.map(infuraID => `https://mainnet.infura.io/v3/${infuraID}`);\n    } else {\n      INFURA_ID_LIST = [];\n    }\n    return INFURA_ID_LIST;\n  }\n\n  /**\n   * @returns {Array} Array of node url addresses or empty set\n   * node url addresses can be whitespace-separated string of \"https\" addresses\n   * - functionality for Websocket addresses has been deprecated due to issues with WalletConnect\n   *     - WalletConnect Issue: https://github.com/WalletConnect/walletconnect-monorepo/issues/193\n   */\n  static getSelfHostedNode() {\n    let URI_LIST: string[];\n    if (EnvHelper.env.REACT_APP_SELF_HOSTED_NODE && EnvHelper.isNotEmpty(EnvHelper.env.REACT_APP_SELF_HOSTED_NODE)) {\n      URI_LIST = EnvHelper.env.REACT_APP_SELF_HOSTED_NODE.split(new RegExp(EnvHelper.whitespaceRegex));\n    } else {\n      URI_LIST = [];\n    }\n    return URI_LIST;\n  }\n\n  /**\n   * in development will always return the `ethers` community key url even if .env is blank\n   * in prod if .env is blank API connections will fail\n   * @returns array of API urls\n   */\n  static getAPIUris() {\n    let ALL_URIs = EnvHelper.getSelfHostedNode();\n    if (EnvHelper.env.NODE_ENV === \"development\" && ALL_URIs.length === 0) {\n      // push in the common ethers key in development\n      ALL_URIs.push(\"https://eth-mainnet.alchemyapi.io/v2/_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\");\n    }\n    if (ALL_URIs.length === 0) console.error(\"API keys must be set in the .env\");\n    return ALL_URIs;\n  }\n\n  static getFallbackURIs() {\n    const ALL_URIs = [...EnvHelper.getAlchemyAPIKeyList(), ...EnvHelper.getInfuraIdList()];\n    return ALL_URIs;\n  }\n\n  static getGeoapifyAPIKey() {\n    var apiKey = EnvHelper.env.REACT_APP_GEOAPIFY_API_KEY;\n    if (!apiKey) {\n      console.warn(\"Missing REACT_APP_GEOAPIFY_API_KEY environment variable\");\n      return null;\n    }\n\n    return apiKey;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}