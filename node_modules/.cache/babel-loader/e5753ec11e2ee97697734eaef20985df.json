{"ast":null,"code":"var _jsxFileName = \"C:\\\\arete\\\\AlphaDAO-react\\\\src\\\\views\\\\33Together\\\\33Together.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Paper, Tab, Tabs, Box } from \"@material-ui/core\";\nimport InfoTooltipMulti from \"../../components/InfoTooltip/InfoTooltipMulti\";\nimport TabPanel from \"../../components/TabPanel\";\nimport CardHeader from \"../../components/CardHeader/CardHeader\";\nimport { PoolDeposit } from \"./PoolDeposit\";\nimport { PoolWithdraw } from \"./PoolWithdraw\";\nimport { PoolInfo } from \"./PoolInfo\";\nimport { PoolPrize } from \"./PoolPrize\";\nimport \"./33together.scss\";\nimport { addresses, POOL_GRAPH_URLS } from \"../../constants\";\nimport { useWeb3Context } from \"../../hooks\";\nimport { apolloExt } from \"../../lib/apolloClient\";\nimport { poolDataQuery, yourAwardsQuery } from \"./poolData.js\";\nimport { calculateOdds } from \"../../helpers/33Together\";\nimport { getPoolValues, getRNGStatus } from \"../../slices/PoolThunk\";\nimport { trim } from \"../../helpers/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction a11yProps(index) {\n  return {\n    id: `pool-tab-${index}`,\n    \"aria-controls\": `pool-tabpanel-${index}`\n  };\n}\n\nconst PoolTogether = () => {\n  _s();\n\n  const [view, setView] = useState(0);\n\n  const changeView = (event, newView) => {\n    setView(newView);\n  }; // NOTE (appleseed): these calcs were previously in PoolInfo, however would be need in PoolPrize, too, if...\n  // ... we ever were to implement other types of awards\n\n\n  const {\n    connect,\n    address,\n    provider,\n    chainID,\n    connected,\n    hasCachedProvider\n  } = useWeb3Context();\n  const dispatch = useDispatch();\n  let history = useHistory();\n  const [graphUrl, setGraphUrl] = useState(POOL_GRAPH_URLS[chainID]);\n  const [poolData, setPoolData] = useState(null);\n  const [poolDataError, setPoolDataError] = useState(null);\n  const [graphLoading, setGraphLoading] = useState(true);\n  const [walletChecked, setWalletChecked] = useState(false);\n  const [winners, setWinners] = useState(\"--\");\n  const [totalDeposits, setTotalDeposits] = useState(0);\n  const [totalSponsorship, setTotalSponsorship] = useState(0);\n  const [yourOdds, setYourOdds] = useState(0);\n  const [yourTotalAwards, setYourTotalAwards] = useState(0); // TODO (appleseed-33T): create a table for AwardHistory\n\n  const [yourAwardHistory, setYourAwardHistory] = useState([]);\n  const [infoTooltipMessage, setInfoTooltipMessage] = useState([\"Deposit sOHM to win! Once deposited, you will receive a corresponding amount of 33T and be entered to win until your sOHM is withdrawn.\"]);\n  const isAccountLoading = useSelector(state => {\n    var _state$account$loadin;\n\n    return (_state$account$loadin = state.account.loading) !== null && _state$account$loadin !== void 0 ? _state$account$loadin : true;\n  });\n  const sohmBalance = useSelector(state => {\n    return state.account.balances && state.account.balances.sohm;\n  });\n  const poolBalance = useSelector(state => {\n    return state.account.balances && state.account.balances.pool;\n  }); // query correct pool subgraph depending on current chain\n\n  useEffect(() => {\n    setGraphUrl(POOL_GRAPH_URLS[chainID]);\n  }, [chainID]);\n  useEffect(() => {\n    // get poolData\n    apolloExt(poolDataQuery(addresses[chainID].PT_PRIZE_POOL_ADDRESS), graphUrl).then(poolData => {\n      var _poolData$data$prizeP, _poolData$data$prizeP2, _poolData$data$prizeP3;\n\n      const poolWinners = (_poolData$data$prizeP = poolData.data.prizePool) === null || _poolData$data$prizeP === void 0 ? void 0 : _poolData$data$prizeP.prizeStrategy.multipleWinners.numberOfWinners;\n      if (poolWinners) setWinners(parseFloat(poolWinners));\n      const poolTotalDeposits = ((_poolData$data$prizeP2 = poolData.data.prizePool) === null || _poolData$data$prizeP2 === void 0 ? void 0 : _poolData$data$prizeP2.controlledTokens[0].totalSupply) / 1000000000;\n      if (poolTotalDeposits) setTotalDeposits(poolTotalDeposits); // sponsorship is deposited funds contributing to the prize without being eligible to win\n\n      const poolTotalSponsorship = ((_poolData$data$prizeP3 = poolData.data.prizePool) === null || _poolData$data$prizeP3 === void 0 ? void 0 : _poolData$data$prizeP3.controlledTokens[1].totalSupply) / 1000000000;\n      if (poolTotalSponsorship) setTotalSponsorship(poolTotalSponsorship);\n      setPoolData(poolData.data);\n      setGraphLoading(false);\n    }).catch(err => setPoolDataError(err)); // get your Award History\n\n    if (address) {\n      let yourPrizes = [];\n      let totalAwards = 0;\n      apolloExt(yourAwardsQuery(addresses[chainID].PT_PRIZE_POOL_ADDRESS, address, addresses[chainID].PT_TOKEN_ADDRESS), graphUrl).then(poolData => {\n        var _poolData$data$prizeP4;\n\n        (_poolData$data$prizeP4 = poolData.data.prizePool) === null || _poolData$data$prizeP4 === void 0 ? void 0 : _poolData$data$prizeP4.prizes.map(prize => {\n          var _prize$awardedControl;\n\n          let awardedAmount = parseFloat((_prize$awardedControl = prize.awardedControlledTokens[0]) === null || _prize$awardedControl === void 0 ? void 0 : _prize$awardedControl.amount) / 10 ** 9 || 0; // pushing in an AwardItem {awardedTimestamp, awardedBlock, awardedAmount}\n\n          yourPrizes.push({\n            awardedTimestamp: prize.awardedTimestamp,\n            awardedBlock: prize.awardedBlock,\n            awardedAmount: awardedAmount\n          });\n          totalAwards += awardedAmount;\n        });\n        setYourTotalAwards(totalAwards);\n        setYourAwardHistory(yourPrizes);\n      }).catch(err => setPoolDataError(err));\n    }\n  }, [graphUrl]);\n  useEffect(() => {\n    let userOdds = calculateOdds(poolBalance, totalDeposits, winners);\n    setYourOdds(userOdds);\n  }, [winners, totalDeposits, poolBalance]);\n  useEffect(() => {\n    if (hasCachedProvider()) {\n      // then user DOES have a wallet\n      connect().then(() => {\n        setWalletChecked(true);\n      });\n    } else {\n      // then user DOES NOT have a wallet\n      setWalletChecked(true);\n    }\n  }, []); // this useEffect fires on state change from above. It will ALWAYS fire AFTER\n\n  useEffect(() => {\n    // don't load ANY details until wallet is Checked\n    if (walletChecked) {\n      dispatch(getPoolValues({\n        networkID: chainID,\n        provider: provider\n      }));\n      dispatch(getRNGStatus({\n        networkID: chainID,\n        provider: provider\n      }));\n    }\n  }, [walletChecked]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"pool-together-view\",\n    children: [/*#__PURE__*/_jsxDEV(PoolPrize, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      className: \"ohm-card\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          title: \"3, 3 Together\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoTooltipMulti, {\n          messagesArray: infoTooltipMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n        centered: true,\n        value: view,\n        textColor: \"primary\",\n        indicatorColor: \"primary\",\n        onChange: changeView,\n        className: \"pt-tabs\",\n        \"aria-label\": \"pool tabs\",\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Deposit\",\n          ...a11yProps(0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Withdraw\",\n          ...a11yProps(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n        value: view,\n        index: 0,\n        className: \"pool-tab\",\n        children: /*#__PURE__*/_jsxDEV(PoolDeposit, {\n          totalPoolDeposits: totalDeposits,\n          winners: winners,\n          setInfoTooltipMessage: setInfoTooltipMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n        value: view,\n        index: 1,\n        className: \"pool-tab\",\n        children: /*#__PURE__*/_jsxDEV(PoolWithdraw, {\n          totalPoolDeposits: totalDeposits,\n          winners: winners,\n          setInfoTooltipMessage: setInfoTooltipMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PoolInfo, {\n      graphLoading: graphLoading,\n      isAccountLoading: isAccountLoading,\n      poolBalance: trim(poolBalance, 4),\n      sohmBalance: trim(sohmBalance, 4),\n      yourTotalAwards: trim(yourTotalAwards, 4),\n      yourOdds: trim(yourOdds, 0),\n      winners: winners,\n      totalDeposits: totalDeposits,\n      totalSponsorship: totalSponsorship\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PoolTogether, \"D8LqFglaCUNXhj/VhJ0mtY+5t+o=\", false, function () {\n  return [useWeb3Context, useDispatch, useHistory, useSelector, useSelector, useSelector];\n});\n\n_c = PoolTogether;\nexport default PoolTogether;\n\nvar _c;\n\n$RefreshReg$(_c, \"PoolTogether\");","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/views/33Together/33Together.jsx"],"names":["useEffect","useState","useDispatch","useSelector","useHistory","Paper","Tab","Tabs","Box","InfoTooltipMulti","TabPanel","CardHeader","PoolDeposit","PoolWithdraw","PoolInfo","PoolPrize","addresses","POOL_GRAPH_URLS","useWeb3Context","apolloExt","poolDataQuery","yourAwardsQuery","calculateOdds","getPoolValues","getRNGStatus","trim","a11yProps","index","id","PoolTogether","view","setView","changeView","event","newView","connect","address","provider","chainID","connected","hasCachedProvider","dispatch","history","graphUrl","setGraphUrl","poolData","setPoolData","poolDataError","setPoolDataError","graphLoading","setGraphLoading","walletChecked","setWalletChecked","winners","setWinners","totalDeposits","setTotalDeposits","totalSponsorship","setTotalSponsorship","yourOdds","setYourOdds","yourTotalAwards","setYourTotalAwards","yourAwardHistory","setYourAwardHistory","infoTooltipMessage","setInfoTooltipMessage","isAccountLoading","state","account","loading","sohmBalance","balances","sohm","poolBalance","pool","PT_PRIZE_POOL_ADDRESS","then","poolWinners","data","prizePool","prizeStrategy","multipleWinners","numberOfWinners","parseFloat","poolTotalDeposits","controlledTokens","totalSupply","poolTotalSponsorship","catch","err","yourPrizes","totalAwards","PT_TOKEN_ADDRESS","prizes","map","prize","awardedAmount","awardedControlledTokens","amount","push","awardedTimestamp","awardedBlock","userOdds","networkID"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Paper, Tab, Tabs, Box } from \"@material-ui/core\";\nimport InfoTooltipMulti from \"../../components/InfoTooltip/InfoTooltipMulti\";\n\nimport TabPanel from \"../../components/TabPanel\";\nimport CardHeader from \"../../components/CardHeader/CardHeader\";\nimport { PoolDeposit } from \"./PoolDeposit\";\nimport { PoolWithdraw } from \"./PoolWithdraw\";\nimport { PoolInfo } from \"./PoolInfo\";\nimport { PoolPrize } from \"./PoolPrize\";\nimport \"./33together.scss\";\nimport { addresses, POOL_GRAPH_URLS } from \"../../constants\";\nimport { useWeb3Context } from \"../../hooks\";\nimport { apolloExt } from \"../../lib/apolloClient\";\nimport { poolDataQuery, yourAwardsQuery } from \"./poolData.js\";\nimport { calculateOdds } from \"../../helpers/33Together\";\nimport { getPoolValues, getRNGStatus } from \"../../slices/PoolThunk\";\nimport { trim } from \"../../helpers/index\";\n\nfunction a11yProps(index) {\n  return {\n    id: `pool-tab-${index}`,\n    \"aria-controls\": `pool-tabpanel-${index}`,\n  };\n}\n\nconst PoolTogether = () => {\n  const [view, setView] = useState(0);\n\n  const changeView = (event, newView) => {\n    setView(newView);\n  };\n\n  // NOTE (appleseed): these calcs were previously in PoolInfo, however would be need in PoolPrize, too, if...\n  // ... we ever were to implement other types of awards\n  const { connect, address, provider, chainID, connected, hasCachedProvider } = useWeb3Context();\n  const dispatch = useDispatch();\n  let history = useHistory();\n  const [graphUrl, setGraphUrl] = useState(POOL_GRAPH_URLS[chainID]);\n  const [poolData, setPoolData] = useState(null);\n  const [poolDataError, setPoolDataError] = useState(null);\n  const [graphLoading, setGraphLoading] = useState(true);\n  const [walletChecked, setWalletChecked] = useState(false);\n  const [winners, setWinners] = useState(\"--\");\n  const [totalDeposits, setTotalDeposits] = useState(0);\n  const [totalSponsorship, setTotalSponsorship] = useState(0);\n  const [yourOdds, setYourOdds] = useState(0);\n  const [yourTotalAwards, setYourTotalAwards] = useState(0);\n  // TODO (appleseed-33T): create a table for AwardHistory\n  const [yourAwardHistory, setYourAwardHistory] = useState([]);\n  const [infoTooltipMessage, setInfoTooltipMessage] = useState([\n    \"Deposit sOHM to win! Once deposited, you will receive a corresponding amount of 33T and be entered to win until your sOHM is withdrawn.\",\n  ]);\n  const isAccountLoading = useSelector(state => state.account.loading ?? true);\n\n  const sohmBalance = useSelector(state => {\n    return state.account.balances && state.account.balances.sohm;\n  });\n\n  const poolBalance = useSelector(state => {\n    return state.account.balances && state.account.balances.pool;\n  });\n\n  // query correct pool subgraph depending on current chain\n  useEffect(() => {\n    setGraphUrl(POOL_GRAPH_URLS[chainID]);\n  }, [chainID]);\n\n  useEffect(() => {\n    // get poolData\n    apolloExt(poolDataQuery(addresses[chainID].PT_PRIZE_POOL_ADDRESS), graphUrl)\n      .then(poolData => {\n        const poolWinners = poolData.data.prizePool?.prizeStrategy.multipleWinners.numberOfWinners;\n        if (poolWinners) setWinners(parseFloat(poolWinners));\n\n        const poolTotalDeposits = poolData.data.prizePool?.controlledTokens[0].totalSupply / 1_000_000_000;\n        if (poolTotalDeposits) setTotalDeposits(poolTotalDeposits);\n\n        // sponsorship is deposited funds contributing to the prize without being eligible to win\n        const poolTotalSponsorship = poolData.data.prizePool?.controlledTokens[1].totalSupply / 1_000_000_000;\n        if (poolTotalSponsorship) setTotalSponsorship(poolTotalSponsorship);\n\n        setPoolData(poolData.data);\n        setGraphLoading(false);\n      })\n      .catch(err => setPoolDataError(err));\n\n    // get your Award History\n    if (address) {\n      let yourPrizes = [];\n      let totalAwards = 0;\n      apolloExt(\n        yourAwardsQuery(addresses[chainID].PT_PRIZE_POOL_ADDRESS, address, addresses[chainID].PT_TOKEN_ADDRESS),\n        graphUrl,\n      )\n        .then(poolData => {\n          poolData.data.prizePool?.prizes.map(prize => {\n            let awardedAmount = parseFloat(prize.awardedControlledTokens[0]?.amount) / 10 ** 9 || 0;\n            // pushing in an AwardItem {awardedTimestamp, awardedBlock, awardedAmount}\n            yourPrizes.push({\n              awardedTimestamp: prize.awardedTimestamp,\n              awardedBlock: prize.awardedBlock,\n              awardedAmount: awardedAmount,\n            });\n            totalAwards += awardedAmount;\n          });\n          setYourTotalAwards(totalAwards);\n          setYourAwardHistory(yourPrizes);\n        })\n        .catch(err => setPoolDataError(err));\n    }\n  }, [graphUrl]);\n\n  useEffect(() => {\n    let userOdds = calculateOdds(poolBalance, totalDeposits, winners);\n    setYourOdds(userOdds);\n  }, [winners, totalDeposits, poolBalance]);\n\n  useEffect(() => {\n    if (hasCachedProvider()) {\n      // then user DOES have a wallet\n      connect().then(() => {\n        setWalletChecked(true);\n      });\n    } else {\n      // then user DOES NOT have a wallet\n      setWalletChecked(true);\n    }\n  }, []);\n\n  // this useEffect fires on state change from above. It will ALWAYS fire AFTER\n  useEffect(() => {\n    // don't load ANY details until wallet is Checked\n    if (walletChecked) {\n      dispatch(getPoolValues({ networkID: chainID, provider: provider }));\n      dispatch(getRNGStatus({ networkID: chainID, provider: provider }));\n    }\n  }, [walletChecked]);\n\n  return (\n    <div id=\"pool-together-view\">\n      <PoolPrize />\n\n      <Paper className=\"ohm-card\">\n        <Box display=\"flex\">\n          <CardHeader title=\"3, 3 Together\" />\n          <InfoTooltipMulti messagesArray={infoTooltipMessage} />\n        </Box>\n        <Tabs\n          centered\n          value={view}\n          textColor=\"primary\"\n          indicatorColor=\"primary\"\n          onChange={changeView}\n          className=\"pt-tabs\"\n          aria-label=\"pool tabs\"\n        >\n          <Tab label=\"Deposit\" {...a11yProps(0)} />\n          <Tab label=\"Withdraw\" {...a11yProps(1)} />\n        </Tabs>\n\n        <TabPanel value={view} index={0} className=\"pool-tab\">\n          <PoolDeposit\n            totalPoolDeposits={totalDeposits}\n            winners={winners}\n            setInfoTooltipMessage={setInfoTooltipMessage}\n          />\n        </TabPanel>\n        <TabPanel value={view} index={1} className=\"pool-tab\">\n          <PoolWithdraw\n            totalPoolDeposits={totalDeposits}\n            winners={winners}\n            setInfoTooltipMessage={setInfoTooltipMessage}\n          />\n        </TabPanel>\n      </Paper>\n\n      <PoolInfo\n        graphLoading={graphLoading}\n        isAccountLoading={isAccountLoading}\n        poolBalance={trim(poolBalance, 4)}\n        sohmBalance={trim(sohmBalance, 4)}\n        yourTotalAwards={trim(yourTotalAwards, 4)}\n        yourOdds={trim(yourOdds, 0)}\n        winners={winners}\n        totalDeposits={totalDeposits}\n        totalSponsorship={totalSponsorship}\n      />\n    </div>\n  );\n};\n\nexport default PoolTogether;\n"]},"metadata":{},"sourceType":"module"}