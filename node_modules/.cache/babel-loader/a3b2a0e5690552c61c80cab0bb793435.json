{"ast":null,"code":"var _jsxFileName = \"C:\\\\arete\\\\AlphaDAO-react\\\\src\\\\views\\\\33Together\\\\PoolPrize.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useWeb3Context } from \"../../hooks\";\nimport { awardProcess, getRNGStatus, getPoolValues } from \"../../slices/PoolThunk\";\nimport { Paper, Box, Typography, Button } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { trim, subtractDates } from \"src/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PoolPrize = () => {\n  _s();\n\n  const {\n    provider,\n    chainID\n  } = useWeb3Context();\n  const dispatch = useDispatch();\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const [timer, setTimer] = useState(null);\n  const [showAwardStart, setShowAwardStart] = useState(false);\n  const isPoolLoading = useSelector(state => {\n    var _state$poolData$loadi;\n\n    return (_state$poolData$loadi = state.poolData.loading) !== null && _state$poolData$loadi !== void 0 ? _state$poolData$loadi : true;\n  });\n  const poolAwardTimeRemaining = useSelector(state => {\n    return state.poolData && state.poolData.awardPeriodRemainingSeconds;\n  });\n  const poolAwardBalance = useSelector(state => {\n    return state.poolData && state.poolData.awardBalance;\n  }); // when true someone has started the award\n\n  const poolIsLocked = useSelector(state => {\n    return state.poolData && state.poolData.isRngRequested;\n  }); // when true we need to cancel award\n\n  const isRngTimedOut = useSelector(state => {\n    return state.poolData && state.poolData.isRngTimedOut;\n  }); // when true the award is complete & timer should reset.\n\n  const rngRequestCompleted = useSelector(state => {\n    return state.poolData && state.poolData.rngRequestCompleted;\n  });\n  let timerInterval = useRef(); // handleAward not used yet\n\n  const handleAward = async action => {\n    console.log(`run ${action} on pool`);\n    await dispatch(awardProcess({\n      action,\n      provider,\n      networkID: chainID\n    }));\n  };\n\n  const rngQueryFunc = () => {\n    dispatch(getRNGStatus({\n      networkID: chainID,\n      provider: provider\n    }));\n    if (poolIsLocked) dispatch(getPoolValues({\n      networkID: chainID,\n      provider: provider\n    }));\n  };\n\n  const decreaseNum = () => {\n    if (secondsLeft <= 1) {\n      // Time has ticked down.\n      // There is no time left, attach RNG (Award) Start listener\n      rngQueryFunc();\n    }\n\n    setSecondsLeft(prev => prev - 1);\n  }; // the seconds countdown timer...\n\n\n  useEffect(() => {\n    const currentDate = new Date(Date.now()); // multiply integerTimeRemaining by 1000 for milliseconds\n\n    const futureDate = new Date(currentDate.getTime() + secondsLeft * 1000);\n    const formatted = subtractDates(futureDate, currentDate);\n    setTimer(formatted);\n\n    if (secondsLeft > 0) {\n      timerInterval.current = setInterval(decreaseNum, 1000);\n      return () => clearInterval(timerInterval.current);\n    }\n  }, [secondsLeft]);\n  useEffect(() => {\n    if (parseInt(poolAwardTimeRemaining, 10) > 0) {\n      setShowAwardStart(false);\n      setSecondsLeft(parseInt(poolAwardTimeRemaining, 10));\n    } else if (poolIsLocked) {\n      setShowAwardStart(false); // wait 30 seconds... we're just waiting for award\n\n      setTimeout(() => {\n        // retry until Pool Is Not Locked, then go get new time\n        rngQueryFunc();\n      }, 30000);\n    } else if (parseInt(poolAwardTimeRemaining, 10) <= 0) {\n      setShowAwardStart(true); // There is no time left, attach RNG (Award) Start listener\n      // the rngQueryFunc will run repeatedly once the above conditions are true;\n\n      setTimeout(() => {\n        // retry until pool is locked, then hits above block\n        rngQueryFunc();\n      }, 10000);\n    }\n  }, [poolAwardTimeRemaining, poolIsLocked, rngRequestCompleted]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    className: \"pool-prize-card\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: \"vegas-container\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: \"vegas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      className: \"ohm-card\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        children: [parseFloat(poolAwardBalance) === 0 ? /*#__PURE__*/_jsxDEV(Box, {\n          margin: 2,\n          textAlign: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h3\",\n            children: \"Pool Award Balance is currently 0.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            children: \"Award Balance will grow at 1st rebase.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Box, {\n          margin: 2,\n          textAlign: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h1\",\n            children: [trim(poolAwardBalance, 2), \" sOHM\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            children: \"Current Prize\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), poolIsLocked ? /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Prize is being awarded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Next award\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: \"pool-timer\",\n          children: timer && poolIsLocked !== true && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              className: \"pool-timer-unit\",\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h3\",\n                children: isPoolLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n                  width: 20\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 61\n                }, this) : timer.days\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                children: \"day\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              className: \"pool-timer-unit\",\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h3\",\n                children: isPoolLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n                  width: 20\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 61\n                }, this) : timer.hours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                children: \"hrs\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              className: \"pool-timer-unit\",\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h3\",\n                children: isPoolLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n                  width: 20\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 61\n                }, this) : timer.minutes\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                children: \"min\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              className: \"pool-timer-unit\",\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h3\",\n                children: isPoolLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n                  width: 20\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 61\n                }, this) : timer.seconds\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                children: \"sec\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), poolIsLocked && /*#__PURE__*/_jsxDEV(Box, {\n          margin: 2,\n          display: \"flex\",\n          style: {\n            flexDirection: \"column\",\n            gap: 4,\n            justifyContent: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"textSecondary\",\n            padding: 2,\n            children: \"Award period has finished, you can navigate to Pool Together's UI to complete distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), !poolIsLocked && showAwardStart && /*#__PURE__*/_jsxDEV(Box, {\n          margin: 2,\n          display: \"flex\",\n          style: {\n            flexDirection: \"column\",\n            gap: 4,\n            justifyContent: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"textSecondary\",\n            children: \"Award period has finished, you can navigate to Pool Together's UI to begin distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PoolPrize, \"khF+bf+O+/A1nTJ2wyCTmeqUxqo=\", false, function () {\n  return [useWeb3Context, useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = PoolPrize;\n\nvar _c;\n\n$RefreshReg$(_c, \"PoolPrize\");","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/views/33Together/PoolPrize.jsx"],"names":["useState","useEffect","useRef","useSelector","useDispatch","useWeb3Context","awardProcess","getRNGStatus","getPoolValues","Paper","Box","Typography","Button","Skeleton","trim","subtractDates","PoolPrize","provider","chainID","dispatch","secondsLeft","setSecondsLeft","timer","setTimer","showAwardStart","setShowAwardStart","isPoolLoading","state","poolData","loading","poolAwardTimeRemaining","awardPeriodRemainingSeconds","poolAwardBalance","awardBalance","poolIsLocked","isRngRequested","isRngTimedOut","rngRequestCompleted","timerInterval","handleAward","action","console","log","networkID","rngQueryFunc","decreaseNum","prev","currentDate","Date","now","futureDate","getTime","formatted","current","setInterval","clearInterval","parseInt","setTimeout","parseFloat","days","hours","minutes","seconds","flexDirection","gap","justifyContent"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useWeb3Context } from \"../../hooks\";\nimport { awardProcess, getRNGStatus, getPoolValues } from \"../../slices/PoolThunk\";\n\nimport { Paper, Box, Typography, Button } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\nimport { trim, subtractDates } from \"src/helpers\";\n\nexport const PoolPrize = () => {\n  const { provider, chainID } = useWeb3Context();\n  const dispatch = useDispatch();\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const [timer, setTimer] = useState(null);\n  const [showAwardStart, setShowAwardStart] = useState(false);\n\n  const isPoolLoading = useSelector(state => state.poolData.loading ?? true);\n\n  const poolAwardTimeRemaining = useSelector(state => {\n    return state.poolData && state.poolData.awardPeriodRemainingSeconds;\n  });\n\n  const poolAwardBalance = useSelector(state => {\n    return state.poolData && state.poolData.awardBalance;\n  });\n\n  // when true someone has started the award\n  const poolIsLocked = useSelector(state => {\n    return state.poolData && state.poolData.isRngRequested;\n  });\n\n  // when true we need to cancel award\n  const isRngTimedOut = useSelector(state => {\n    return state.poolData && state.poolData.isRngTimedOut;\n  });\n\n  // when true the award is complete & timer should reset.\n  const rngRequestCompleted = useSelector(state => {\n    return state.poolData && state.poolData.rngRequestCompleted;\n  });\n\n  let timerInterval = useRef();\n\n  // handleAward not used yet\n  const handleAward = async action => {\n    console.log(`run ${action} on pool`);\n    await dispatch(awardProcess({ action, provider, networkID: chainID }));\n  };\n\n  const rngQueryFunc = () => {\n    dispatch(getRNGStatus({ networkID: chainID, provider: provider }));\n    if (poolIsLocked) dispatch(getPoolValues({ networkID: chainID, provider: provider }));\n  };\n\n  const decreaseNum = () => {\n    if (secondsLeft <= 1) {\n      // Time has ticked down.\n      // There is no time left, attach RNG (Award) Start listener\n      rngQueryFunc();\n    }\n    setSecondsLeft(prev => prev - 1);\n  };\n\n  // the seconds countdown timer...\n  useEffect(() => {\n    const currentDate = new Date(Date.now());\n    // multiply integerTimeRemaining by 1000 for milliseconds\n    const futureDate = new Date(currentDate.getTime() + secondsLeft * 1000);\n    const formatted = subtractDates(futureDate, currentDate);\n    setTimer(formatted);\n    if (secondsLeft > 0) {\n      timerInterval.current = setInterval(decreaseNum, 1000);\n      return () => clearInterval(timerInterval.current);\n    }\n  }, [secondsLeft]);\n\n  useEffect(() => {\n    if (parseInt(poolAwardTimeRemaining, 10) > 0) {\n      setShowAwardStart(false);\n      setSecondsLeft(parseInt(poolAwardTimeRemaining, 10));\n    } else if (poolIsLocked) {\n      setShowAwardStart(false);\n      // wait 30 seconds... we're just waiting for award\n      setTimeout(() => {\n        // retry until Pool Is Not Locked, then go get new time\n        rngQueryFunc();\n      }, 30000);\n    } else if (parseInt(poolAwardTimeRemaining, 10) <= 0) {\n      setShowAwardStart(true);\n      // There is no time left, attach RNG (Award) Start listener\n      // the rngQueryFunc will run repeatedly once the above conditions are true;\n      setTimeout(() => {\n        // retry until pool is locked, then hits above block\n        rngQueryFunc();\n      }, 10000);\n    }\n  }, [poolAwardTimeRemaining, poolIsLocked, rngRequestCompleted]);\n\n  return (\n    <Box width=\"100%\" display=\"flex\" flexDirection=\"column\" alignItems=\"center\" className=\"pool-prize-card\">\n      <Box className=\"vegas-container\">\n        <Box className=\"vegas\"></Box>\n      </Box>\n      <Paper className=\"ohm-card\">\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n          {parseFloat(poolAwardBalance) === 0 ? (\n            <Box margin={2} textAlign=\"center\">\n              <Typography variant=\"h3\">Pool Award Balance is currently 0.</Typography>\n              <Typography variant=\"h4\">Award Balance will grow at 1st rebase.</Typography>\n            </Box>\n          ) : (\n            <Box margin={2} textAlign=\"center\">\n              <Typography variant=\"h1\">{trim(poolAwardBalance, 2)} sOHM</Typography>\n              <Typography variant=\"h4\">Current Prize</Typography>\n            </Box>\n          )}\n          {poolIsLocked ? (\n            <Typography variant=\"h6\">Prize is being awarded</Typography>\n          ) : (\n            <Typography variant=\"h6\">Next award</Typography>\n          )}\n          <Box className=\"pool-timer\">\n            {timer && poolIsLocked !== true && (\n              <>\n                <Box className=\"pool-timer-unit\">\n                  <Typography variant=\"h3\">{isPoolLoading ? <Skeleton width={20} /> : timer.days}</Typography>\n                  <Typography>day</Typography>\n                </Box>\n\n                <Box className=\"pool-timer-unit\">\n                  <Typography variant=\"h3\">{isPoolLoading ? <Skeleton width={20} /> : timer.hours}</Typography>\n                  <Typography>hrs</Typography>\n                </Box>\n\n                <Box className=\"pool-timer-unit\">\n                  <Typography variant=\"h3\">{isPoolLoading ? <Skeleton width={20} /> : timer.minutes}</Typography>\n                  <Typography>min</Typography>\n                </Box>\n                <Box className=\"pool-timer-unit\">\n                  <Typography variant=\"h3\">{isPoolLoading ? <Skeleton width={20} /> : timer.seconds}</Typography>\n                  <Typography>sec</Typography>\n                </Box>\n              </>\n            )}\n          </Box>\n\n          {/* Timer won't show when poolIsLocked */}\n          {poolIsLocked && (\n            <Box margin={2} display=\"flex\" style={{ flexDirection: \"column\", gap: 4, justifyContent: \"center\" }}>\n              {/* <Button\n                id=\"pool-complete-award-button\"\n                className=\"pool-complete-award-button\"\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => handleAward(\"completeAward\")}\n                style={{ alignSelf: \"center\", margin: \"5px\" }}\n              >\n                Complete Award\n              </Button> */}\n              <Typography variant=\"body1\" color=\"textSecondary\" padding={2}>\n                Award period has finished, you can navigate to Pool Together's UI to complete distribution\n              </Typography>\n            </Box>\n          )}\n\n          {/* Timer still shows (0s) for poolIsLocked === false */}\n          {!poolIsLocked && showAwardStart && (\n            <Box margin={2} display=\"flex\" style={{ flexDirection: \"column\", gap: 4, justifyContent: \"center\" }}>\n              {/* <Button\n                id=\"pool-start-award-button\"\n                className=\"pool-start-award-button\"\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => handleAward(\"startAward\")}\n                style={{ alignSelf: \"center\", margin: \"5px\" }}\n              >\n                Start Award\n              </Button> */}\n              <Typography variant=\"body1\" color=\"textSecondary\">\n                Award period has finished, you can navigate to Pool Together's UI to begin distribution\n              </Typography>\n            </Box>\n          )}\n        </Box>\n      </Paper>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}