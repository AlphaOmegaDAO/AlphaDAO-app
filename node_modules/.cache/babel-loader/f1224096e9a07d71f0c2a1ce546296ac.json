{"ast":null,"code":"var _jsxFileName = \"C:\\\\arete\\\\AlphaDAO-react\\\\src\\\\views\\\\ChooseBond\\\\ClaimBonds.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { ClaimBondTableData, ClaimBondCardData } from \"./ClaimRow\";\nimport { txnButtonText, isPendingTxn, txnButtonTextGeneralPending } from \"src/slices/PendingTxnsSlice\";\nimport { redeemAllBonds, redeemBond } from \"src/slices/BondSlice\";\nimport { calculateUserBondDetails } from \"src/slices/AccountSlice\";\nimport CardHeader from \"../../components/CardHeader/CardHeader\";\nimport { useWeb3Context } from \"src/hooks/web3Context\";\nimport useBonds from \"src/hooks/Bonds\";\nimport { Button, Box, Paper, TableContainer, TableHead, TableBody, TableRow, TableCell, Table, Zoom } from \"@material-ui/core\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport \"./choosebond.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ClaimBonds({\n  activeBonds\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    provider,\n    address,\n    chainID\n  } = useWeb3Context();\n  const {\n    bonds\n  } = useBonds(chainID);\n  const [numberOfBonds, setNumberOfBonds] = useState(0);\n  const isSmallScreen = useMediaQuery(\"(max-width: 733px)\"); // change to breakpoint query\n\n  const pendingTransactions = useSelector(state => {\n    return state.pendingTransactions;\n  });\n\n  const pendingClaim = () => {\n    if (isPendingTxn(pendingTransactions, \"redeem_all_bonds\") || isPendingTxn(pendingTransactions, \"redeem_all_bonds_autostake\")) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const onRedeemAll = async ({\n    autostake\n  }) => {\n    console.log(\"redeeming all bonds\");\n    await dispatch(redeemAllBonds({\n      address,\n      bonds,\n      networkID: chainID,\n      provider,\n      autostake\n    }));\n    console.log(\"redeem all complete\");\n  };\n\n  useEffect(() => {\n    let bondCount = Object.keys(activeBonds).length;\n    setNumberOfBonds(bondCount);\n  }, [activeBonds]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: numberOfBonds > 0 && /*#__PURE__*/_jsxDEV(Zoom, {\n      in: true,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        className: \"ohm-card claim-bonds-card\",\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          title: \"Your Bonds (1,1)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [!isSmallScreen && /*#__PURE__*/_jsxDEV(TableContainer, {\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              \"aria-label\": \"Claimable bonds\",\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"center\",\n                    children: \"Bond\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"center\",\n                    children: \"Claimable\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 74,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"center\",\n                    children: \"Pending\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: \"Fully Vested\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 76,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 77,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                children: Object.entries(activeBonds).map((bond, i) => /*#__PURE__*/_jsxDEV(ClaimBondTableData, {\n                  userBond: bond\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this), isSmallScreen && Object.entries(activeBonds).map((bond, i) => /*#__PURE__*/_jsxDEV(ClaimBondCardData, {\n            userBond: bond\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 62\n          }, this)), /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: \"center\",\n            className: `global-claim-buttons ${isSmallScreen ? \"small\" : \"\"}`,\n            children: numberOfBonds > 1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                className: \"transaction-button\",\n                fullWidth: true,\n                disabled: pendingClaim(),\n                onClick: () => {\n                  onRedeemAll({\n                    autostake: false\n                  });\n                },\n                children: txnButtonTextGeneralPending(pendingTransactions, \"redeem_all_bonds\", \"Claim all\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                id: \"claim-all-and-stake-btn\",\n                className: \"transaction-button\",\n                fullWidth: true,\n                disabled: pendingClaim(),\n                onClick: () => {\n                  onRedeemAll({\n                    autostake: true\n                  });\n                },\n                children: txnButtonTextGeneralPending(pendingTransactions, \"redeem_all_bonds_autostake\", \"Claim all and Stake\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(ClaimBonds, \"N6zgomr1dXnyU4H/XlGWQIHR5ts=\", false, function () {\n  return [useDispatch, useWeb3Context, useBonds, useMediaQuery, useSelector];\n});\n\n_c = ClaimBonds;\nexport default ClaimBonds;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimBonds\");","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/views/ChooseBond/ClaimBonds.jsx"],"names":["useEffect","useState","ClaimBondTableData","ClaimBondCardData","txnButtonText","isPendingTxn","txnButtonTextGeneralPending","redeemAllBonds","redeemBond","calculateUserBondDetails","CardHeader","useWeb3Context","useBonds","Button","Box","Paper","TableContainer","TableHead","TableBody","TableRow","TableCell","Table","Zoom","useMediaQuery","useSelector","useDispatch","ClaimBonds","activeBonds","dispatch","provider","address","chainID","bonds","numberOfBonds","setNumberOfBonds","isSmallScreen","pendingTransactions","state","pendingClaim","onRedeemAll","autostake","console","log","networkID","bondCount","Object","keys","length","entries","map","bond","i"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ClaimBondTableData, ClaimBondCardData } from \"./ClaimRow\";\nimport { txnButtonText, isPendingTxn, txnButtonTextGeneralPending } from \"src/slices/PendingTxnsSlice\";\nimport { redeemAllBonds, redeemBond } from \"src/slices/BondSlice\";\nimport { calculateUserBondDetails } from \"src/slices/AccountSlice\";\nimport CardHeader from \"../../components/CardHeader/CardHeader\";\nimport { useWeb3Context } from \"src/hooks/web3Context\";\nimport useBonds from \"src/hooks/Bonds\";\nimport {\n  Button,\n  Box,\n  Paper,\n  TableContainer,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Table,\n  Zoom,\n} from \"@material-ui/core\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport \"./choosebond.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction ClaimBonds({ activeBonds }) {\n  const dispatch = useDispatch();\n  const { provider, address, chainID } = useWeb3Context();\n  const { bonds } = useBonds(chainID);\n\n  const [numberOfBonds, setNumberOfBonds] = useState(0);\n  const isSmallScreen = useMediaQuery(\"(max-width: 733px)\"); // change to breakpoint query\n\n  const pendingTransactions = useSelector(state => {\n    return state.pendingTransactions;\n  });\n\n  const pendingClaim = () => {\n    if (\n      isPendingTxn(pendingTransactions, \"redeem_all_bonds\") ||\n      isPendingTxn(pendingTransactions, \"redeem_all_bonds_autostake\")\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const onRedeemAll = async ({ autostake }) => {\n    console.log(\"redeeming all bonds\");\n\n    await dispatch(redeemAllBonds({ address, bonds, networkID: chainID, provider, autostake }));\n\n    console.log(\"redeem all complete\");\n  };\n\n  useEffect(() => {\n    let bondCount = Object.keys(activeBonds).length;\n    setNumberOfBonds(bondCount);\n  }, [activeBonds]);\n\n  return (\n    <>\n      {numberOfBonds > 0 && (\n        <Zoom in={true}>\n          <Paper className=\"ohm-card claim-bonds-card\">\n            <CardHeader title=\"Your Bonds (1,1)\" />\n            <Box>\n              {!isSmallScreen && (\n                <TableContainer>\n                  <Table aria-label=\"Claimable bonds\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell align=\"center\">Bond</TableCell>\n                        <TableCell align=\"center\">Claimable</TableCell>\n                        <TableCell align=\"center\">Pending</TableCell>\n                        <TableCell align=\"right\">Fully Vested</TableCell>\n                        <TableCell align=\"right\"></TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {Object.entries(activeBonds).map((bond, i) => (\n                        <ClaimBondTableData key={i} userBond={bond} />\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              )}\n\n              {isSmallScreen &&\n                Object.entries(activeBonds).map((bond, i) => <ClaimBondCardData key={i} userBond={bond} />)}\n\n              <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                className={`global-claim-buttons ${isSmallScreen ? \"small\" : \"\"}`}\n              >\n                {numberOfBonds > 1 && (\n                  <>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className=\"transaction-button\"\n                      fullWidth\n                      disabled={pendingClaim()}\n                      onClick={() => {\n                        onRedeemAll({ autostake: false });\n                      }}\n                    >\n                      {txnButtonTextGeneralPending(pendingTransactions, \"redeem_all_bonds\", \"Claim all\")}\n                    </Button>\n\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      id=\"claim-all-and-stake-btn\"\n                      className=\"transaction-button\"\n                      fullWidth\n                      disabled={pendingClaim()}\n                      onClick={() => {\n                        onRedeemAll({ autostake: true });\n                      }}\n                    >\n                      {txnButtonTextGeneralPending(\n                        pendingTransactions,\n                        \"redeem_all_bonds_autostake\",\n                        \"Claim all and Stake\",\n                      )}\n                    </Button>\n                  </>\n                )}\n              </Box>\n            </Box>\n          </Paper>\n        </Zoom>\n      )}\n    </>\n  );\n}\n\nexport default ClaimBonds;\n"]},"metadata":{},"sourceType":"module"}