{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { addresses } from \"../constants\";\n\n/**\n * Calculates user's odds of winning based on their pool balance\n * @param {*} usersPoolBalance the user's total balance of pool tokens\n * @param {*} totalPoolDeposits the pool's total balance of deposits. Does not include totalSponsorship deposits since those can't win\n * @param {*} winners the pool's winners quantity per award period\n * PoolTogether's implementation: https://github.com/pooltogether/pooltogether-community-ui/blob/2d4749e2e64c4f2ae259ac073edc0a49ca5857e2/lib/utils/calculateOdds.js#L3\n */\nexport const calculateOdds = (usersPoolBalance, totalPoolDeposits, winners) => {\n  let userOdds;\n\n  if (usersPoolBalance === undefined || Number(usersPoolBalance) === 0 || parseFloat(usersPoolBalance) === 0) {\n    userOdds = \"ngmi\";\n  } else {\n    userOdds = 1 / (1 - Math.pow((totalPoolDeposits - Number(usersPoolBalance)) / totalPoolDeposits, winners));\n  }\n\n  return userOdds;\n};\n/**\n * Calculates exitFeeDecayTime\n * @param {*} ticketCreditRateMantissa from the contract\n * @param {*} ticketCreditLimitMantissa from the contract\n * @returns {Array} [creditMaturationInDays === ExitFeeDecayTime (in days), creditLimitPercentage === ExitFee as %]\n * PoolTogether's implementation: https://github.com/pooltogether/pooltogether-community-ui/blob/93884caf76eb91ec700c4a74c3fc40ecf65c1d47/lib/utils/format.js#L50\n */\n\nexport const getCreditMaturationDaysAndLimitPercentage = (ticketCreditRateMantissa, ticketCreditLimitMantissa) => {\n  const creditLimitMantissa = ethers.utils.formatEther(ticketCreditLimitMantissa);\n  const creditLimitPercentage = fractionToPercentage(Number(creditLimitMantissa));\n  const creditMaturationInSeconds = ticketCreditRateMantissa.gt(0) ? Number(ticketCreditLimitMantissa.div(ticketCreditRateMantissa).toString()) : 0;\n  const creditMaturationInDays = secondsToDaysForInput(creditMaturationInSeconds);\n  return [creditMaturationInDays, creditLimitPercentage];\n};\n/**\n * Convert a fraction to a whole number\n */\n\nexport const fractionToPercentage = fraction => {\n  return Math.round(fraction * 100);\n};\n/**\n * Convert a number of days to seconds.\n * Rounding to 4 significant digits (minimum value is ~8 seconds).\n * @param {*} seconds\n */\n\nexport const secondsToDaysForInput = seconds => {\n  return Math.round(seconds / 60 / 60 / 24 * 10000) / 10000;\n};\n/**\n * TODO: add the mainnet urls\n * return helper urls for the Pool Together UI.\n * @param chainID\n * @returns [PrizePoolURI, PoolDetailsURI]\n */\n\nexport const poolTogetherUILinks = chainID => {\n  const contractAddress = addresses[chainID].PT_PRIZE_POOL_ADDRESS;\n\n  if (chainID === 4) {\n    return [`https://community.pooltogether.com/pools/rinkeby/${contractAddress}/home`, `https://community.pooltogether.com/pools/rinkeby/${contractAddress}/manage#stats`];\n  } else {\n    return [`https://app.pooltogether.com/pools/mainnet/sOHM`, `https://community.pooltogether.com/pools/mainnet/${contractAddress}/manage#stats`];\n  }\n};","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/helpers/33Together.ts"],"names":["ethers","addresses","calculateOdds","usersPoolBalance","totalPoolDeposits","winners","userOdds","undefined","Number","parseFloat","Math","pow","getCreditMaturationDaysAndLimitPercentage","ticketCreditRateMantissa","ticketCreditLimitMantissa","creditLimitMantissa","utils","formatEther","creditLimitPercentage","fractionToPercentage","creditMaturationInSeconds","gt","div","toString","creditMaturationInDays","secondsToDaysForInput","fraction","round","seconds","poolTogetherUILinks","chainID","contractAddress","PT_PRIZE_POOL_ADDRESS"],"mappings":"AAAA,SAAoBA,MAApB,QAAkC,QAAlC;AACA,SAASC,SAAT,QAA0B,cAA1B;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,CAACC,gBAAD,EAA2BC,iBAA3B,EAAsDC,OAAtD,KAA0E;AACrG,MAAIC,QAAJ;;AACA,MAAIH,gBAAgB,KAAKI,SAArB,IAAkCC,MAAM,CAACL,gBAAD,CAAN,KAA6B,CAA/D,IAAoEM,UAAU,CAACN,gBAAD,CAAV,KAAiC,CAAzG,EAA4G;AAC1GG,IAAAA,QAAQ,GAAG,MAAX;AACD,GAFD,MAEO;AACLA,IAAAA,QAAQ,GAAG,KAAK,IAAII,IAAI,CAACC,GAAL,CAAS,CAACP,iBAAiB,GAAGI,MAAM,CAACL,gBAAD,CAA3B,IAAiDC,iBAA1D,EAA6EC,OAA7E,CAAT,CAAX;AACD;;AACD,SAAOC,QAAP;AACD,CARM;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,yCAAyC,GAAG,CACvDC,wBADuD,EAEvDC,yBAFuD,KAGrC;AAClB,QAAMC,mBAAmB,GAAGf,MAAM,CAACgB,KAAP,CAAaC,WAAb,CAAyBH,yBAAzB,CAA5B;AACA,QAAMI,qBAAqB,GAAGC,oBAAoB,CAACX,MAAM,CAACO,mBAAD,CAAP,CAAlD;AACA,QAAMK,yBAAyB,GAAGP,wBAAwB,CAACQ,EAAzB,CAA4B,CAA5B,IAC9Bb,MAAM,CAACM,yBAAyB,CAACQ,GAA1B,CAA8BT,wBAA9B,EAAwDU,QAAxD,EAAD,CADwB,GAE9B,CAFJ;AAGA,QAAMC,sBAAsB,GAAGC,qBAAqB,CAACL,yBAAD,CAApD;AACA,SAAO,CAACI,sBAAD,EAAyBN,qBAAzB,CAAP;AACD,CAXM;AAaP;AACA;AACA;;AACA,OAAO,MAAMC,oBAAoB,GAAIO,QAAD,IAAsB;AACxD,SAAOhB,IAAI,CAACiB,KAAL,CAAWD,QAAQ,GAAG,GAAtB,CAAP;AACD,CAFM;AAIP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMD,qBAAqB,GAAIG,OAAD,IAAqB;AACxD,SAAOlB,IAAI,CAACiB,KAAL,CAAYC,OAAO,GAAG,EAAV,GAAe,EAAf,GAAoB,EAArB,GAA2B,KAAtC,IAA+C,KAAtD;AACD,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAIC,OAAD,IAAoC;AACrE,QAAMC,eAAe,GAAG9B,SAAS,CAAC6B,OAAD,CAAT,CAAmBE,qBAA3C;;AAEA,MAAIF,OAAO,KAAK,CAAhB,EAAmB;AACjB,WAAO,CACJ,oDAAmDC,eAAgB,OAD/D,EAEJ,oDAAmDA,eAAgB,eAF/D,CAAP;AAID,GALD,MAKO;AACL,WAAO,CACJ,iDADI,EAEJ,oDAAmDA,eAAgB,eAF/D,CAAP;AAID;AACF,CAdM","sourcesContent":["import { BigNumber, ethers } from \"ethers\";\nimport { addresses } from \"../constants\";\nimport { abi as PrizePool } from \"../abi/33-together/PrizePoolAbi2.json\";\nimport { abi as AwardPool } from \"../abi/33-together/AwardAbi2.json\";\nimport { abi as SOhmAbi } from \"../abi/sOHM.json\";\n\n/**\n * Calculates user's odds of winning based on their pool balance\n * @param {*} usersPoolBalance the user's total balance of pool tokens\n * @param {*} totalPoolDeposits the pool's total balance of deposits. Does not include totalSponsorship deposits since those can't win\n * @param {*} winners the pool's winners quantity per award period\n * PoolTogether's implementation: https://github.com/pooltogether/pooltogether-community-ui/blob/2d4749e2e64c4f2ae259ac073edc0a49ca5857e2/lib/utils/calculateOdds.js#L3\n */\nexport const calculateOdds = (usersPoolBalance: string, totalPoolDeposits: number, winners: number) => {\n  let userOdds;\n  if (usersPoolBalance === undefined || Number(usersPoolBalance) === 0 || parseFloat(usersPoolBalance) === 0) {\n    userOdds = \"ngmi\";\n  } else {\n    userOdds = 1 / (1 - Math.pow((totalPoolDeposits - Number(usersPoolBalance)) / totalPoolDeposits, winners));\n  }\n  return userOdds;\n};\n\n/**\n * Calculates exitFeeDecayTime\n * @param {*} ticketCreditRateMantissa from the contract\n * @param {*} ticketCreditLimitMantissa from the contract\n * @returns {Array} [creditMaturationInDays === ExitFeeDecayTime (in days), creditLimitPercentage === ExitFee as %]\n * PoolTogether's implementation: https://github.com/pooltogether/pooltogether-community-ui/blob/93884caf76eb91ec700c4a74c3fc40ecf65c1d47/lib/utils/format.js#L50\n */\nexport const getCreditMaturationDaysAndLimitPercentage = (\n  ticketCreditRateMantissa: BigNumber,\n  ticketCreditLimitMantissa: BigNumber,\n): Array<number> => {\n  const creditLimitMantissa = ethers.utils.formatEther(ticketCreditLimitMantissa);\n  const creditLimitPercentage = fractionToPercentage(Number(creditLimitMantissa));\n  const creditMaturationInSeconds = ticketCreditRateMantissa.gt(0)\n    ? Number(ticketCreditLimitMantissa.div(ticketCreditRateMantissa).toString())\n    : 0;\n  const creditMaturationInDays = secondsToDaysForInput(creditMaturationInSeconds);\n  return [creditMaturationInDays, creditLimitPercentage];\n};\n\n/**\n * Convert a fraction to a whole number\n */\nexport const fractionToPercentage = (fraction: number) => {\n  return Math.round(fraction * 100);\n};\n\n/**\n * Convert a number of days to seconds.\n * Rounding to 4 significant digits (minimum value is ~8 seconds).\n * @param {*} seconds\n */\nexport const secondsToDaysForInput = (seconds: number) => {\n  return Math.round((seconds / 60 / 60 / 24) * 10000) / 10000;\n};\n\n/**\n * TODO: add the mainnet urls\n * return helper urls for the Pool Together UI.\n * @param chainID\n * @returns [PrizePoolURI, PoolDetailsURI]\n */\nexport const poolTogetherUILinks = (chainID: number): Array<string> => {\n  const contractAddress = addresses[chainID].PT_PRIZE_POOL_ADDRESS;\n\n  if (chainID === 4) {\n    return [\n      `https://community.pooltogether.com/pools/rinkeby/${contractAddress}/home`,\n      `https://community.pooltogether.com/pools/rinkeby/${contractAddress}/manage#stats`,\n    ];\n  } else {\n    return [\n      `https://app.pooltogether.com/pools/mainnet/sOHM`,\n      `https://community.pooltogether.com/pools/mainnet/${contractAddress}/manage#stats`,\n    ];\n  }\n};\n"]},"metadata":{},"sourceType":"module"}