{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport accountReducer from \"./slices/AccountSlice\";\nimport bondingReducer from \"./slices/BondSlice\";\nimport appReducer from \"./slices/AppSlice\";\nimport pendingTransactionsReducer from \"./slices/PendingTxnsSlice\";\nimport poolDataReducer from \"./slices/PoolThunk\";\nimport lusdDataReducer from \"./slices/LusdSlice\";\nimport messagesReducer from \"./slices/MessagesSlice\"; // reducers are named automatically based on the name field in the slice\n// exported in slice files by default as nameOfSlice.reducer\n\nconst store = configureStore({\n  reducer: {\n    //   we'll have state.account, state.bonding, etc, each handled by the corresponding\n    // reducer imported from the slice file\n    account: accountReducer,\n    bonding: bondingReducer,\n    app: appReducer,\n    pendingTransactions: pendingTransactionsReducer,\n    poolData: poolDataReducer,\n    lusdData: lusdDataReducer,\n    messages: messagesReducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false\n  })\n});\nexport default store;","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/store.ts"],"names":["configureStore","accountReducer","bondingReducer","appReducer","pendingTransactionsReducer","poolDataReducer","lusdDataReducer","messagesReducer","store","reducer","account","bonding","app","pendingTransactions","poolData","lusdData","messages","middleware","getDefaultMiddleware","serializableCheck"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,0BAAP,MAAuC,2BAAvC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,eAAP,MAA4B,wBAA5B,C,CACA;AACA;;AAEA,MAAMC,KAAK,GAAGR,cAAc,CAAC;AAC3BS,EAAAA,OAAO,EAAE;AACP;AACA;AACAC,IAAAA,OAAO,EAAET,cAHF;AAIPU,IAAAA,OAAO,EAAET,cAJF;AAKPU,IAAAA,GAAG,EAAET,UALE;AAMPU,IAAAA,mBAAmB,EAAET,0BANd;AAOPU,IAAAA,QAAQ,EAAET,eAPH;AAQPU,IAAAA,QAAQ,EAAET,eARH;AASPU,IAAAA,QAAQ,EAAET;AATH,GADkB;AAY3BU,EAAAA,UAAU,EAAEC,oBAAoB,IAAIA,oBAAoB,CAAC;AAAEC,IAAAA,iBAAiB,EAAE;AAArB,GAAD;AAZ7B,CAAD,CAA5B;AAiBA,eAAeX,KAAf","sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport accountReducer from \"./slices/AccountSlice\";\nimport bondingReducer from \"./slices/BondSlice\";\nimport appReducer from \"./slices/AppSlice\";\nimport pendingTransactionsReducer from \"./slices/PendingTxnsSlice\";\nimport poolDataReducer from \"./slices/PoolThunk\";\nimport lusdDataReducer from \"./slices/LusdSlice\";\nimport messagesReducer from \"./slices/MessagesSlice\";\n// reducers are named automatically based on the name field in the slice\n// exported in slice files by default as nameOfSlice.reducer\n\nconst store = configureStore({\n  reducer: {\n    //   we'll have state.account, state.bonding, etc, each handled by the corresponding\n    // reducer imported from the slice file\n    account: accountReducer,\n    bonding: bondingReducer,\n    app: appReducer,\n    pendingTransactions: pendingTransactionsReducer,\n    poolData: poolDataReducer,\n    lusdData: lusdDataReducer,\n    messages: messagesReducer,\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({ serializableCheck: false }),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}