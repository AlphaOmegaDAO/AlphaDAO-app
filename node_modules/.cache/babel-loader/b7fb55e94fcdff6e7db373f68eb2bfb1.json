{"ast":null,"code":"var _jsxFileName = \"C:\\\\arete\\\\AlphaDAO-react\\\\src\\\\hooks\\\\web3Context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useMemo, useCallback } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport { StaticJsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { IFrameEthereumProvider } from \"@ledgerhq/iframe-provider\";\nimport { EnvHelper } from \"../helpers/Environment\";\nimport { NodeHelper } from \"src/helpers/NodeHelper\";\n/**\n * kept as function to mimic `getTestnetURI()`\n * @returns string\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getTestnetURI() {\n  return EnvHelper.alchemyTestnetURI;\n}\n/*\n * kept as function to mimic `getBSCTestnetURI()`\n */\n\n\nfunction getBSCTestnetURI() {\n  return EnvHelper.bscTestnetURI;\n}\n\nfunction getBSCMainnetURI() {\n  return EnvHelper.bscMainnetURI;\n}\n/*\n * kept as function to mimic `getMumbaiTestnetURI()`\n */\n\n\nfunction getMumbaiTestnetURI() {\n  return EnvHelper.mumbaiTestnetURI;\n}\n/*\n * kept as function to mimic `getPolygonURI()`\n */\n\n\nfunction getPolygonURI() {\n  return EnvHelper.polygonURI;\n}\n/**\n * determine if in IFrame for Ledger Live\n */\n\n\nfunction isIframe() {\n  return window.location !== window.parent.location;\n}\n\nconst ALL_URIs = NodeHelper.getNodesUris();\n/**\n * \"intelligently\" loadbalances production API Keys\n * @returns string\n */\n\nfunction getMainnetURI() {\n  // Shuffles the URIs for \"intelligent\" loadbalancing\n  const allURIs = ALL_URIs.sort(() => Math.random() - 0.5); // There is no lightweight way to test each URL. so just return a random one.\n  // if (workingURI !== undefined || workingURI !== \"\") return workingURI as string;\n\n  const randomIndex = Math.floor(Math.random() * allURIs.length);\n  return allURIs[randomIndex];\n}\n/*\n  Types\n*/\n\n\nconst Web3Context = /*#__PURE__*/React.createContext(null);\nexport const useWeb3Context = () => {\n  _s();\n\n  const web3Context = useContext(Web3Context);\n\n  if (!web3Context) {\n    throw new Error(\"useWeb3Context() can only be used inside of <Web3ContextProvider />, \" + \"please declare it at a higher level.\");\n  }\n\n  const {\n    onChainProvider\n  } = web3Context;\n  return useMemo(() => {\n    return { ...onChainProvider\n    };\n  }, [web3Context]);\n};\n\n_s(useWeb3Context, \"Xp/Ilap8+ITfpgM9rWPgFupq6w4=\");\n\nexport const useAddress = () => {\n  _s2();\n\n  const {\n    address\n  } = useWeb3Context();\n  return address;\n};\n\n_s2(useAddress, \"pdWcvJNgsqSr1yMsyQQKQtBRW0w=\", false, function () {\n  return [useWeb3Context];\n});\n\nexport const Web3ContextProvider = ({\n  children\n}) => {\n  _s3();\n\n  const [connected, setConnected] = useState(false); // NOTE (appleseed): if you are testing on rinkeby you need to set chainId === 4 as the default for non-connected wallet testing...\n  // ... you also need to set getTestnetURI() as the default uri state below\n\n  const [chainID, setChainID] = useState(97);\n  const [address, setAddress] = useState(\"\");\n  const [uri, setUri] = useState(getBSCTestnetURI());\n  const [provider, setProvider] = useState(new StaticJsonRpcProvider(uri));\n  const [web3Modal, setWeb3Modal] = useState(new Web3Modal({\n    // network: \"mainnet\", // optional\n    theme: {\n      background: \"#182328\",\n      main: \"#FFFFFF\",\n      secondary: \"rgba(255, 255, 255, 0.2)\",\n      border: \"#182328\",\n      hover: \"rgb(16, 26, 32)\"\n    },\n    cacheProvider: true,\n    // optional\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          rpc: {\n            1: getMainnetURI(),\n            4: getTestnetURI(),\n            // 97: getMumbaiTestnetURI(),\n            // 56: getPolygonURI(),\n            97: getBSCTestnetURI(),\n            56: getBSCMainnetURI()\n          }\n        }\n      }\n    }\n  }));\n\n  const hasCachedProvider = () => {\n    if (!web3Modal) return false;\n    if (!web3Modal.cachedProvider) return false;\n    return true;\n  }; // NOTE (appleseed): none of these listeners are needed for Backend API Providers\n  // ... so I changed these listeners so that they only apply to walletProviders, eliminating\n  // ... polling to the backend providers for network changes\n\n\n  const _initListeners = useCallback(rawProvider => {\n    if (!rawProvider.on) {\n      return;\n    }\n\n    rawProvider.on(\"accountsChanged\", async accounts => {\n      setTimeout(() => window.location.reload(), 1);\n    });\n    rawProvider.on(\"chainChanged\", async chain => {\n      _checkNetwork(chain);\n\n      setTimeout(() => window.location.reload(), 1);\n    });\n    rawProvider.on(\"network\", (_newNetwork, oldNetwork) => {\n      if (!oldNetwork) return;\n      window.location.reload();\n    });\n  }, [provider]);\n  /**\n   * throws an error if networkID is not 1 (mainnet) or 4 (rinkeby)\n   */\n\n\n  const _checkNetwork = otherChainID => {\n    if (chainID !== 97 && otherChainID !== 56) {\n      return false;\n    }\n\n    if (chainID !== otherChainID) {\n      console.warn(\"You are switching networks\");\n\n      if (otherChainID === 97 || otherChainID === 56) {\n        setChainID(otherChainID); // if (otherChainID === 1) setUri(getMainnetURI());\n        // else if (otherChainID === 4) setUri(getTestnetURI());\n        //if (otherChainID === 97) setUri(getMumbaiTestnetURI);\n        //else if (otherChainID === 56) setUri(getPolygonURI);\n\n        if (otherChainID === 97) setUri(getBSCTestnetURI);else if (otherChainID === 56) setUri(getBSCMainnetURI); // else setUri(getTestnetURI());\n\n        return true;\n      }\n\n      return false;\n    }\n\n    return true;\n  }; // connect - only runs for WalletProviders\n\n\n  const connect = useCallback(async () => {\n    // handling Ledger Live;\n    let rawProvider;\n\n    if (isIframe()) {\n      rawProvider = new IFrameEthereumProvider();\n    } else {\n      rawProvider = await web3Modal.connect();\n    } // new _initListeners implementation matches Web3Modal Docs\n    // ... see here: https://github.com/Web3Modal/web3modal/blob/2ff929d0e99df5edf6bb9e88cff338ba6d8a3991/example/src/App.tsx#L185\n\n\n    _initListeners(rawProvider);\n\n    const connectedProvider = new Web3Provider(rawProvider, \"any\");\n    const chainId = await connectedProvider.getNetwork().then(network => network.chainId);\n    const connectedAddress = await connectedProvider.getSigner().getAddress();\n\n    const validNetwork = _checkNetwork(chainId);\n\n    if (!validNetwork) {\n      console.error(\"Wrong network, please switch to Binance Smart Chain\");\n      return;\n    } // Save everything after we've validated the right network.\n    // Eventually we'll be fine without doing network validations.\n\n\n    setAddress(connectedAddress);\n    setProvider(connectedProvider); // Keep this at the bottom of the method, to ensure any repaints have the data we need\n\n    setConnected(true);\n    return connectedProvider;\n  }, [provider, web3Modal, connected]);\n  const disconnect = useCallback(async () => {\n    console.log(\"disconnecting\");\n    web3Modal.clearCachedProvider();\n    setConnected(false);\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  }, [provider, web3Modal, connected]);\n  const onChainProvider = useMemo(() => ({\n    connect,\n    disconnect,\n    hasCachedProvider,\n    provider,\n    connected,\n    address,\n    chainID,\n    web3Modal,\n    uri\n  }), [connect, disconnect, hasCachedProvider, provider, connected, address, chainID, web3Modal, uri]);\n  useEffect(() => {\n    // logs non-functioning nodes && returns an array of working mainnet nodes\n    NodeHelper.checkAllNodesStatus().then(validNodes => {\n      validNodes = validNodes.filter(url => url !== false);\n\n      if (!validNodes.includes(uri) && NodeHelper.retryOnInvalid()) {\n        // force new provider...\n        setTimeout(() => {\n          window.location.reload();\n        }, 1);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      onChainProvider\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 10\n  }, this);\n};\n\n_s3(Web3ContextProvider, \"fbf5wvWM6rKMjhFNFChZz5daBoQ=\");\n\n_c = Web3ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Web3ContextProvider\");","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/hooks/web3Context.tsx"],"names":["React","useState","useContext","useEffect","useMemo","useCallback","Web3Modal","StaticJsonRpcProvider","Web3Provider","WalletConnectProvider","IFrameEthereumProvider","EnvHelper","NodeHelper","getTestnetURI","alchemyTestnetURI","getBSCTestnetURI","bscTestnetURI","getBSCMainnetURI","bscMainnetURI","getMumbaiTestnetURI","mumbaiTestnetURI","getPolygonURI","polygonURI","isIframe","window","location","parent","ALL_URIs","getNodesUris","getMainnetURI","allURIs","sort","Math","random","randomIndex","floor","length","Web3Context","createContext","useWeb3Context","web3Context","Error","onChainProvider","useAddress","address","Web3ContextProvider","children","connected","setConnected","chainID","setChainID","setAddress","uri","setUri","provider","setProvider","web3Modal","setWeb3Modal","theme","background","main","secondary","border","hover","cacheProvider","providerOptions","walletconnect","package","options","rpc","hasCachedProvider","cachedProvider","_initListeners","rawProvider","on","accounts","setTimeout","reload","chain","_checkNetwork","_newNetwork","oldNetwork","otherChainID","console","warn","connect","connectedProvider","chainId","getNetwork","then","network","connectedAddress","getSigner","getAddress","validNetwork","error","disconnect","log","clearCachedProvider","checkAllNodesStatus","validNodes","filter","url","includes","retryOnInvalid"],"mappings":"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","sourcesContent":["import React, { useState, ReactElement, useContext, useEffect, useMemo, useCallback } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport { StaticJsonRpcProvider, JsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { IFrameEthereumProvider } from \"@ledgerhq/iframe-provider\";\nimport { EnvHelper } from \"../helpers/Environment\";\nimport { NodeHelper } from \"src/helpers/NodeHelper\";\n\n/**\n * kept as function to mimic `getTestnetURI()`\n * @returns string\n */\nfunction getTestnetURI() {\n  return EnvHelper.alchemyTestnetURI;\n}\n\n/*\n * kept as function to mimic `getBSCTestnetURI()`\n */\n \nfunction getBSCTestnetURI() {\n  return EnvHelper.bscTestnetURI;\n}\nfunction getBSCMainnetURI() {\n  return EnvHelper.bscMainnetURI;\n}\n\n/*\n * kept as function to mimic `getMumbaiTestnetURI()`\n */\nfunction getMumbaiTestnetURI() {\n  return EnvHelper.mumbaiTestnetURI;\n}\n\n/*\n * kept as function to mimic `getPolygonURI()`\n */\nfunction getPolygonURI() {\n  return EnvHelper.polygonURI;\n}\n\n/**\n * determine if in IFrame for Ledger Live\n */\n \nfunction isIframe() {\n  return window.location !== window.parent.location;\n}\n\nconst ALL_URIs = NodeHelper.getNodesUris();\n\n/**\n * \"intelligently\" loadbalances production API Keys\n * @returns string\n */\nfunction getMainnetURI(): string {\n  // Shuffles the URIs for \"intelligent\" loadbalancing\n  const allURIs = ALL_URIs.sort(() => Math.random() - 0.5);\n\n  // There is no lightweight way to test each URL. so just return a random one.\n  // if (workingURI !== undefined || workingURI !== \"\") return workingURI as string;\n  const randomIndex = Math.floor(Math.random() * allURIs.length);\n  return allURIs[randomIndex];\n}\n\n/*\n  Types\n*/\ntype onChainProvider = {\n  connect: () => void;\n  disconnect: () => void;\n  provider: JsonRpcProvider;\n  address: string;\n  connected: Boolean;\n  web3Modal: Web3Modal;\n};\n\nexport type Web3ContextData = {\n  onChainProvider: onChainProvider;\n} | null;\n\nconst Web3Context = React.createContext<Web3ContextData>(null);\n\nexport const useWeb3Context = () => {\n  const web3Context = useContext(Web3Context);\n  if (!web3Context) {\n    throw new Error(\n      \"useWeb3Context() can only be used inside of <Web3ContextProvider />, \" + \"please declare it at a higher level.\",\n    );\n  }\n  const { onChainProvider } = web3Context;\n  return useMemo(() => {\n    return { ...onChainProvider };\n  }, [web3Context]);\n};\n\nexport const useAddress = () => {\n  const { address } = useWeb3Context();\n  return address;\n};\n\nexport const Web3ContextProvider: React.FC<{ children: ReactElement }> = ({ children }) => {\n  const [connected, setConnected] = useState(false);\n  // NOTE (appleseed): if you are testing on rinkeby you need to set chainId === 4 as the default for non-connected wallet testing...\n  // ... you also need to set getTestnetURI() as the default uri state below\n  const [chainID, setChainID] = useState(97);\n  const [address, setAddress] = useState(\"\");\n\n  const [uri, setUri] = useState(getBSCTestnetURI());\n\n  const [provider, setProvider] = useState<JsonRpcProvider>(new StaticJsonRpcProvider(uri));\n\n\n\n\n\n  const [web3Modal, setWeb3Modal] = useState<Web3Modal>(\n    new Web3Modal({\n      // network: \"mainnet\", // optional\n      theme: {\n        background: \"#182328\",\n        main: \"#FFFFFF\",\n        secondary: \"rgba(255, 255, 255, 0.2)\",\n        border: \"#182328\",\n        hover: \"rgb(16, 26, 32)\",\n      },\n      cacheProvider: true, // optional\n      providerOptions: {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            rpc: {\n              1: getMainnetURI(),\n              4: getTestnetURI(),\n             // 97: getMumbaiTestnetURI(),\n             // 56: getPolygonURI(),\n              97: getBSCTestnetURI(),\n              56: getBSCMainnetURI(),\n            },\n          },\n        },\n      },\n    }),\n  );\n\n  const hasCachedProvider = (): Boolean => {\n    if (!web3Modal) return false;\n    if (!web3Modal.cachedProvider) return false;\n    return true;\n  };\n\n  // NOTE (appleseed): none of these listeners are needed for Backend API Providers\n  // ... so I changed these listeners so that they only apply to walletProviders, eliminating\n  // ... polling to the backend providers for network changes\n  const _initListeners = useCallback(\n    rawProvider => {\n      if (!rawProvider.on) {\n        return;\n      }\n      rawProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n        setTimeout(() => window.location.reload(), 1);\n      });\n\n      rawProvider.on(\"chainChanged\", async (chain: number) => {\n        _checkNetwork(chain);\n        setTimeout(() => window.location.reload(), 1);\n      });\n\n      rawProvider.on(\"network\", (_newNetwork: any, oldNetwork: any) => {\n        if (!oldNetwork) return;\n        window.location.reload();\n      });\n    },\n    [provider],\n  );\n\n  /**\n   * throws an error if networkID is not 1 (mainnet) or 4 (rinkeby)\n   */\n  const _checkNetwork = (otherChainID: number): Boolean => {\n    if (chainID !== 97 && otherChainID !== 56) {\n      return false;\n    }\n    if (chainID !== otherChainID) {\n      console.warn(\"You are switching networks\");\n      if (otherChainID === 97 || otherChainID === 56) {\n        setChainID(otherChainID);\n        // if (otherChainID === 1) setUri(getMainnetURI());\n        // else if (otherChainID === 4) setUri(getTestnetURI());\n        //if (otherChainID === 97) setUri(getMumbaiTestnetURI);\n        //else if (otherChainID === 56) setUri(getPolygonURI);\n          if (otherChainID === 97) setUri(getBSCTestnetURI);\n        else if (otherChainID === 56) setUri(getBSCMainnetURI);      \n              \n       // else setUri(getTestnetURI());\n        return true;\n      }\n      return false;\n    }\n    return true;\n  };\n\n  // connect - only runs for WalletProviders\n  const connect = useCallback(async () => {\n    // handling Ledger Live;\n    let rawProvider;\n    if (isIframe()) {\n      rawProvider = new IFrameEthereumProvider();\n    } else {\n      rawProvider = await web3Modal.connect();\n    }\n\n    // new _initListeners implementation matches Web3Modal Docs\n    // ... see here: https://github.com/Web3Modal/web3modal/blob/2ff929d0e99df5edf6bb9e88cff338ba6d8a3991/example/src/App.tsx#L185\n    _initListeners(rawProvider);\n    const connectedProvider = new Web3Provider(rawProvider, \"any\");\n    const chainId = await connectedProvider.getNetwork().then(network => network.chainId);\n    const connectedAddress = await connectedProvider.getSigner().getAddress();\n    const validNetwork = _checkNetwork(chainId);\n    if (!validNetwork) {\n      console.error(\"Wrong network, please switch to Binance Smart Chain\");\n      return;\n    }\n    // Save everything after we've validated the right network.\n    // Eventually we'll be fine without doing network validations.\n    setAddress(connectedAddress);\n    setProvider(connectedProvider);\n\n    // Keep this at the bottom of the method, to ensure any repaints have the data we need\n    setConnected(true);\n\n    return connectedProvider;\n  }, [provider, web3Modal, connected]);\n\n  const disconnect = useCallback(async () => {\n    console.log(\"disconnecting\");\n    web3Modal.clearCachedProvider();\n    setConnected(false);\n\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  }, [provider, web3Modal, connected]);\n\n  const onChainProvider = useMemo(\n    () => ({ connect, disconnect, hasCachedProvider, provider, connected, address, chainID, web3Modal, uri }),\n    [connect, disconnect, hasCachedProvider, provider, connected, address, chainID, web3Modal, uri],\n  );\n\n  useEffect(() => {\n    // logs non-functioning nodes && returns an array of working mainnet nodes\n    NodeHelper.checkAllNodesStatus().then((validNodes: any) => {\n      validNodes = validNodes.filter((url: boolean | string) => url !== false);\n      if (!validNodes.includes(uri) && NodeHelper.retryOnInvalid()) {\n        // force new provider...\n        setTimeout(() => {\n          window.location.reload();\n        }, 1);\n      }\n    });\n  }, []);\n\n  return <Web3Context.Provider value={{ onChainProvider }}>{children}</Web3Context.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}