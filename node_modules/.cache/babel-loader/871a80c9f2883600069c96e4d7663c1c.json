{"ast":null,"code":"import { StableBond, LPBond, NetworkID } from \"src/lib/Bond\";\nimport { ReactComponent as DaiImg } from \"@svgr/webpack?-svgo,+titleProp,+ref!src/assets/tokens/DAI.svg\";\nimport { ReactComponent as GuruDaiImg } from \"@svgr/webpack?-svgo,+titleProp,+ref!src/assets/tokens/OX-DAI.svg\";\nimport { abi as BondOhmDaiContract } from \"src/abi/bonds/OhmDaiContract.json\";\nimport { abi as DaiBondContract } from \"src/abi/bonds/DaiContract.json\";\nimport { abi as ReserveOhmDaiContract } from \"src/abi/reserves/OhmDai.json\";\n// TODO(zx): Further modularize by splitting up reserveAssets into vendor token definitions\n//   and include that in the definition of a bond\nexport const dai = new StableBond({\n  name: \"dai\",\n  displayName: \"DAI\",\n  bondToken: \"DAI\",\n  isAvailable: {\n    [NetworkID.Mumbai]: true,\n    [NetworkID.Polygon]: true\n  },\n  bondIconSvg: DaiImg,\n  bondContractABI: DaiBondContract,\n  networkAddrs: {\n    [NetworkID.Mumbai]: {\n      bondAddress: \"0x3c2b484057e7ba8832c2abc7774b30fba691c789\",\n      reserveAddress: \"0x52439209dc5f526375b8ab036ef9ea15bf0ce63b\"\n    },\n    [NetworkID.Polygon]: {\n      bondAddress: \"0xFDAACD04f8ad605e928F4A44864FF825dCd4796d\",\n      reserveAddress: \"0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063\"\n    }\n  }\n}); // export const frax = new StableBond({\n//   name: \"frax\",\n//   displayName: \"FRAX\",\n//   bondToken: \"FRAX\",\n//   isAvailable: { [NetworkID.Mainnet]: true, [NetworkID.Testnet]: true },\n//   bondIconSvg: FraxImg,\n//   bondContractABI: FraxBondContract,\n//   networkAddrs: {\n//     [NetworkID.Mainnet]: {\n//       bondAddress: \"0x8510c8c2B6891E04864fa196693D44E6B6ec2514\",\n//       reserveAddress: \"0x853d955acef822db058eb8505911ed77f175b99e\",\n//     },\n//     [NetworkID.Testnet]: {\n//       bondAddress: \"0xF651283543fB9D61A91f318b78385d187D300738\",\n//       reserveAddress: \"0x2F7249cb599139e560f0c81c269Ab9b04799E453\",\n//     },\n//   },\n// });\n// export const lusd = new StableBond({\n//   name: \"lusd\",\n//   displayName: \"LUSD\",\n//   bondToken: \"LUSD\",\n//   isAvailable: { [NetworkID.Mainnet]: false, [NetworkID.Testnet]: true },\n//   bondIconSvg: LusdImg,\n//   bondContractABI: LusdBondContract,\n//   networkAddrs: {\n//     [NetworkID.Mainnet]: {\n//       bondAddress: \"0x10C0f93f64e3C8D0a1b0f4B87d6155fd9e89D08D\",\n//       reserveAddress: \"0x5f98805A4E8be255a32880FDeC7F6728C6568bA0\",\n//     },\n//     [NetworkID.Testnet]: {\n//       bondAddress: \"0x3aD02C4E4D1234590E87A1f9a73B8E0fd8CF8CCa\",\n//       reserveAddress: \"0x45754dF05AA6305114004358eCf8D04FF3B84e26\",\n//     },\n//   },\n// });\n// export const eth = new CustomBond({\n//   name: \"eth\",\n//   displayName: \"wETH\",\n//   lpUrl: \"\",\n//   bondType: BondType.StableAsset,\n//   bondToken: \"wETH\",\n//   isAvailable: { [NetworkID.Mainnet]: true, [NetworkID.Testnet]: true },\n//   bondIconSvg: wETHImg,\n//   bondContractABI: EthBondContract,\n//   reserveContract: ierc20Abi, // The Standard ierc20Abi since they're normal tokens\n//   networkAddrs: {\n//     [NetworkID.Mainnet]: {\n//       bondAddress: \"0xE6295201CD1ff13CeD5f063a5421c39A1D236F1c\",\n//       reserveAddress: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n//     },\n//     [NetworkID.Testnet]: {\n//       bondAddress: \"0xca7b90f8158A4FAA606952c023596EE6d322bcf0\",\n//       reserveAddress: \"0xc778417e063141139fce010982780140aa0cd5ab\",\n//     },\n//   },\n//   customTreasuryBalanceFunc: async function (this: CustomBond, networkID, provider) {\n//     const ethBondContract = this.getContractForBond(networkID, provider);\n//     let ethPrice: BigNumberish = await ethBondContract.assetPrice();\n//     ethPrice = Number(ethPrice.toString()) / Math.pow(10, 8);\n//     const token = this.getContractForReserve(networkID, provider);\n//     let ethAmount: BigNumberish = await token.balanceOf(addresses[networkID].TREASURY_ADDRESS);\n//     ethAmount = Number(ethAmount.toString()) / Math.pow(10, 18);\n//     return ethAmount * ethPrice;\n//   },\n// });\n\nexport const guru_dai = new LPBond({\n  name: \"guru_dai_lp\",\n  displayName: \"OX-DAI LP\",\n  bondToken: \"DAI\",\n  isAvailable: {\n    [NetworkID.Mumbai]: true,\n    [NetworkID.Polygon]: true\n  },\n  bondIconSvg: GuruDaiImg,\n  bondContractABI: BondOhmDaiContract,\n  reserveContract: ReserveOhmDaiContract,\n  networkAddrs: {\n    [NetworkID.Mumbai]: {\n      bondAddress: \"0x695e445610c2dad7fb166acae7636a3b29936364\",\n      reserveAddress: \"0xf86868748f973322e38152f75275777a34d8e3fd\"\n    },\n    [NetworkID.Polygon]: {\n      bondAddress: \"0xbbA07bd5B20B63249398b831082ace6415afB7E0\",\n      reserveAddress: \"0x7c9B16d845FE163F464d265193cC2B4eE3faC326\"\n    }\n  },\n  lpUrl: \"https://app.sushi.com/add/0x383518188c0c6d7730d91b2c03a03c837814a899/0x6b175474e89094c44da98b954eedeac495271d0f\"\n}); // export const ohm_frax = new LPBond({\n//   name: \"ohm_frax_lp\",\n//   displayName: \"OX-FRAX LP\",\n//   bondToken: \"FRAX\",\n//   isAvailable: { [NetworkID.Mainnet]: true, [NetworkID.Testnet]: true },\n//   bondIconSvg: OhmFraxImg,\n//   bondContractABI: FraxOhmBondContract,\n//   reserveContract: ReserveOhmFraxContract,\n//   networkAddrs: {\n//     [NetworkID.Mainnet]: {\n//       bondAddress: \"0xc20CffF07076858a7e642E396180EC390E5A02f7\",\n//       reserveAddress: \"0x2dce0dda1c2f98e0f171de8333c3c6fe1bbf4877\",\n//     },\n//     [NetworkID.Testnet]: {\n//       bondAddress: \"0x7BB53Ef5088AEF2Bb073D9C01DCa3a1D484FD1d2\",\n//       reserveAddress: \"0x11BE404d7853BDE29A3e73237c952EcDCbBA031E\",\n//     },\n//   },\n//   lpUrl:\n//     \"https://app.uniswap.org/#/add/v2/0x853d955acef822db058eb8505911ed77f175b99e/0x383518188c0c6d7730d91b2c03a03c837814a899\",\n// });\n// export const ohm_lusd = new LPBond({\n//   name: \"ohm_lusd_lp\",\n//   displayName: \"OHM-LUSD LP\",\n//   bondToken: \"LUSD\",\n//   isAvailable: { [NetworkID.Mainnet]: false, [NetworkID.Testnet]: true },\n//   bondIconSvg: GuruLusdImg,\n//   bondContractABI: BondOhmLusdContract,\n//   reserveContract: ReserveOhmLusdContract,\n//   networkAddrs: {\n//     [NetworkID.Mainnet]: {\n//       bondAddress: \"0xFB1776299E7804DD8016303Df9c07a65c80F67b6\",\n//       reserveAddress: \"0xfDf12D1F85b5082877A6E070524f50F6c84FAa6b\",\n//     },\n//     [NetworkID.Testnet]: {\n//       // NOTE (appleseed-lusd): using ohm-dai rinkeby contracts\n//       bondAddress: \"0xcF449dA417cC36009a1C6FbA78918c31594B9377\",\n//       reserveAddress: \"0x8D5a22Fb6A1840da602E56D1a260E56770e0bCE2\",\n//     },\n//   },\n//   lpUrl:\n//     \"https://app.sushi.com/add/0x383518188C0C6d7730D91b2c03a03C837814a899/0x5f98805A4E8be255a32880FDeC7F6728C6568bA0\",\n// });\n// export const ohm_weth = new CustomBond({\n//   name: \"ohm_weth_lp\",\n//   displayName: \"Guru-WETH LP\",\n//   bondToken: \"WETH\",\n//   isAvailable: { [NetworkID.Mainnet]: true, [NetworkID.Testnet]: true },\n//   bondIconSvg: GuruEthImg,\n//   bondContractABI: BondOhmEthContract,\n//   reserveContract: ReserveOhmEthContract,\n//   networkAddrs: {\n//     [NetworkID.Mainnet]: {\n//       bondAddress: \"0xB6C9dc843dEc44Aa305217c2BbC58B44438B6E16\",\n//       reserveAddress: \"0xfffae4a0f4ac251f4705717cd24cadccc9f33e06\",\n//     },\n//     [NetworkID.Testnet]: {\n//       // NOTE (unbanksy): using ohm-dai rinkeby contracts\n//       bondAddress: \"0xcF449dA417cC36009a1C6FbA78918c31594B9377\",\n//       reserveAddress: \"0x8D5a22Fb6A1840da602E56D1a260E56770e0bCE2\",\n//     },\n//   },\n//   bondType: BondType.LP,\n//   lpUrl:\n//     \"https://app.sushi.com/add/0x383518188c0c6d7730d91b2c03a03c837814a899/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n//   customTreasuryBalanceFunc: async function (this: CustomBond, networkID, provider) {\n//     if (networkID === NetworkID.Mainnet) {\n//       const ethBondContract = this.getContractForBond(networkID, provider);\n//       let ethPrice: BigNumberish = await ethBondContract.assetPrice();\n//       ethPrice = Number(ethPrice.toString()) / Math.pow(10, 8);\n//       const token = this.getContractForReserve(networkID, provider);\n//       const tokenAddress = this.getAddressForReserve(networkID);\n//       const bondCalculator = getBondCalculator(networkID, provider);\n//       const tokenAmount = await token.balanceOf(addresses[networkID].TREASURY_ADDRESS);\n//       const valuation = await bondCalculator.valuation(tokenAddress, tokenAmount);\n//       const markdown = await bondCalculator.markdown(tokenAddress);\n//       let tokenUSD =\n//         (Number(valuation.toString()) / Math.pow(10, 9)) * (Number(markdown.toString()) / Math.pow(10, 18));\n//       return tokenUSD * Number(ethPrice.toString());\n//     } else {\n//       // NOTE (appleseed): using OHM-DAI on rinkeby\n//       const token = this.getContractForReserve(networkID, provider);\n//       const tokenAddress = this.getAddressForReserve(networkID);\n//       const bondCalculator = getBondCalculator(networkID, provider);\n//       const tokenAmount = await token.balanceOf(addresses[networkID].TREASURY_ADDRESS);\n//       const valuation = await bondCalculator.valuation(tokenAddress, tokenAmount);\n//       const markdown = await bondCalculator.markdown(tokenAddress);\n//       let tokenUSD =\n//         (Number(valuation.toString()) / Math.pow(10, 9)) * (Number(markdown.toString()) / Math.pow(10, 18));\n//       return tokenUSD;\n//     }\n//   },\n// });\n// HOW TO ADD A NEW BOND:\n// Is it a stableCoin bond? use `new StableBond`\n// Is it an LP Bond? use `new LPBond`\n// Add new bonds to this array!!\n\nexport const allBonds = [dai, guru_dai];\nexport const allBondsMap = allBonds.reduce((prevVal, bond) => {\n  return { ...prevVal,\n    [bond.name]: bond\n  };\n}, {}); // Debug Log\n// console.log(allBondsMap);\n\nexport default allBonds;","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/helpers/AllBonds.ts"],"names":["StableBond","LPBond","NetworkID","abi","BondOhmDaiContract","DaiBondContract","ReserveOhmDaiContract","dai","name","displayName","bondToken","isAvailable","Mumbai","Polygon","bondIconSvg","DaiImg","bondContractABI","networkAddrs","bondAddress","reserveAddress","guru_dai","GuruDaiImg","reserveContract","lpUrl","allBonds","allBondsMap","reduce","prevVal","bond"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,SAA7B,QAAoE,cAApE;;;AAaA,SAASC,GAAG,IAAIC,kBAAhB,QAA0C,mCAA1C;AAIA,SAASD,GAAG,IAAIE,eAAhB,QAAuC,gCAAvC;AAEA,SAASF,GAAG,IAAIG,qBAAhB,QAA6C,8BAA7C;AAYA;AACA;AACA,OAAO,MAAMC,GAAG,GAAG,IAAIP,UAAJ,CAAe;AAChCQ,EAAAA,IAAI,EAAE,KAD0B;AAEhCC,EAAAA,WAAW,EAAE,KAFmB;AAGhCC,EAAAA,SAAS,EAAE,KAHqB;AAIhCC,EAAAA,WAAW,EAAE;AAAE,KAACT,SAAS,CAACU,MAAX,GAAoB,IAAtB;AAA4B,KAACV,SAAS,CAACW,OAAX,GAAqB;AAAjD,GAJmB;AAKhCC,EAAAA,WAAW,EAAEC,MALmB;AAMhCC,EAAAA,eAAe,EAAEX,eANe;AAOhCY,EAAAA,YAAY,EAAE;AACZ,KAACf,SAAS,CAACU,MAAX,GAAoB;AAClBM,MAAAA,WAAW,EAAE,4CADK;AAElBC,MAAAA,cAAc,EAAE;AAFE,KADR;AAKZ,KAACjB,SAAS,CAACW,OAAX,GAAqB;AACnBK,MAAAA,WAAW,EAAE,4CADM;AAEnBC,MAAAA,cAAc,EAAE;AAFG;AALT;AAPkB,CAAf,CAAZ,C,CAmBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,IAAInB,MAAJ,CAAW;AACjCO,EAAAA,IAAI,EAAE,aAD2B;AAEjCC,EAAAA,WAAW,EAAE,WAFoB;AAGjCC,EAAAA,SAAS,EAAE,KAHsB;AAIjCC,EAAAA,WAAW,EAAE;AAAE,KAACT,SAAS,CAACU,MAAX,GAAoB,IAAtB;AAA4B,KAACV,SAAS,CAACW,OAAX,GAAqB;AAAjD,GAJoB;AAKjCC,EAAAA,WAAW,EAAEO,UALoB;AAMjCL,EAAAA,eAAe,EAAEZ,kBANgB;AAOjCkB,EAAAA,eAAe,EAAEhB,qBAPgB;AAQjCW,EAAAA,YAAY,EAAE;AACZ,KAACf,SAAS,CAACU,MAAX,GAAoB;AAClBM,MAAAA,WAAW,EAAE,4CADK;AAElBC,MAAAA,cAAc,EAAE;AAFE,KADR;AAKZ,KAACjB,SAAS,CAACW,OAAX,GAAqB;AACnBK,MAAAA,WAAW,EAAE,4CADM;AAEnBC,MAAAA,cAAc,EAAE;AAFG;AALT,GARmB;AAkBjCI,EAAAA,KAAK,EACH;AAnB+B,CAAX,CAAjB,C,CAsjB,GAAD,EAAMa,QAAN,CAAjB;AACP,OAAO,MAAMK,WAAW,GAAGD,QAAQ,CAACE,MAAT,CAAgB,CAACC,OAAD,EAAUC,IAAV,KAAmB;AAC5D,SAAO,EAAE,GAAGD,OAAL;AAAc,KAACC,IAAI,CAACpB,IAAN,GAAaoB;AAA3B,GAAP;AACD,CAF0B,EAExB,EAFwB,CAApB,C,CAIP;AACA;;AACA,eAAeJ,QAAf","sourcesContent":["import { StableBond, LPBond, NetworkID, CustomBond, BondType } from \"src/lib/Bond\";\nimport { addresses } from \"src/constants\";\n\nimport { ReactComponent as DaiImg } from \"src/assets/tokens/DAI.svg\";\nimport { ReactComponent as GuruDaiImg } from \"src/assets/tokens/OX-DAI.svg\";\nimport { ReactComponent as FraxImg } from \"src/assets/tokens/FRAX.svg\";\nimport { ReactComponent as GuruFraxImg } from \"src/assets/tokens/OX-FRAX.svg\";\nimport { ReactComponent as GuruLusdImg } from \"src/assets/tokens/OX-LUSD.svg\";\nimport { ReactComponent as GuruEthImg } from \"src/assets/tokens/OX-WETH.svg\";\nimport { ReactComponent as wETHImg } from \"src/assets/tokens/wETH.svg\";\nimport { ReactComponent as LusdImg } from \"src/assets/tokens/LUSD.svg\";\n\nimport { abi as FraxOhmBondContract } from \"src/abi/bonds/OhmFraxContract.json\";\nimport { abi as BondOhmDaiContract } from \"src/abi/bonds/OhmDaiContract.json\";\nimport { abi as BondOhmLusdContract } from \"src/abi/bonds/OhmLusdContract.json\";\nimport { abi as BondOhmEthContract } from \"src/abi/bonds/OhmEthContract.json\";\n\nimport { abi as DaiBondContract } from \"src/abi/bonds/DaiContract.json\";\nimport { abi as ReserveOhmLusdContract } from \"src/abi/reserves/OhmLusd.json\";\nimport { abi as ReserveOhmDaiContract } from \"src/abi/reserves/OhmDai.json\";\nimport { abi as ReserveOhmFraxContract } from \"src/abi/reserves/OhmFrax.json\";\nimport { abi as ReserveOhmEthContract } from \"src/abi/reserves/OhmEth.json\";\n\nimport { abi as FraxBondContract } from \"src/abi/bonds/FraxContract.json\";\nimport { abi as LusdBondContract } from \"src/abi/bonds/LusdContract.json\";\nimport { abi as EthBondContract } from \"src/abi/bonds/EthContract.json\";\n\nimport { abi as ierc20Abi } from \"src/abi/IERC20.json\";\nimport { getBondCalculator } from \"src/helpers/BondCalculator\";\nimport { BigNumberish } from \"ethers\";\n\n// TODO(zx): Further modularize by splitting up reserveAssets into vendor token definitions\n//   and include that in the definition of a bond\nexport const dai = new StableBond({\n  name: \"dai\",\n  displayName: \"DAI\",\n  bondToken: \"DAI\",\n  isAvailable: { [NetworkID.Mumbai]: true, [NetworkID.Polygon]: true },\n  bondIconSvg: DaiImg,\n  bondContractABI: DaiBondContract,\n  networkAddrs: {\n    [NetworkID.Mumbai]: {\n      bondAddress: \"0x3c2b484057e7ba8832c2abc7774b30fba691c789\",\n      reserveAddress: \"0x52439209dc5f526375b8ab036ef9ea15bf0ce63b\",\n    },\n    [NetworkID.Polygon]: {\n      bondAddress: \"0xFDAACD04f8ad605e928F4A44864FF825dCd4796d\",\n      reserveAddress: \"0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063\",\n    },\n  },\n});\n\n// export const frax = new StableBond({\n//   name: \"frax\",\n//   displayName: \"FRAX\",\n//   bondToken: \"FRAX\",\n//   isAvailable: { [NetworkID.Mainnet]: true, [NetworkID.Testnet]: true },\n//   bondIconSvg: FraxImg,\n//   bondContractABI: FraxBondContract,\n//   networkAddrs: {\n//     [NetworkID.Mainnet]: {\n//       bondAddress: \"0x8510c8c2B6891E04864fa196693D44E6B6ec2514\",\n//       reserveAddress: \"0x853d955acef822db058eb8505911ed77f175b99e\",\n//     },\n//     [NetworkID.Testnet]: {\n//       bondAddress: \"0xF651283543fB9D61A91f318b78385d187D300738\",\n//       reserveAddress: \"0x2F7249cb599139e560f0c81c269Ab9b04799E453\",\n//     },\n//   },\n// });\n\n// export const lusd = new StableBond({\n//   name: \"lusd\",\n//   displayName: \"LUSD\",\n//   bondToken: \"LUSD\",\n//   isAvailable: { [NetworkID.Mainnet]: false, [NetworkID.Testnet]: true },\n//   bondIconSvg: LusdImg,\n//   bondContractABI: LusdBondContract,\n//   networkAddrs: {\n//     [NetworkID.Mainnet]: {\n//       bondAddress: \"0x10C0f93f64e3C8D0a1b0f4B87d6155fd9e89D08D\",\n//       reserveAddress: \"0x5f98805A4E8be255a32880FDeC7F6728C6568bA0\",\n//     },\n//     [NetworkID.Testnet]: {\n//       bondAddress: \"0x3aD02C4E4D1234590E87A1f9a73B8E0fd8CF8CCa\",\n//       reserveAddress: \"0x45754dF05AA6305114004358eCf8D04FF3B84e26\",\n//     },\n//   },\n// });\n\n// export const eth = new CustomBond({\n//   name: \"eth\",\n//   displayName: \"wETH\",\n//   lpUrl: \"\",\n//   bondType: BondType.StableAsset,\n//   bondToken: \"wETH\",\n//   isAvailable: { [NetworkID.Mainnet]: true, [NetworkID.Testnet]: true },\n//   bondIconSvg: wETHImg,\n//   bondContractABI: EthBondContract,\n//   reserveContract: ierc20Abi, // The Standard ierc20Abi since they're normal tokens\n//   networkAddrs: {\n//     [NetworkID.Mainnet]: {\n//       bondAddress: \"0xE6295201CD1ff13CeD5f063a5421c39A1D236F1c\",\n//       reserveAddress: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n//     },\n//     [NetworkID.Testnet]: {\n//       bondAddress: \"0xca7b90f8158A4FAA606952c023596EE6d322bcf0\",\n//       reserveAddress: \"0xc778417e063141139fce010982780140aa0cd5ab\",\n//     },\n//   },\n//   customTreasuryBalanceFunc: async function (this: CustomBond, networkID, provider) {\n//     const ethBondContract = this.getContractForBond(networkID, provider);\n//     let ethPrice: BigNumberish = await ethBondContract.assetPrice();\n//     ethPrice = Number(ethPrice.toString()) / Math.pow(10, 8);\n//     const token = this.getContractForReserve(networkID, provider);\n//     let ethAmount: BigNumberish = await token.balanceOf(addresses[networkID].TREASURY_ADDRESS);\n//     ethAmount = Number(ethAmount.toString()) / Math.pow(10, 18);\n//     return ethAmount * ethPrice;\n//   },\n// });\n\nexport const guru_dai = new LPBond({\n  name: \"guru_dai_lp\",\n  displayName: \"OX-DAI LP\",\n  bondToken: \"DAI\",\n  isAvailable: { [NetworkID.Mumbai]: true, [NetworkID.Polygon]: true },\n  bondIconSvg: GuruDaiImg,\n  bondContractABI: BondOhmDaiContract,\n  reserveContract: ReserveOhmDaiContract,\n  networkAddrs: {\n    [NetworkID.Mumbai]: {\n      bondAddress: \"0x695e445610c2dad7fb166acae7636a3b29936364\",\n      reserveAddress: \"0xf86868748f973322e38152f75275777a34d8e3fd\",\n    },\n    [NetworkID.Polygon]: {\n      bondAddress: \"0xbbA07bd5B20B63249398b831082ace6415afB7E0\",\n      reserveAddress: \"0x7c9B16d845FE163F464d265193cC2B4eE3faC326\",\n    },\n  },\n  lpUrl:\n    \"https://app.sushi.com/add/0x383518188c0c6d7730d91b2c03a03c837814a899/0x6b175474e89094c44da98b954eedeac495271d0f\",\n});\n\n// export const ohm_frax = new LPBond({\n//   name: \"ohm_frax_lp\",\n//   displayName: \"OX-FRAX LP\",\n//   bondToken: \"FRAX\",\n//   isAvailable: { [NetworkID.Mainnet]: true, [NetworkID.Testnet]: true },\n//   bondIconSvg: OhmFraxImg,\n//   bondContractABI: FraxOhmBondContract,\n//   reserveContract: ReserveOhmFraxContract,\n//   networkAddrs: {\n//     [NetworkID.Mainnet]: {\n//       bondAddress: \"0xc20CffF07076858a7e642E396180EC390E5A02f7\",\n//       reserveAddress: \"0x2dce0dda1c2f98e0f171de8333c3c6fe1bbf4877\",\n//     },\n//     [NetworkID.Testnet]: {\n//       bondAddress: \"0x7BB53Ef5088AEF2Bb073D9C01DCa3a1D484FD1d2\",\n//       reserveAddress: \"0x11BE404d7853BDE29A3e73237c952EcDCbBA031E\",\n//     },\n//   },\n//   lpUrl:\n//     \"https://app.uniswap.org/#/add/v2/0x853d955acef822db058eb8505911ed77f175b99e/0x383518188c0c6d7730d91b2c03a03c837814a899\",\n// });\n\n// export const ohm_lusd = new LPBond({\n//   name: \"ohm_lusd_lp\",\n//   displayName: \"OHM-LUSD LP\",\n//   bondToken: \"LUSD\",\n//   isAvailable: { [NetworkID.Mainnet]: false, [NetworkID.Testnet]: true },\n//   bondIconSvg: GuruLusdImg,\n//   bondContractABI: BondOhmLusdContract,\n//   reserveContract: ReserveOhmLusdContract,\n//   networkAddrs: {\n//     [NetworkID.Mainnet]: {\n//       bondAddress: \"0xFB1776299E7804DD8016303Df9c07a65c80F67b6\",\n//       reserveAddress: \"0xfDf12D1F85b5082877A6E070524f50F6c84FAa6b\",\n//     },\n//     [NetworkID.Testnet]: {\n//       // NOTE (appleseed-lusd): using ohm-dai rinkeby contracts\n//       bondAddress: \"0xcF449dA417cC36009a1C6FbA78918c31594B9377\",\n//       reserveAddress: \"0x8D5a22Fb6A1840da602E56D1a260E56770e0bCE2\",\n//     },\n//   },\n//   lpUrl:\n//     \"https://app.sushi.com/add/0x383518188C0C6d7730D91b2c03a03C837814a899/0x5f98805A4E8be255a32880FDeC7F6728C6568bA0\",\n// });\n\n// export const ohm_weth = new CustomBond({\n//   name: \"ohm_weth_lp\",\n//   displayName: \"Guru-WETH LP\",\n//   bondToken: \"WETH\",\n//   isAvailable: { [NetworkID.Mainnet]: true, [NetworkID.Testnet]: true },\n//   bondIconSvg: GuruEthImg,\n//   bondContractABI: BondOhmEthContract,\n//   reserveContract: ReserveOhmEthContract,\n//   networkAddrs: {\n//     [NetworkID.Mainnet]: {\n//       bondAddress: \"0xB6C9dc843dEc44Aa305217c2BbC58B44438B6E16\",\n//       reserveAddress: \"0xfffae4a0f4ac251f4705717cd24cadccc9f33e06\",\n//     },\n//     [NetworkID.Testnet]: {\n//       // NOTE (unbanksy): using ohm-dai rinkeby contracts\n//       bondAddress: \"0xcF449dA417cC36009a1C6FbA78918c31594B9377\",\n//       reserveAddress: \"0x8D5a22Fb6A1840da602E56D1a260E56770e0bCE2\",\n//     },\n//   },\n//   bondType: BondType.LP,\n//   lpUrl:\n//     \"https://app.sushi.com/add/0x383518188c0c6d7730d91b2c03a03c837814a899/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n//   customTreasuryBalanceFunc: async function (this: CustomBond, networkID, provider) {\n//     if (networkID === NetworkID.Mainnet) {\n//       const ethBondContract = this.getContractForBond(networkID, provider);\n//       let ethPrice: BigNumberish = await ethBondContract.assetPrice();\n//       ethPrice = Number(ethPrice.toString()) / Math.pow(10, 8);\n//       const token = this.getContractForReserve(networkID, provider);\n//       const tokenAddress = this.getAddressForReserve(networkID);\n//       const bondCalculator = getBondCalculator(networkID, provider);\n//       const tokenAmount = await token.balanceOf(addresses[networkID].TREASURY_ADDRESS);\n//       const valuation = await bondCalculator.valuation(tokenAddress, tokenAmount);\n//       const markdown = await bondCalculator.markdown(tokenAddress);\n//       let tokenUSD =\n//         (Number(valuation.toString()) / Math.pow(10, 9)) * (Number(markdown.toString()) / Math.pow(10, 18));\n//       return tokenUSD * Number(ethPrice.toString());\n//     } else {\n//       // NOTE (appleseed): using OHM-DAI on rinkeby\n//       const token = this.getContractForReserve(networkID, provider);\n//       const tokenAddress = this.getAddressForReserve(networkID);\n//       const bondCalculator = getBondCalculator(networkID, provider);\n//       const tokenAmount = await token.balanceOf(addresses[networkID].TREASURY_ADDRESS);\n//       const valuation = await bondCalculator.valuation(tokenAddress, tokenAmount);\n//       const markdown = await bondCalculator.markdown(tokenAddress);\n//       let tokenUSD =\n//         (Number(valuation.toString()) / Math.pow(10, 9)) * (Number(markdown.toString()) / Math.pow(10, 18));\n//       return tokenUSD;\n//     }\n//   },\n// });\n\n// HOW TO ADD A NEW BOND:\n// Is it a stableCoin bond? use `new StableBond`\n// Is it an LP Bond? use `new LPBond`\n// Add new bonds to this array!!\nexport const allBonds = [dai, guru_dai];\nexport const allBondsMap = allBonds.reduce((prevVal, bond) => {\n  return { ...prevVal, [bond.name]: bond };\n}, {});\n\n// Debug Log\n// console.log(allBondsMap);\nexport default allBonds;\n"]},"metadata":{},"sourceType":"module"}