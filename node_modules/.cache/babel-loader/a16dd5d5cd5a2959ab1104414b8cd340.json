{"ast":null,"code":"var _jsxFileName = \"C:\\\\arete\\\\AlphaDAO-react\\\\src\\\\views\\\\Bond\\\\BondRedeem.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button, Typography, Box, Slide } from \"@material-ui/core\";\nimport { redeemBond } from \"../../slices/BondSlice\";\nimport { useWeb3Context } from \"src/hooks/web3Context\";\nimport { trim, secondsUntilBlock, prettifySeconds, prettyVestingPeriod } from \"../../helpers\";\nimport { isPendingTxn, txnButtonText } from \"src/slices/PendingTxnsSlice\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { DisplayBondDiscount } from \"./Bond\";\nimport ConnectButton from \"../../components/ConnectButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction BondRedeem({\n  bond\n}) {\n  _s();\n\n  // const { bond: bondName } = bond;\n  const dispatch = useDispatch();\n  const {\n    provider,\n    address,\n    chainID\n  } = useWeb3Context();\n  const isBondLoading = useSelector(state => {\n    var _state$bonding$loadin;\n\n    return (_state$bonding$loadin = state.bonding.loading) !== null && _state$bonding$loadin !== void 0 ? _state$bonding$loadin : true;\n  });\n  const currentBlock = useSelector(state => {\n    return state.app.currentBlock;\n  });\n  const pendingTransactions = useSelector(state => {\n    return state.pendingTransactions;\n  });\n  const bondingState = useSelector(state => {\n    return state.bonding && state.bonding[bond.name];\n  });\n  const bondDetails = useSelector(state => {\n    return state.account.bonds && state.account.bonds[bond.name];\n  });\n\n  async function onRedeem({\n    autostake\n  }) {\n    await dispatch(redeemBond({\n      address,\n      bond,\n      networkID: chainID,\n      provider,\n      autostake\n    }));\n  }\n\n  const vestingTime = () => {\n    return prettyVestingPeriod(currentBlock, bond.bondMaturationBlock);\n  };\n\n  const vestingPeriod = () => {\n    const vestingBlock = parseInt(currentBlock) + parseInt(bondingState.vestingTerm);\n    const seconds = secondsUntilBlock(currentBlock, vestingBlock);\n    return prettifySeconds(seconds, \"day\");\n  };\n\n  useEffect(() => {\n    console.log(bond);\n    console.log(bondingState);\n    console.log(bondDetails);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"space-around\",\n      flexWrap: \"wrap\",\n      children: !address ? /*#__PURE__*/_jsxDEV(ConnectButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          id: \"bond-claim-btn\",\n          className: \"transaction-button\",\n          fullWidth: true,\n          disabled: isPendingTxn(pendingTransactions, \"redeem_bond_\" + bond.name) || bond.pendingPayout == 0.0,\n          onClick: () => {\n            onRedeem({\n              autostake: false\n            });\n          },\n          children: txnButtonText(pendingTransactions, \"redeem_bond_\" + bond.name, \"Claim\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          id: \"bond-claim-autostake-btn\",\n          className: \"transaction-button\",\n          fullWidth: true,\n          disabled: isPendingTxn(pendingTransactions, \"redeem_bond_\" + bond.name + \"_autostake\") || bond.pendingPayout == 0.0,\n          onClick: () => {\n            onRedeem({\n              autostake: true\n            });\n          },\n          children: txnButtonText(pendingTransactions, \"redeem_bond_\" + bond.name + \"_autostake\", \"Claim and Autostake\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slide, {\n      direction: \"right\",\n      in: true,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      timeout: 533,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: \"bond-data\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-row\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Pending Rewards\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: \"price-data\",\n            children: isBondLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n              width: \"100px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 32\n            }, this) : `${trim(bond.interestDue, 4)} OX`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-row\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Claimable Rewards\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: \"price-data\",\n            children: isBondLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n              width: \"100px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 32\n            }, this) : `${trim(bond.pendingPayout, 4)} OX`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-row\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Time until fully vested\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: \"price-data\",\n            children: isBondLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n              width: \"100px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 65\n            }, this) : vestingTime()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-row\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"ROI\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: isBondLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n              width: \"100px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 32\n            }, this) : /*#__PURE__*/_jsxDEV(DisplayBondDiscount, {\n              bond: bond\n            }, bond.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 61\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-row\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Debt Ratio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: isBondLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n              width: \"100px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 32\n            }, this) : `${trim(bond.debtRatio / 10000000, 2)}%`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-row\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Vesting Term\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: isBondLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n              width: \"100px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 42\n            }, this) : vestingPeriod()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BondRedeem, \"Umg7YCm+IXrkbXswUYDDGt3SNZY=\", false, function () {\n  return [useDispatch, useWeb3Context, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = BondRedeem;\nexport default BondRedeem;\n\nvar _c;\n\n$RefreshReg$(_c, \"BondRedeem\");","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/views/Bond/BondRedeem.jsx"],"names":["useEffect","useSelector","useDispatch","Button","Typography","Box","Slide","redeemBond","useWeb3Context","trim","secondsUntilBlock","prettifySeconds","prettyVestingPeriod","isPendingTxn","txnButtonText","Skeleton","DisplayBondDiscount","ConnectButton","BondRedeem","bond","dispatch","provider","address","chainID","isBondLoading","state","bonding","loading","currentBlock","app","pendingTransactions","bondingState","name","bondDetails","account","bonds","onRedeem","autostake","networkID","vestingTime","bondMaturationBlock","vestingPeriod","vestingBlock","parseInt","vestingTerm","seconds","console","log","pendingPayout","timeout","interestDue","debtRatio"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button, Typography, Box, Slide } from \"@material-ui/core\";\nimport { redeemBond } from \"../../slices/BondSlice\";\nimport { useWeb3Context } from \"src/hooks/web3Context\";\nimport { trim, secondsUntilBlock, prettifySeconds, prettyVestingPeriod } from \"../../helpers\";\nimport { isPendingTxn, txnButtonText } from \"src/slices/PendingTxnsSlice\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { DisplayBondDiscount } from \"./Bond\";\nimport ConnectButton from \"../../components/ConnectButton\";\n\nfunction BondRedeem({ bond }) {\n  // const { bond: bondName } = bond;\n  const dispatch = useDispatch();\n  const { provider, address, chainID } = useWeb3Context();\n\n  const isBondLoading = useSelector(state => state.bonding.loading ?? true);\n\n  const currentBlock = useSelector(state => {\n    return state.app.currentBlock;\n  });\n  const pendingTransactions = useSelector(state => {\n    return state.pendingTransactions;\n  });\n  const bondingState = useSelector(state => {\n    return state.bonding && state.bonding[bond.name];\n  });\n  const bondDetails = useSelector(state => {\n    return state.account.bonds && state.account.bonds[bond.name];\n  });\n\n  async function onRedeem({ autostake }) {\n    await dispatch(redeemBond({ address, bond, networkID: chainID, provider, autostake }));\n  }\n\n  const vestingTime = () => {\n    return prettyVestingPeriod(currentBlock, bond.bondMaturationBlock);\n  };\n\n  const vestingPeriod = () => {\n    const vestingBlock = parseInt(currentBlock) + parseInt(bondingState.vestingTerm);\n    const seconds = secondsUntilBlock(currentBlock, vestingBlock);\n    return prettifySeconds(seconds, \"day\");\n  };\n\n  useEffect(() => {\n    console.log(bond);\n    console.log(bondingState);\n    console.log(bondDetails);\n  }, []);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <Box display=\"flex\" justifyContent=\"space-around\" flexWrap=\"wrap\">\n        {!address ? (\n          <ConnectButton />\n        ) : (\n          <>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              id=\"bond-claim-btn\"\n              className=\"transaction-button\"\n              fullWidth\n              disabled={isPendingTxn(pendingTransactions, \"redeem_bond_\" + bond.name) || bond.pendingPayout == 0.0}\n              onClick={() => {\n                onRedeem({ autostake: false });\n              }}\n            >\n              {txnButtonText(pendingTransactions, \"redeem_bond_\" + bond.name, \"Claim\")}\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              id=\"bond-claim-autostake-btn\"\n              className=\"transaction-button\"\n              fullWidth\n              disabled={\n                isPendingTxn(pendingTransactions, \"redeem_bond_\" + bond.name + \"_autostake\") ||\n                bond.pendingPayout == 0.0\n              }\n              onClick={() => {\n                onRedeem({ autostake: true });\n              }}\n            >\n              {txnButtonText(pendingTransactions, \"redeem_bond_\" + bond.name + \"_autostake\", \"Claim and Autostake\")}\n            </Button>\n          </>\n        )}\n      </Box>\n      <Slide direction=\"right\" in={true} mountOnEnter unmountOnExit {...{ timeout: 533 }}>\n        <Box className=\"bond-data\">\n          <div className=\"data-row\">\n            <Typography>Pending Rewards</Typography>\n            <Typography className=\"price-data\">\n              {isBondLoading ? <Skeleton width=\"100px\" /> : `${trim(bond.interestDue, 4)} OX`}\n            </Typography>\n          </div>\n          <div className=\"data-row\">\n            <Typography>Claimable Rewards</Typography>\n            <Typography className=\"price-data\">\n              {isBondLoading ? <Skeleton width=\"100px\" /> : `${trim(bond.pendingPayout, 4)} OX`}\n            </Typography>\n          </div>\n          <div className=\"data-row\">\n            <Typography>Time until fully vested</Typography>\n            <Typography className=\"price-data\">{isBondLoading ? <Skeleton width=\"100px\" /> : vestingTime()}</Typography>\n          </div>\n\n          <div className=\"data-row\">\n            <Typography>ROI</Typography>\n            <Typography>\n              {isBondLoading ? <Skeleton width=\"100px\" /> : <DisplayBondDiscount key={bond.name} bond={bond} />}\n            </Typography>\n          </div>\n\n          <div className=\"data-row\">\n            <Typography>Debt Ratio</Typography>\n            <Typography>\n              {isBondLoading ? <Skeleton width=\"100px\" /> : `${trim(bond.debtRatio / 10000000, 2)}%`}\n            </Typography>\n          </div>\n\n          <div className=\"data-row\">\n            <Typography>Vesting Term</Typography>\n            <Typography>{isBondLoading ? <Skeleton width=\"100px\" /> : vestingPeriod()}</Typography>\n          </div>\n        </Box>\n      </Slide>\n    </Box>\n  );\n}\n\nexport default BondRedeem;\n"]},"metadata":{},"sourceType":"module"}