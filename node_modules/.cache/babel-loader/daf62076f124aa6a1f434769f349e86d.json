{"ast":null,"code":"var _jsxFileName = \"C:\\\\arete\\\\AlphaDAO-react\\\\src\\\\views\\\\ChooseBond\\\\ChooseBond.jsx\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { Box, Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, Zoom } from \"@material-ui/core\";\nimport { BondDataCard, BondTableData } from \"./BondRow\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { formatCurrency } from \"../../helpers\";\nimport useBonds from \"../../hooks/Bonds\";\nimport \"./choosebond.scss\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport ClaimBonds from \"./ClaimBonds\";\nimport _ from \"lodash\";\nimport { allBondsMap } from \"src/helpers/AllBonds\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChooseBond() {\n  _s();\n\n  const {\n    bonds,\n    realBonds\n  } = useBonds();\n  const isSmallScreen = useMediaQuery(\"(max-width: 733px)\"); // change to breakpoint query\n\n  const isVerySmallScreen = useMediaQuery(\"(max-width: 420px)\");\n  const isAppLoading = useSelector(state => state.app.loading);\n  const isAccountLoading = useSelector(state => state.account.loading);\n  const accountBonds = useSelector(state => {\n    const withInterestDue = [];\n\n    for (const bond in state.account.bonds) {\n      if (state.account.bonds[bond].interestDue > 0) {\n        withInterestDue.push(state.account.bonds[bond]);\n      }\n    }\n\n    return withInterestDue;\n  });\n  const marketPrice = useSelector(state => {\n    return state.app.marketPrice;\n  });\n  const treasuryBalance = useSelector(state => {\n    if (state.bonding.loading == false) {\n      let tokenBalances = 0;\n\n      for (const bond in allBondsMap) {\n        if (state.bonding[bond]) {\n          tokenBalances += state.bonding[bond].purchased;\n        }\n      }\n\n      return tokenBalances;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"choose-bond-view\",\n    children: [!isAccountLoading && !_.isEmpty(accountBonds) && /*#__PURE__*/_jsxDEV(ClaimBonds, {\n      activeBonds: accountBonds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 57\n    }, this), /*#__PURE__*/_jsxDEV(Zoom, {\n      in: true,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        className: \"ohm-card\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          className: \"card-header\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            children: \"Bond\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          xs: 12,\n          style: {\n            margin: \"10px 0px 20px\"\n          },\n          className: \"bond-hero\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              textAlign: `${isVerySmallScreen ? \"left\" : \"center\"}`,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                color: \"textSecondary\",\n                children: \"Treasury Balance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h4\",\n                children: isAppLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n                  width: \"180px\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 21\n                }, this) : new Intl.NumberFormat(\"en-US\", {\n                  style: \"currency\",\n                  currency: \"USD\",\n                  maximumFractionDigits: 0,\n                  minimumFractionDigits: 0\n                }).format(treasuryBalance)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            className: `guru-price`,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              textAlign: `${isVerySmallScreen ? \"right\" : \"center\"}`,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                color: \"textSecondary\",\n                children: \"OX Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h4\",\n                children: isAppLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n                  width: \"100px\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 35\n                }, this) : formatCurrency(marketPrice, 2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), !isSmallScreen && /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              \"aria-label\": \"Available bonds\",\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"center\",\n                    children: \"Bond\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 109,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"left\",\n                    children: \"Price\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 110,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"left\",\n                    children: \"ROI\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 111,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: \"Purchased\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 112,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 113,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                children: bonds.map(bond => /*#__PURE__*/_jsxDEV(BondTableData, {\n                  bond: bond\n                }, bond.name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            children: \"Bond with real world assets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              \"aria-label\": \"Bond with real world assets\",\n              children: /*#__PURE__*/_jsxDEV(TableBody, {\n                children: realBonds && realBonds.map(rb => /*#__PURE__*/_jsxDEV(BondTableData, {\n                  bond: rb\n                }, rb.name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 64\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), isSmallScreen && /*#__PURE__*/_jsxDEV(Box, {\n      className: \"guru-card-container\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        spacing: 2,\n        children: bonds.map(bond => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(BondDataCard, {\n            bond: bond\n          }, bond.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }, this)\n        }, bond.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChooseBond, \"7I/h4/L1G1I9KaAMnx8qEegQvc8=\", false, function () {\n  return [useBonds, useMediaQuery, useMediaQuery, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ChooseBond;\nexport default ChooseBond;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChooseBond\");","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/views/ChooseBond/ChooseBond.jsx"],"names":["useSelector","Box","Grid","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","Zoom","BondDataCard","BondTableData","useMediaQuery","formatCurrency","useBonds","Skeleton","ClaimBonds","_","allBondsMap","ChooseBond","bonds","realBonds","isSmallScreen","isVerySmallScreen","isAppLoading","state","app","loading","isAccountLoading","account","accountBonds","withInterestDue","bond","interestDue","push","marketPrice","treasuryBalance","bonding","tokenBalances","purchased","isEmpty","margin","Intl","NumberFormat","style","currency","maximumFractionDigits","minimumFractionDigits","format","map","name","rb"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\";\nimport {\n  Box,\n  Grid,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  Zoom,\n} from \"@material-ui/core\";\nimport { BondDataCard, BondTableData } from \"./BondRow\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { formatCurrency } from \"../../helpers\";\nimport useBonds from \"../../hooks/Bonds\";\n\nimport \"./choosebond.scss\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport ClaimBonds from \"./ClaimBonds\";\nimport _ from \"lodash\";\nimport { allBondsMap } from \"src/helpers/AllBonds\";\n\nfunction ChooseBond() {\n  const { bonds, realBonds } = useBonds();\n  const isSmallScreen = useMediaQuery(\"(max-width: 733px)\"); // change to breakpoint query\n  const isVerySmallScreen = useMediaQuery(\"(max-width: 420px)\");\n\n  const isAppLoading = useSelector(state => state.app.loading);\n  const isAccountLoading = useSelector(state => state.account.loading);\n\n  const accountBonds = useSelector(state => {\n    const withInterestDue = [];\n    for (const bond in state.account.bonds) {\n      if (state.account.bonds[bond].interestDue > 0) {\n        withInterestDue.push(state.account.bonds[bond]);\n      }\n    }\n    return withInterestDue;\n  });\n\n  const marketPrice = useSelector(state => {\n    return state.app.marketPrice;\n  });\n\n  const treasuryBalance = useSelector(state => {\n    if (state.bonding.loading == false) {\n      let tokenBalances = 0;\n      for (const bond in allBondsMap) {\n        if (state.bonding[bond]) {\n          tokenBalances += state.bonding[bond].purchased;\n        }\n      }\n      return tokenBalances;\n    }\n  });\n\n  return (\n    <div id=\"choose-bond-view\">\n      {!isAccountLoading && !_.isEmpty(accountBonds) && <ClaimBonds activeBonds={accountBonds} />}\n\n      <Zoom in={true}>\n        <Paper className=\"ohm-card\">\n          <Box className=\"card-header\">\n            <Typography variant=\"h5\">Bond</Typography>\n          </Box>\n\n          <Grid container item xs={12} style={{ margin: \"10px 0px 20px\" }} className=\"bond-hero\">\n            <Grid item xs={6}>\n              <Box textAlign={`${isVerySmallScreen ? \"left\" : \"center\"}`}>\n                <Typography variant=\"h6\" color=\"textSecondary\">\n                  Treasury Balance\n                </Typography>\n                <Typography variant=\"h4\">\n                  {isAppLoading ? (\n                    <Skeleton width=\"180px\" />\n                  ) : (\n                    new Intl.NumberFormat(\"en-US\", {\n                      style: \"currency\",\n                      currency: \"USD\",\n                      maximumFractionDigits: 0,\n                      minimumFractionDigits: 0,\n                    }).format(treasuryBalance)\n                  )}\n                </Typography>\n              </Box>\n            </Grid>\n\n            <Grid item xs={6} className={`guru-price`}>\n              <Box textAlign={`${isVerySmallScreen ? \"right\" : \"center\"}`}>\n                <Typography variant=\"h6\" color=\"textSecondary\">\n                  OX Price\n                </Typography>\n                <Typography variant=\"h4\">\n                  {isAppLoading ? <Skeleton width=\"100px\" /> : formatCurrency(marketPrice, 2)}\n                </Typography>\n              </Box>\n            </Grid>\n          </Grid>\n\n          {!isSmallScreen && (\n            <Grid container item>\n              <TableContainer>\n                <Table aria-label=\"Available bonds\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell align=\"center\">Bond</TableCell>\n                      <TableCell align=\"left\">Price</TableCell>\n                      <TableCell align=\"left\">ROI</TableCell>\n                      <TableCell align=\"right\">Purchased</TableCell>\n                      <TableCell align=\"right\"></TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {bonds.map(bond => (\n                      <BondTableData key={bond.name} bond={bond} />\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <Typography variant=\"h5\">Bond with real world assets</Typography>\n              <TableContainer>\n                <Table aria-label=\"Bond with real world assets\">\n                  <TableBody>{realBonds && realBonds.map(rb => <BondTableData key={rb.name} bond={rb} />)}</TableBody>\n                </Table>\n              </TableContainer>\n            </Grid>\n          )}\n        </Paper>\n      </Zoom>\n\n      {isSmallScreen && (\n        <Box className=\"guru-card-container\">\n          <Grid container item spacing={2}>\n            {bonds.map(bond => (\n              <Grid item xs={12} key={bond.name}>\n                <BondDataCard key={bond.name} bond={bond} />\n              </Grid>\n            ))}\n          </Grid>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nexport default ChooseBond;\n"]},"metadata":{},"sourceType":"module"}