{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [];\nconst pendingTxnsSlice = createSlice({\n  name: \"pendingTransactions\",\n  initialState,\n  reducers: {\n    fetchPendingTxns(state, action) {\n      state.push(action.payload);\n    },\n\n    clearPendingTxn(state, action) {\n      const target = state.find(x => x.txnHash === action.payload);\n\n      if (target) {\n        state.splice(state.indexOf(target), 1);\n      }\n    }\n\n  }\n});\nexport const getStakingTypeText = action => {\n  return action.toLowerCase() === \"stake\" ? \"Staking OHM\" : \"Unstaking sOHM\";\n};\nexport const getWrappingTypeText = action => {\n  return action.toLowerCase() === \"wrap\" ? \"Wrapping OHM\" : \"Unwrapping sOHM\";\n};\nexport const isPendingTxn = (pendingTransactions, type) => {\n  return pendingTransactions.map(x => x.type).includes(type);\n};\nexport const txnButtonText = (pendingTransactions, type, defaultText) => {\n  return isPendingTxn(pendingTransactions, type) ? \"Pending...\" : defaultText;\n};\nexport const txnButtonTextGeneralPending = (pendingTransactions, type, defaultText) => {\n  return pendingTransactions.length >= 1 ? \"Pending...\" : defaultText;\n};\nexport const {\n  fetchPendingTxns,\n  clearPendingTxn\n} = pendingTxnsSlice.actions;\nexport default pendingTxnsSlice.reducer;","map":{"version":3,"sources":["C:/arete/AlphaDAO-react/src/slices/PendingTxnsSlice.ts"],"names":["createSlice","initialState","pendingTxnsSlice","name","reducers","fetchPendingTxns","state","action","push","payload","clearPendingTxn","target","find","x","txnHash","splice","indexOf","getStakingTypeText","toLowerCase","getWrappingTypeText","isPendingTxn","pendingTransactions","type","map","includes","txnButtonText","defaultText","txnButtonTextGeneralPending","length","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAQA,MAAMC,YAAgC,GAAG,EAAzC;AAEA,MAAMC,gBAAgB,GAAGF,WAAW,CAAC;AACnCG,EAAAA,IAAI,EAAE,qBAD6B;AAEnCF,EAAAA,YAFmC;AAGnCG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,gBAAgB,CAACC,KAAD,EAAQC,MAAR,EAA4C;AAC1DD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,KAHO;;AAIRC,IAAAA,eAAe,CAACJ,KAAD,EAAQC,MAAR,EAAuC;AACpD,YAAMI,MAAM,GAAGL,KAAK,CAACM,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcP,MAAM,CAACE,OAArC,CAAf;;AACA,UAAIE,MAAJ,EAAY;AACVL,QAAAA,KAAK,CAACS,MAAN,CAAaT,KAAK,CAACU,OAAN,CAAcL,MAAd,CAAb,EAAoC,CAApC;AACD;AACF;;AATO;AAHyB,CAAD,CAApC;AAgBA,OAAO,MAAMM,kBAAkB,GAAIV,MAAD,IAAoB;AACpD,SAAOA,MAAM,CAACW,WAAP,OAAyB,OAAzB,GAAmC,aAAnC,GAAmD,gBAA1D;AACD,CAFM;AAIP,OAAO,MAAMC,mBAAmB,GAAIZ,MAAD,IAAoB;AACrD,SAAOA,MAAM,CAACW,WAAP,OAAyB,MAAzB,GAAkC,cAAlC,GAAmD,iBAA1D;AACD,CAFM;AAIP,OAAO,MAAME,YAAY,GAAG,CAACC,mBAAD,EAAqCC,IAArC,KAAsD;AAChF,SAAOD,mBAAmB,CAACE,GAApB,CAAwBV,CAAC,IAAIA,CAAC,CAACS,IAA/B,EAAqCE,QAArC,CAA8CF,IAA9C,CAAP;AACD,CAFM;AAIP,OAAO,MAAMG,aAAa,GAAG,CAACJ,mBAAD,EAAqCC,IAArC,EAAmDI,WAAnD,KAA2E;AACtG,SAAON,YAAY,CAACC,mBAAD,EAAsBC,IAAtB,CAAZ,GAA0C,YAA1C,GAAyDI,WAAhE;AACD,CAFM;AAIP,OAAO,MAAMC,2BAA2B,GAAG,CAACN,mBAAD,EAAqCC,IAArC,EAAmDI,WAAnD,KAA2E;AACpH,SAAOL,mBAAmB,CAACO,MAApB,IAA8B,CAA9B,GAAkC,YAAlC,GAAiDF,WAAxD;AACD,CAFM;AAIP,OAAO,MAAM;AAAErB,EAAAA,gBAAF;AAAoBK,EAAAA;AAApB,IAAwCR,gBAAgB,CAAC2B,OAA/D;AAEP,eAAe3B,gBAAgB,CAAC4B,OAAhC","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface IPendingTxn {\n  readonly txnHash: string;\n  readonly text: string;\n  readonly type: string;\n}\n\nconst initialState: Array<IPendingTxn> = [];\n\nconst pendingTxnsSlice = createSlice({\n  name: \"pendingTransactions\",\n  initialState,\n  reducers: {\n    fetchPendingTxns(state, action: PayloadAction<IPendingTxn>) {\n      state.push(action.payload);\n    },\n    clearPendingTxn(state, action: PayloadAction<string>) {\n      const target = state.find(x => x.txnHash === action.payload);\n      if (target) {\n        state.splice(state.indexOf(target), 1);\n      }\n    },\n  },\n});\n\nexport const getStakingTypeText = (action: string) => {\n  return action.toLowerCase() === \"stake\" ? \"Staking OHM\" : \"Unstaking sOHM\";\n};\n\nexport const getWrappingTypeText = (action: string) => {\n  return action.toLowerCase() === \"wrap\" ? \"Wrapping OHM\" : \"Unwrapping sOHM\";\n};\n\nexport const isPendingTxn = (pendingTransactions: IPendingTxn[], type: string) => {\n  return pendingTransactions.map(x => x.type).includes(type);\n};\n\nexport const txnButtonText = (pendingTransactions: IPendingTxn[], type: string, defaultText: string) => {\n  return isPendingTxn(pendingTransactions, type) ? \"Pending...\" : defaultText;\n};\n\nexport const txnButtonTextGeneralPending = (pendingTransactions: IPendingTxn[], type: string, defaultText: string) => {\n  return pendingTransactions.length >= 1 ? \"Pending...\" : defaultText;\n};\n\nexport const { fetchPendingTxns, clearPendingTxn } = pendingTxnsSlice.actions;\n\nexport default pendingTxnsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}