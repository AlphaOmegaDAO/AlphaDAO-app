[{"C:\\alphaomega\\AlphaDAO-react\\src\\index.jsx":"1","C:\\alphaomega\\AlphaDAO-react\\src\\Root.jsx":"2","C:\\alphaomega\\AlphaDAO-react\\src\\store.ts":"3","C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\web3Context.tsx":"4","C:\\alphaomega\\AlphaDAO-react\\src\\App.jsx":"5","C:\\alphaomega\\AlphaDAO-react\\src\\themes\\dark.js":"6","C:\\alphaomega\\AlphaDAO-react\\src\\themes\\light.js":"7","C:\\alphaomega\\AlphaDAO-react\\src\\themes\\girth.js":"8","C:\\alphaomega\\AlphaDAO-react\\src\\components\\Sidebar\\NavDrawer.jsx":"9","C:\\alphaomega\\AlphaDAO-react\\src\\components\\Sidebar\\Sidebar.jsx":"10","C:\\alphaomega\\AlphaDAO-react\\src\\components\\TopBar\\TopBar.jsx":"11","C:\\alphaomega\\AlphaDAO-react\\src\\slices\\PendingTxnsSlice.ts":"12","C:\\alphaomega\\AlphaDAO-react\\src\\slices\\AccountSlice.ts":"13","C:\\alphaomega\\AlphaDAO-react\\src\\slices\\BondSlice.ts":"14","C:\\alphaomega\\AlphaDAO-react\\src\\slices\\AppSlice.ts":"15","C:\\alphaomega\\AlphaDAO-react\\src\\slices\\LusdSlice.ts":"16","C:\\alphaomega\\AlphaDAO-react\\src\\slices\\PoolThunk.ts":"17","C:\\alphaomega\\AlphaDAO-react\\src\\slices\\MessagesSlice.ts":"18","C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\useSegmentAnalytics.js":"19","C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\userAnalyticHelpers.js":"20","C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\Environment.ts":"21","C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\NodeHelper.ts":"22","C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\Bonds.ts":"23","C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\useTheme.ts":"24","C:\\alphaomega\\AlphaDAO-react\\src\\themes\\global.js":"25","C:\\alphaomega\\AlphaDAO-react\\src\\components\\TopBar\\ThemeSwitch.jsx":"26","C:\\alphaomega\\AlphaDAO-react\\src\\components\\TopBar\\ConnectMenu.jsx":"27","C:\\alphaomega\\AlphaDAO-react\\src\\components\\Sidebar\\NavContent.jsx":"28","C:\\alphaomega\\AlphaDAO-react\\src\\themes\\fonts.js":"29","C:\\alphaomega\\AlphaDAO-react\\src\\components\\Loading\\LoadingSplash.jsx":"30","C:\\alphaomega\\AlphaDAO-react\\src\\components\\Messages\\Messages.jsx":"31","C:\\alphaomega\\AlphaDAO-react\\src\\views\\404\\NotFound.jsx":"32","C:\\alphaomega\\AlphaDAO-react\\src\\constants.ts":"33","C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\BondCalculator.ts":"34","C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\AllBonds.ts":"35","C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\33Together.ts":"36","C:\\alphaomega\\AlphaDAO-react\\src\\views\\index.js":"37","C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\QueryParameterHelper.ts":"38","C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\index.tsx":"39","C:\\alphaomega\\AlphaDAO-react\\src\\components\\Messages\\ConsoleInterceptor.js":"40","C:\\alphaomega\\AlphaDAO-react\\src\\components\\Sidebar\\externalUrls.js":"41","C:\\alphaomega\\AlphaDAO-react\\src\\views\\Claim\\Claim.jsx":"42","C:\\alphaomega\\AlphaDAO-react\\src\\views\\33Together\\33Together.jsx":"43","C:\\alphaomega\\AlphaDAO-react\\src\\components\\Sidebar\\Social.jsx":"44","C:\\alphaomega\\AlphaDAO-react\\src\\lib\\Bond.ts":"45","C:\\alphaomega\\AlphaDAO-react\\src\\views\\33Together\\poolData.js":"46","C:\\alphaomega\\AlphaDAO-react\\src\\views\\TreasuryDashboard\\TreasuryDashboard.jsx":"47","C:\\alphaomega\\AlphaDAO-react\\src\\views\\Dashboard\\Dashboard.jsx":"48","C:\\alphaomega\\AlphaDAO-react\\src\\views\\Bond\\Bond.jsx":"49","C:\\alphaomega\\AlphaDAO-react\\src\\views\\Wrap\\Wrap.jsx":"50","C:\\alphaomega\\AlphaDAO-react\\src\\views\\ChooseBond\\ChooseBond.jsx":"51","C:\\alphaomega\\AlphaDAO-react\\src\\views\\Stake\\Stake.jsx":"52","C:\\alphaomega\\AlphaDAO-react\\src\\views\\TreasuryDashboard\\treasuryData.js":"53","C:\\alphaomega\\AlphaDAO-react\\src\\components\\InfoTooltip\\InfoTooltip.jsx":"54","C:\\alphaomega\\AlphaDAO-react\\src\\views\\EarlyClaim\\EarlyClaim.jsx":"55","C:\\alphaomega\\AlphaDAO-react\\src\\lib\\apolloClient.js":"56","C:\\alphaomega\\AlphaDAO-react\\src\\slices\\StakeThunk.ts":"57","C:\\alphaomega\\AlphaDAO-react\\src\\views\\Stake\\ExternalStakePool.jsx":"58","C:\\alphaomega\\AlphaDAO-react\\src\\components\\ConnectButton.jsx":"59","C:\\alphaomega\\AlphaDAO-react\\src\\components\\TabPanel.jsx":"60","C:\\alphaomega\\AlphaDAO-react\\src\\components\\RebaseTimer\\RebaseTimer.jsx":"61","C:\\alphaomega\\AlphaDAO-react\\src\\views\\ChooseBond\\ClaimBonds.jsx":"62","C:\\alphaomega\\AlphaDAO-react\\src\\views\\ChooseBond\\BondRow.jsx":"63","C:\\alphaomega\\AlphaDAO-react\\src\\components\\BondLogo.jsx":"64","C:\\alphaomega\\AlphaDAO-react\\src\\views\\ChooseBond\\ClaimRow.jsx":"65","C:\\alphaomega\\AlphaDAO-react\\src\\components\\CardHeader\\CardHeader.jsx":"66","C:\\alphaomega\\AlphaDAO-react\\src\\components\\Chart\\Chart.jsx":"67","C:\\alphaomega\\AlphaDAO-react\\src\\slices\\WrapThunk.ts":"68","C:\\alphaomega\\AlphaDAO-react\\src\\views\\Bond\\BondPurchase.jsx":"69","C:\\alphaomega\\AlphaDAO-react\\src\\views\\Bond\\BondRedeem.jsx":"70","C:\\alphaomega\\AlphaDAO-react\\src\\views\\Bond\\BondHeader.jsx":"71","C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\index.ts":"72","C:\\alphaomega\\AlphaDAO-react\\src\\components\\Chart\\ExpandedChart.jsx":"73","C:\\alphaomega\\AlphaDAO-react\\src\\components\\Chart\\CustomTooltip.jsx":"74","C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\Debounce.ts":"75","C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\useEscape.ts":"76","C:\\alphaomega\\AlphaDAO-react\\src\\views\\Bond\\AdvancedSettings.jsx":"77","C:\\alphaomega\\AlphaDAO-react\\src\\views\\33Together\\PoolPrize.jsx":"78","C:\\alphaomega\\AlphaDAO-react\\src\\views\\33Together\\PoolInfo.jsx":"79","C:\\alphaomega\\AlphaDAO-react\\src\\views\\33Together\\PoolDeposit.jsx":"80","C:\\alphaomega\\AlphaDAO-react\\src\\views\\33Together\\PoolWithdraw.jsx":"81","C:\\alphaomega\\AlphaDAO-react\\src\\components\\InfoTooltip\\InfoTooltipMulti.jsx":"82","C:\\alphaomega\\AlphaDAO-react\\src\\components\\TopBar\\OxMenu.jsx":"83"},{"size":426,"mtime":1641335743120,"results":"84","hashOfConfig":"85"},{"size":606,"mtime":1641335743073,"results":"86","hashOfConfig":"85"},{"size":1185,"mtime":1641335743198,"results":"87","hashOfConfig":"85"},{"size":7438,"mtime":1641407045568,"results":"88","hashOfConfig":"85"},{"size":8843,"mtime":1641335743011,"results":"89","hashOfConfig":"85"},{"size":11381,"mtime":1641404417191,"results":"90","hashOfConfig":"85"},{"size":9008,"mtime":1641404417188,"results":"91","hashOfConfig":"85"},{"size":5417,"mtime":1641404417191,"results":"92","hashOfConfig":"85"},{"size":874,"mtime":1641335747934,"results":"93","hashOfConfig":"85"},{"size":328,"mtime":1641335747965,"results":"94","hashOfConfig":"85"},{"size":1727,"mtime":1641406161453,"results":"95","hashOfConfig":"85"},{"size":1572,"mtime":1641404375724,"results":"96","hashOfConfig":"85"},{"size":11538,"mtime":1641443112441,"results":"97","hashOfConfig":"85"},{"size":12176,"mtime":1641404375724,"results":"98","hashOfConfig":"85"},{"size":7301,"mtime":1641443112440,"results":"99","hashOfConfig":"85"},{"size":1875,"mtime":1641406161451,"results":"100","hashOfConfig":"85"},{"size":13025,"mtime":1641433859520,"results":"101","hashOfConfig":"85"},{"size":1796,"mtime":1641335748856,"results":"102","hashOfConfig":"85"},{"size":3400,"mtime":1641335748559,"results":"103","hashOfConfig":"85"},{"size":1158,"mtime":1641335748434,"results":"104","hashOfConfig":"85"},{"size":3116,"mtime":1641357972475,"results":"105","hashOfConfig":"85"},{"size":8357,"mtime":1641341195891,"results":"106","hashOfConfig":"85"},{"size":4012,"mtime":1641335748465,"results":"107","hashOfConfig":"85"},{"size":962,"mtime":1641335748590,"results":"108","hashOfConfig":"85"},{"size":5733,"mtime":1641404417191,"results":"109","hashOfConfig":"85"},{"size":693,"mtime":1641335748122,"results":"110","hashOfConfig":"85"},{"size":5264,"mtime":1641404417199,"results":"111","hashOfConfig":"85"},{"size":8639,"mtime":1641335747918,"results":"112","hashOfConfig":"85"},{"size":1564,"mtime":1641335749044,"results":"113","hashOfConfig":"85"},{"size":650,"mtime":1641335747762,"results":"114","hashOfConfig":"85"},{"size":2541,"mtime":1641335747840,"results":"115","hashOfConfig":"85"},{"size":204,"mtime":1641335750512,"results":"116","hashOfConfig":"85"},{"size":3743,"mtime":1641426942014,"results":"117","hashOfConfig":"85"},{"size":553,"mtime":1641335748278,"results":"118","hashOfConfig":"85"},{"size":3976,"mtime":1641443112440,"results":"119","hashOfConfig":"85"},{"size":3361,"mtime":1641406161452,"results":"120","hashOfConfig":"85"},{"size":482,"mtime":1641335750309,"results":"121","hashOfConfig":"85"},{"size":322,"mtime":1641335748387,"results":"122","hashOfConfig":"85"},{"size":6767,"mtime":1641443079846,"results":"123","hashOfConfig":"85"},{"size":692,"mtime":1641335747809,"results":"124","hashOfConfig":"85"},{"size":511,"mtime":1641335748012,"results":"125","hashOfConfig":"85"},{"size":1185,"mtime":1641335750872,"results":"126","hashOfConfig":"85"},{"size":7149,"mtime":1641433859520,"results":"127","hashOfConfig":"85"},{"size":1017,"mtime":1641335747981,"results":"128","hashOfConfig":"85"},{"size":7198,"mtime":1641414525556,"results":"129","hashOfConfig":"85"},{"size":1952,"mtime":1641335750481,"results":"130","hashOfConfig":"85"},{"size":14010,"mtime":1641406161440,"results":"131","hashOfConfig":"85"},{"size":5832,"mtime":1641404417181,"results":"132","hashOfConfig":"85"},{"size":7337,"mtime":1641404417184,"results":"133","hashOfConfig":"85"},{"size":12682,"mtime":1641433859518,"results":"134","hashOfConfig":"85"},{"size":4941,"mtime":1641425813251,"results":"135","hashOfConfig":"85"},{"size":16753,"mtime":1641433859519,"results":"136","hashOfConfig":"85"},{"size":4789,"mtime":1641437724504,"results":"137","hashOfConfig":"85"},{"size":1125,"mtime":1641404417202,"results":"138","hashOfConfig":"85"},{"size":6761,"mtime":1641443079847,"results":"139","hashOfConfig":"85"},{"size":797,"mtime":1641335748700,"results":"140","hashOfConfig":"85"},{"size":8597,"mtime":1641444095538,"results":"141","hashOfConfig":"85"},{"size":7204,"mtime":1641425004895,"results":"142","hashOfConfig":"85"},{"size":578,"mtime":1641335747450,"results":"143","hashOfConfig":"85"},{"size":601,"mtime":1641335747481,"results":"144","hashOfConfig":"85"},{"size":2914,"mtime":1641335747856,"results":"145","hashOfConfig":"85"},{"size":4701,"mtime":1641404417182,"results":"146","hashOfConfig":"85"},{"size":6453,"mtime":1641404417184,"results":"147","hashOfConfig":"85"},{"size":628,"mtime":1641335747418,"results":"148","hashOfConfig":"85"},{"size":5364,"mtime":1641335750809,"results":"149","hashOfConfig":"85"},{"size":294,"mtime":1641335747497,"results":"150","hashOfConfig":"85"},{"size":14013,"mtime":1641404417204,"results":"151","hashOfConfig":"85"},{"size":5550,"mtime":1641433859520,"results":"152","hashOfConfig":"85"},{"size":9347,"mtime":1641404417181,"results":"153","hashOfConfig":"85"},{"size":4948,"mtime":1641335750669,"results":"154","hashOfConfig":"85"},{"size":2225,"mtime":1641335750606,"results":"155","hashOfConfig":"85"},{"size":436,"mtime":1641335748512,"results":"156","hashOfConfig":"85"},{"size":2664,"mtime":1641404417206,"results":"157","hashOfConfig":"85"},{"size":3406,"mtime":1641404417205,"results":"158","hashOfConfig":"85"},{"size":383,"mtime":1641335748497,"results":"159","hashOfConfig":"85"},{"size":384,"mtime":1641335748543,"results":"160","hashOfConfig":"85"},{"size":2179,"mtime":1641404417184,"results":"161","hashOfConfig":"85"},{"size":7385,"mtime":1641404417185,"results":"162","hashOfConfig":"85"},{"size":6099,"mtime":1641433859520,"results":"163","hashOfConfig":"85"},{"size":7217,"mtime":1641433859519,"results":"164","hashOfConfig":"85"},{"size":7587,"mtime":1641433859520,"results":"165","hashOfConfig":"85"},{"size":1428,"mtime":1641404417203,"results":"166","hashOfConfig":"85"},{"size":7936,"mtime":1641443112443,"results":"167","hashOfConfig":"85"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},"4so2t1",{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":8,"source":"177","usedDeprecatedRules":"170"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"200","usedDeprecatedRules":"170"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":"213","usedDeprecatedRules":"170"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"238","usedDeprecatedRules":"170"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"243","usedDeprecatedRules":"170"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":9,"source":"252","usedDeprecatedRules":"170"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"273","usedDeprecatedRules":"170"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"312","usedDeprecatedRules":"170"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},"C:\\alphaomega\\AlphaDAO-react\\src\\index.jsx",[],[],"C:\\alphaomega\\AlphaDAO-react\\src\\Root.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\store.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\web3Context.tsx",["343","344","345","346","347","348","349","350"],"import React, { useState, ReactElement, useContext, useEffect, useMemo, useCallback } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport { StaticJsonRpcProvider, JsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { IFrameEthereumProvider } from \"@ledgerhq/iframe-provider\";\nimport { EnvHelper } from \"../helpers/Environment\";\nimport { NodeHelper } from \"src/helpers/NodeHelper\";\n\n/**\n * kept as function to mimic `getMainnetURI()`\n * @returns string\n */\n \nfunction getMumbaiTestnetURI() {\n  return EnvHelper.mumbaiTestnetURI;\n}\n\nfunction getPolygonURI() {\n  return EnvHelper.polygonURI;\n}\n\n\nfunction getBSCTestnetURI() {\n  return EnvHelper.bscTestnetURI;\n}\n\n\n/**\n * determine if in IFrame for Ledger Live\n */\n \nfunction isIframe() {\n  return window.location !== window.parent.location;\n}\n\nconst ALL_URIs = NodeHelper.getNodesUris();\n\n/**\n * \"intelligently\" loadbalances production API Keys\n * @returns string\n */\n \nfunction getMainnetURI(): string {\n  // Shuffles the URIs for \"intelligent\" loadbalancing\n  const allURIs = ALL_URIs.sort(() => Math.random() - 0.5);\n\n  // There is no lightweight way to test each URL. so just return a random one.\n  // if (workingURI !== undefined || workingURI !== \"\") return workingURI as string;\n  const randomIndex = Math.floor(Math.random() * allURIs.length);\n  return allURIs[randomIndex];\n}\n\n/*\n  Types\n*/\n\ntype onChainProvider = {\n  connect: () => void;\n  disconnect: () => void;\n  provider: JsonRpcProvider;\n  address: string;\n  connected: Boolean;\n  web3Modal: Web3Modal;\n};\n\nexport type Web3ContextData = {\n  onChainProvider: onChainProvider;\n} | null;\n\nconst Web3Context = React.createContext<Web3ContextData>(null);\n\nexport const useWeb3Context = () => {\n  const web3Context = useContext(Web3Context);\n  if (!web3Context) {\n    throw new Error(\n      \"useWeb3Context() can only be used inside of <Web3ContextProvider />, \" + \"please declare it at a higher level.\",\n    );\n  }\n  const { onChainProvider } = web3Context;\n  return useMemo(() => {\n    return { ...onChainProvider };\n  }, [web3Context]);\n};\n\nexport const useAddress = () => {\n  const { address } = useWeb3Context();\n  return address;\n};\n\nexport const Web3ContextProvider: React.FC<{ children: ReactElement }> = ({ children }) => {\n  const [connected, setConnected] = useState(false);\n  // NOTE (appleseed): if you are testing you need to set chainId === 80001 as the default for non-connected wallet testing...\n  // ... you also need to set getMumbaiTestnetURI() as the default uri state below\n  const [chainID, setChainID] = useState(97);\n  const [address, setAddress] = useState(\"\");\n\n  const [uri, setUri] = useState(getBSCTestnetURI());\n\n  const [provider, setProvider] = useState<JsonRpcProvider>(new StaticJsonRpcProvider(uri));\n\n  const [web3Modal, setWeb3Modal] = useState<Web3Modal>(\n    new Web3Modal({\n      theme: {\n        background: \"#182328\",\n        main: \"#FFFFFF\",\n        secondary: \"rgba(255, 255, 255, 0.2)\",\n        border: \"#182328\",\n        hover: \"rgb(16, 26, 32)\",\n      },\n      cacheProvider: true, // optional\n      providerOptions: {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            rpc: {\n              80001: getMumbaiTestnetURI(),\n              //137: getPolygonURI(),\n\t\t\t  97: getBSCTestnetURI(),\n\t\t\t  \n\t\t\t  \n            },\n          },\n        },\n      },\n    }),\n  );\n\n  const hasCachedProvider = (): Boolean => {\n    if (!web3Modal) return false;\n    if (!web3Modal.cachedProvider) return false;\n    return true;\n  };\n\n  // NOTE (appleseed): none of these listeners are needed for Backend API Providers\n  // ... so I changed these listeners so that they only apply to walletProviders, eliminating\n  // ... polling to the backend providers for network changes\n  \n  const _initListeners = useCallback(\n    rawProvider => {\n      if (!rawProvider.on) {\n        return;\n      }\n      rawProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n        setTimeout(() => window.location.reload(), 1);\n      });\n\n      rawProvider.on(\"chainChanged\", async (chain: number) => {\n        _checkNetwork(chain);\n        setTimeout(() => window.location.reload(), 1);\n      });\n\n      rawProvider.on(\"network\", (_newNetwork: any, oldNetwork: any) => {\n        if (!oldNetwork) return;\n        window.location.reload();\n      });\n    },\n    [provider],\n  );\n\n  /**\n   * throws an error if networkID is not 137 (mainnet) or 80001 (testnet)\n   */\n   \n  const _checkNetwork = (otherChainID: number): Boolean => {\n    if (chainID !== 97 && otherChainID !== 80001) {\n      return false;\n    }\n    if (chainID !== otherChainID) {\n      console.warn(\"You are switching networks\");\n      if (otherChainID === 97 || otherChainID === 80001) {\n        setChainID(otherChainID);\n        if (otherChainID === 97) setUri(getBSCTestnetURI);\n        else if (otherChainID === 80001) setUri(getMumbaiTestnetURI);\n        // else setUri(getBSCTestnetURI());\n        return true;\n      }\n      return false;\n    }\n    return true;\n  };\n\n  // connect - only runs for WalletProviders\n  const connect = useCallback(async () => {\n    // handling Ledger Live;\n    let rawProvider;\n    if (isIframe()) {\n      rawProvider = new IFrameEthereumProvider();\n    } else {\n      rawProvider = await web3Modal.connect();\n    }\n\n    // new _initListeners implementation matches Web3Modal Docs\n    // ... see here: https://github.com/Web3Modal/web3modal/blob/2ff929d0e99df5edf6bb9e88cff338ba6d8a3991/example/src/App.tsx#L185\n    _initListeners(rawProvider);\n    const connectedProvider = new Web3Provider(rawProvider, \"any\");\n    const chainId = await connectedProvider.getNetwork().then(network => network.chainId);\n    const connectedAddress = await connectedProvider.getSigner().getAddress();\n    const validNetwork = _checkNetwork(chainId);\n    if (!validNetwork) {\n      console.error(\"Wrong network, please switch to BSC\");\n      return;\n    }\n    // Save everything after we've validated the right network.\n    // Eventually we'll be fine without doing network validations.\n    setAddress(connectedAddress);\n    setProvider(connectedProvider);\n\n    // Keep this at the bottom of the method, to ensure any repaints have the data we need\n    setConnected(true);\n\n    return connectedProvider;\n  }, [provider, web3Modal, connected]);\n\n  const disconnect = useCallback(async () => {\n    console.log(\"disconnecting\");\n    web3Modal.clearCachedProvider();\n    setConnected(false);\n\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  }, [provider, web3Modal, connected]);\n\n  const onChainProvider = useMemo(\n    () => ({ connect, disconnect, hasCachedProvider, provider, connected, address, chainID, web3Modal, uri }),\n    [connect, disconnect, hasCachedProvider, provider, connected, address, chainID, web3Modal, uri],\n  );\n\n  useEffect(() => {\n    // logs non-functioning nodes && returns an array of working mainnet nodes\n    NodeHelper.checkAllNodesStatus().then((validNodes: any) => {\n      validNodes = validNodes.filter((url: boolean | string) => url !== false);\n      if (!validNodes.includes(uri) && NodeHelper.retryOnInvalid()) {\n        // force new provider...\n        setTimeout(() => {\n          window.location.reload();\n        }, 1);\n      }\n    });\n  }, []);\n\n  return <Web3Context.Provider value={{ onChainProvider }}>{children}</Web3Context.Provider>;\n};\n","C:\\alphaomega\\AlphaDAO-react\\src\\App.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\themes\\dark.js",[],"C:\\alphaomega\\AlphaDAO-react\\src\\themes\\light.js",[],"C:\\alphaomega\\AlphaDAO-react\\src\\themes\\girth.js",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\Sidebar\\NavDrawer.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\Sidebar\\Sidebar.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\TopBar\\TopBar.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\slices\\PendingTxnsSlice.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\slices\\AccountSlice.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\slices\\BondSlice.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\slices\\AppSlice.ts",["351","352","353","354","355"],"import { ethers } from \"ethers\";\nimport { addresses } from \"../constants\";\nimport { abi as OlympusStakingv2ABI } from \"../abi/OlympusStakingv2.json\";\nimport { abi as sOXv2 } from \"../abi/sOxv2.json\";\nimport { abi as AlphaABI } from \"../abi/Alpha.json\";\nimport { setAll, getTokenPrice, getMarketPrice } from \"../helpers\";\nimport allBonds from \"../helpers/AllBonds\";\nimport { createSlice, createSelector, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { RootState } from \"src/store\";\nimport { IBaseAsyncThunk } from \"./interfaces\";\nimport { OlympusStakingv2, SOxv2 } from \"../typechain\";\n\nconst initialState = {\n  loading: false,\n  loadingMarketPrice: false,\n};\n\nexport const loadAppDetails = createAsyncThunk(\n  \"app/loadAppDetails\",\n  async ({ networkID, provider }: IBaseAsyncThunk, { dispatch }) => {\n    // NOTE (appleseed): marketPrice from Graph was delayed, so get CoinGecko price\n    // const marketPrice = parseFloat(graphData.data.protocolMetrics[0].ohmPrice);\n    let marketPrice;\n    try {\n      const originalPromiseResult = await dispatch(\n        loadMarketPrice({ networkID: networkID, provider: provider }),\n      ).unwrap();\n      marketPrice = originalPromiseResult?.marketPrice;\n    } catch (rejectedValueOrSerializedError) {\n      // handle error here\n      console.error(\"Returned a null response from dispatch(loadMarketPrice)\");\n      return;\n    }\n\n    const currentBlock = await provider.getBlockNumber();\n\n    const stakingContract = new ethers.Contract(\n      addresses[networkID].STAKING_ADDRESS as string,\n      OlympusStakingv2ABI,\n      provider,\n    ) as OlympusStakingv2;\n\n    const soxMainContract = new ethers.Contract(\n      addresses[networkID].SOX_ADDRESS as string,\n      sOXv2,\n      provider,\n    ) as SOxv2;\n\n    const alphaMainContract = new ethers.Contract(addresses[networkID].OX_ADDRESS as string, AlphaABI, provider);\n\n    // Calculating staking\n    const epoch = await stakingContract.epoch();\n    console.log(`epoch`, epoch);\n    const stakingReward = epoch.distribute;\n    const ts = await soxMainContract.totalSupply();\n    console.log(`ts`, ts);\n    const totalSupply = (await alphaMainContract.totalSupply()) / Math.pow(10, 9);\n    const marketCap = totalSupply * marketPrice;\n    const circ = await soxMainContract.circulatingSupply();\n    const circAny = circ as any;\n    const circSupply = circAny / Math.pow(10, 9);\n    const stakingTVL = circSupply * marketPrice;\n    console.log(`circ`, circ);\n    const stakingRebase = Number(stakingReward.toString()) / Number(circ.toString());\n    console.log(\"stakingRebase\", stakingRebase);\n    const fiveDayRate = Math.pow(1 + stakingRebase, 5 * 3) - 1;\n    const stakingAPY = Math.pow(1 + stakingRebase, 365 * 3) - 1;\n    console.log(`stakingAPY ${stakingAPY}`);\n\n    const tokenAmountsPromises = allBonds.map(bond => bond.getTreasuryBalance(networkID, provider));\n    const tokenAmounts = await Promise.all(tokenAmountsPromises);\n    console.log(\"tokenAmounts\", tokenAmounts);\n    const treasuryMarketValue = tokenAmounts.reduce((curr, prev) => {\n      return curr + prev;\n    }, 0);\n\n    // Current index\n    const currentIndex = await stakingContract.index();\nconsole.log(currentIndex, stakingAPY, \"**** Line79test *****\" )\n    return {\n      currentIndex: ethers.utils.formatUnits(currentIndex, \"gwei\"),\n      currentBlock,\n      fiveDayRate,\n      stakingAPY,\n      stakingTVL,\n      stakingRebase,\n      marketCap,\n      marketPrice,\n      circSupply,\n      totalSupply,\n      treasuryMarketValue,\n    } as IAppData;\n  },\n);\n\n/**\n * checks if app.slice has marketPrice already\n * if yes then simply load that state\n * if no then fetches via `loadMarketPrice`\n *\n * `usage`:\n * ```\n * const originalPromiseResult = await dispatch(\n *    findOrLoadMarketPrice({ networkID: networkID, provider: provider }),\n *  ).unwrap();\n * originalPromiseResult?.whateverValue;\n * ```\n */\nexport const findOrLoadMarketPrice = createAsyncThunk(\n  \"app/findOrLoadMarketPrice\",\n  async ({ networkID, provider }: IBaseAsyncThunk, { dispatch, getState }) => {\n    const state: any = getState();\n    let marketPrice;\n    // check if we already have loaded market price\n    if (state.app.loadingMarketPrice === false && state.app.marketPrice) {\n      // go get marketPrice from app.state\n      marketPrice = state.app.marketPrice;\n    } else {\n      // we don't have marketPrice in app.state, so go get it\n      try {\n        const originalPromiseResult = await dispatch(\n          loadMarketPrice({ networkID: networkID, provider: provider }),\n        ).unwrap();\n        marketPrice = originalPromiseResult?.marketPrice;\n      } catch (rejectedValueOrSerializedError) {\n        // handle error here\n        console.error(\"Returned a null response from dispatch(loadMarketPrice)\");\n        return;\n      }\n    }\n    return { marketPrice };\n  },\n);\n\n/**\n * - fetches the OX price from CoinGecko (via getTokenPrice)\n * - falls back to fetch marketPrice from ox-busd contract\n * - updates the App.slice when it runs\n */\nconst loadMarketPrice = createAsyncThunk(\"app/loadMarketPrice\", async ({ networkID, provider }: IBaseAsyncThunk) => {\n  let marketPrice: number;\n  try {\n  \n    console.log(\"******144*****\");\n    marketPrice = await getMarketPrice({ networkID, provider });\n    console.log(\"******146*****\");\n    marketPrice = marketPrice / Math.pow(10, 9);\n    console.log(marketPrice , \"******148*****\");\n  } catch (e) {\n    console.log(`e`);\n    console.log(\"******151*****\");\n    console.log(e);\n    marketPrice = await getTokenPrice(\"alpha\");\n    console.log(marketPrice,\"******154*****\");\n  }\n  return { marketPrice };\n});\n\ninterface IAppData {\n  readonly circSupply: number;\n  readonly currentIndex?: string;\n  readonly currentBlock?: number;\n  readonly fiveDayRate?: number;\n  readonly marketCap: number;\n  readonly marketPrice: number;\n  readonly stakingAPY?: number;\n  readonly stakingRebase?: number;\n  readonly stakingTVL: number;\n  readonly totalSupply: number;\n  readonly treasuryBalance?: number;\n  readonly treasuryMarketValue?: number;\n}\n\nconst appSlice = createSlice({\n  name: \"app\",\n  initialState,\n  reducers: {\n    fetchAppSuccess(state, action) {\n      setAll(state, action.payload);\n    },\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(loadAppDetails.pending, state => {\n        state.loading = true;\n      })\n      .addCase(loadAppDetails.fulfilled, (state, action) => {\n        setAll(state, action.payload);\n        state.loading = false;\n      })\n      .addCase(loadAppDetails.rejected, (state, { error }) => {\n        state.loading = false;\n        console.error(error.name, error.message, error.stack);\n      })\n      .addCase(loadMarketPrice.pending, (state, action) => {\n        state.loadingMarketPrice = true;\n      })\n      .addCase(loadMarketPrice.fulfilled, (state, action) => {\n        setAll(state, action.payload);\n        state.loadingMarketPrice = false;\n      })\n      .addCase(loadMarketPrice.rejected, (state, { error }) => {\n        state.loadingMarketPrice = false;\n        console.error(error.name, error.message, error.stack);\n      });\n  },\n});\n\nconst baseInfo = (state: RootState) => state.app;\n\nexport default appSlice.reducer;\n\nexport const { fetchAppSuccess } = appSlice.actions;\n\nexport const getAppState = createSelector(baseInfo, app => app);\n","C:\\alphaomega\\AlphaDAO-react\\src\\slices\\LusdSlice.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\slices\\PoolThunk.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\slices\\MessagesSlice.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\useSegmentAnalytics.js",[],"C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\userAnalyticHelpers.js",[],"C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\Environment.ts",["356","357","358","359","360","361","362"],"/**\n * Access `process.env` in an environment helper\n * Usage: `EnvHelper.env`\n * - Other static methods can be added as needed per\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\n */\nexport class EnvHelper {\n\n  /**\n   * @returns `process.env`\n   */\n   \n  static env = process.env;\n  static mumbaiTestnetURI = ``;\n  static polygonURI = ``;\n  static bscTestnetURI = ``;\n  static whitespaceRegex = /\\s+/;\n\n  /**\n   * Returns env contingent segment api key\n   * @returns segment\n   */\n   \n  static getSegmentKey() {\n    return EnvHelper.env.REACT_APP_SEGMENT_API_KEY;\n  }\n\n  static isNotEmpty(envVariable: string) {\n    if (envVariable.length > 10) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n\n /**\n   * NOTE(appleseed): Moralis IDs are only used as Fallbacks & are not Mandatory\n   * @returns {Array} Array of Moralis API Ids\n   */\n   \n  static getMoralisIdList() {\n    let MORALIS_ID_LIST: string[];\n\n    // split the provided API keys on whitespace\n    if (EnvHelper.env.REACT_APP_MORALIS_IDS && EnvHelper.isNotEmpty(EnvHelper.env.REACT_APP_MORALIS_IDS)) {\n      MORALIS_ID_LIST = EnvHelper.env.REACT_APP_MORALIS_IDS.split(new RegExp(EnvHelper.whitespaceRegex));\n    } else {\n      MORALIS_ID_LIST = [];\n    }\n\n    // now add the uri path\n    if (MORALIS_ID_LIST.length > 0) {\n      MORALIS_ID_LIST = MORALIS_ID_LIST.map(moralisID => ``);\n    } else {\n      MORALIS_ID_LIST = [];\n    }\n    return MORALIS_ID_LIST;\n  }\n\n  /**\n   * @returns {Array} Array of node url addresses or empty set\n   * node url addresses can be whitespace-separated string of \"https\" addresses\n   * - functionality for Websocket addresses has been deprecated due to issues with WalletConnect\n   *     - WalletConnect Issue: https://github.com/WalletConnect/walletconnect-monorepo/issues/193\n   */\n   \n  static getSelfHostedNode() {\n    let URI_LIST: string[];\n    if (EnvHelper.env.REACT_APP_SELF_HOSTED_NODE && EnvHelper.isNotEmpty(EnvHelper.env.REACT_APP_SELF_HOSTED_NODE)) {\n      URI_LIST = EnvHelper.env.REACT_APP_SELF_HOSTED_NODE.split(new RegExp(EnvHelper.whitespaceRegex));\n    } else {\n      URI_LIST = [];\n    }\n    return URI_LIST;\n  }\n\n  /**\n   * in development will always return the `ethers` community key url even if .env is blank\n   * in prod if .env is blank API connections will fail\n   * @returns array of API urls\n   */\n   \n  static getAPIUris() {\n    let ALL_URIs = EnvHelper.getSelfHostedNode();\n    if (EnvHelper.env.NODE_ENV === \"development\" && ALL_URIs.length === 0) {\n      // push in the common ethers key in development\n      ALL_URIs.push(\"https://hkxjqt7bwz2j.usemoralis.com:2053/server\");\n    }\n    if (ALL_URIs.length === 0) console.error(\"API keys must be set in the .env\");\n    return ALL_URIs;\n  }\n\n  static getFallbackURIs() {\n    const ALL_URIs = [...EnvHelper.getMoralisIdList()];\n    return ALL_URIs;\n  }\n\n  static getGeoapifyAPIKey() {\n    var apiKey = EnvHelper.env.REACT_APP_GEOAPIFY_API_KEY;\n    if (!apiKey) {\n      console.warn(\"Missing REACT_APP_GEOAPIFY_API_KEY environment variable\");\n      return null;\n    }\n\n    return apiKey;\n  }\n}\n","C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\NodeHelper.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\Bonds.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\useTheme.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\themes\\global.js",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\TopBar\\ThemeSwitch.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\TopBar\\ConnectMenu.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\Sidebar\\NavContent.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\themes\\fonts.js",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\Loading\\LoadingSplash.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\Messages\\Messages.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\404\\NotFound.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\constants.ts",["363","364","365"],"export const THE_GRAPH_URL = \"https://api.thegraph.com/subgraphs/name/drondin/olympus-graph\";\nexport const EPOCH_INTERVAL = 2200;\n\n// NOTE could get this from an outside source since it changes slightly over time\nexport const BLOCK_RATE_SECONDS = 2.2;\n\nexport const TOKEN_DECIMALS = 9;\n\nexport const POOL_GRAPH_URLS = {\n  4: \"https://api.thegraph.com/subgraphs/name/pooltogether/rinkeby-v3_4_3\",\n  1: \"https://api.thegraph.com/subgraphs/name/pooltogether/pooltogether-v3_4_3\",\n};\n\ninterface IAddresses {\n  [key: number]: { [key: string]: string };\n}\n\nexport const addresses: IAddresses = {\n  // Mumbai\n  80001: {\n    DAI_ADDRESS: \"0x8301f2213c0eed49a7e28ae4c3e91722919b8b47\",\n    OX_ADDRESS: \"0x26112d6e446d150675fa8edb0fd9e3681102ec39\",\n    STAKING_ADDRESS: \"0x3a8ccc3f6b45a6a62c7ed717140a7f4daf7d2151\",\n    STAKING_HELPER_ADDRESS: \"0x5906756f30f8be02bb000715171bb5123682d76e\",\n    SOX_ADDRESS: \"0x3dd3c8786e83b6e2e38a0e991e588884839315dc\",\n    DISTRIBUTOR_ADDRESS: \"0x2bc3f0f54ed864b5a0e7e51222b5856b765d7057\",\n    BONDINGCALC_ADDRESS: \"0x9d64d0853de0df69d78cddcbf5c7f480eda84ec4\",\n    TREASURY_ADDRESS: \"0x7e47ae6767ac436dc8c9f8f5f95ed49a70e96535\",\n    REDEEM_HELPER_ADDRESS: \"0xfB1Ef64cb181FE693ce9aF04Be511918B7e9dD29\",\n    OLD_STAKING_ADDRESS: \"0xb640AA9082ad720c60102489b806E665d67DCE32\",\n    CLAIM_ADDRESS: \"0x7f6bE1318f3a49697a79C0c8C443895F897eD426\",\n    AOX_ADDRESS: \"0x9E375e1DAEddC5c9C6cB3f67B666169A95173eFD\",\n    // PT_TOKEN_ADDRESS: \"0x0a2d026bacc573a8b5a2b049f956bdf8e5256cfd\", // 33T token address, taken from `ticket` function on PRIZE_STRATEGY_ADDRESS\n    // PT_PRIZE_POOL_ADDRESS: \"0xf9081132864ed5e4980CFae83bDB122d86619281\",\n    // PT_PRIZE_STRATEGY_ADDRESS: \"0x2Df17EA8D6B68Ec444c9a698315AfB36425dac8b\",\n  },\n  // Polygon\n  //137: {\n  // DAI_ADDRESS: \"0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063\",\n  //  OX_ADDRESS: \"0x057E0bd9B797f9Eeeb8307B35DbC8c12E534c41E\",\n  //  STAKING_ADDRESS: \"0x4Eef9cb4D2DA4AB2A76a4477E9d2b07f403f0675\",\n  //  STAKING_HELPER_ADDRESS: \"0x14d9E4bCc1791aEf83170c6876629F7E60c9Ba1c\",\n  //  SOX_ADDRESS: \"0x04568467f0AAe5fb85Bf0e031ee66FF2C200a6Fb\",\n  //  DISTRIBUTOR_ADDRESS: \"0x22Eb259FCa48E0646d40da1230C46f6023E9B10F\",\n  //  BONDINGCALC_ADDRESS: \"0x66039dD0B3B9Fb224460c22CEB5b7900e86b1399\",\n  //  TREASURY_ADDRESS: \"0x90515c4ae15B7DF8CCD497e02802d0b832f4e33D\",\n  //  REDEEM_HELPER_ADDRESS: \"0x9b0b321a06f4a2d2081fa8a3ba3a598d84845017\",\n  //  OLD_STAKING_ADDRESS: \"0xb640AA9082ad720c60102489b806E665d67DCE32\",\n  //  CLAIM_ADDRESS: \"0x7f6bE1318f3a49697a79C0c8C443895F897eD426\",\n  //  AOX_ADDRESS: \"0xbC4f91Bb7C9FB8B2d5AC7FF7e7f7278ecBBf3F2f\",\n  //   PT_TOKEN_ADDRESS: \"0x0a2d026bacc573a8b5a2b049f956bdf8e5256cfd\", // 33T token address, taken from `ticket` function on PRIZE_STRATEGY_ADDRESS\n  //   PT_PRIZE_POOL_ADDRESS: \"0xf9081132864ed5e4980CFae83bDB122d86619281\",\n  //   PT_PRIZE_STRATEGY_ADDRESS: \"0x2Df17EA8D6B68Ec444c9a698315AfB36425dac8b\",\n  //},\n  \n  // BSC Testnet\n  97: {\n    PRESALE_ADDRESS:\"0x2193FAaC1910e002b87589C5d34F1737C1f02Cc0\",\n    DAI_ADDRESS: \"0x8301f2213c0eed49a7e28ae4c3e91722919b8b47\",\n    OX_ADDRESS: \"0x17708ed9640Fa2A3b0Be047DeC81aCaa31f6FA44\",\n    STAKING_ADDRESS: \"0x7ecA363422608a04Ef37D3A23E0b1f51e48EBE7e\",\n    STAKING_HELPER_ADDRESS: \"0x08a75F7d1297689C2C2C28ee4e1A14a9363b09a3\",\n    SOX_ADDRESS: \"0xB3867959799521910fa6Ed250583f5C1a23af1D7\",\n    DISTRIBUTOR_ADDRESS: \"0x050B24E3282a7a5c8A4a44b46eD4Cd3F0C143f2E\",\n    BONDINGCALC_ADDRESS: \"0xc612f13D6b0df78dD62d86bc065758FD59FA9aFf\",\n    TREASURY_ADDRESS: \"0x39E51dD56a36E5b12125247C7286Cea78f5A949F\",\n    REDEEM_HELPER_ADDRESS: \"0x08a75F7d1297689C2C2C28ee4e1A14a9363b09a3\",\n    CLAIM_ADDRESS: \"0xd35CE7D18366236DF830B1ecAF5C37ceBF42294F\",\n    AOX_ADDRESS: \"0x2193FAaC1910e002b87589C5d34F1737C1f02Cc0\"\n  },\n};\n","C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\BondCalculator.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\AllBonds.ts",["366","367","368","369"],"import { StableBond, LPBond, NetworkID, CustomBond, BondType } from \"src/lib/Bond\";\nimport { addresses } from \"src/constants\";\n\nimport { ReactComponent as DaiImg } from \"src/assets/tokens/DAI.svg\";\nimport { ReactComponent as AlphaDaiImg } from \"src/assets/tokens/OX-DAI.svg\";\nimport { ReactComponent as FraxImg } from \"src/assets/tokens/FRAX.svg\";\nimport { ReactComponent as AlphaFraxImg } from \"src/assets/tokens/OX-FRAX.svg\";\nimport { ReactComponent as AlphaLusdImg } from \"src/assets/tokens/OX-LUSD.svg\";\nimport { ReactComponent as AlphaEthImg } from \"src/assets/tokens/OX-WETH.svg\";\nimport { ReactComponent as wETHImg } from \"src/assets/tokens/wETH.svg\";\nimport { ReactComponent as LusdImg } from \"src/assets/tokens/LUSD.svg\";\n\nimport { abi as FraxOxBondContract } from \"src/abi/bonds/OxFraxContract.json\";\nimport { abi as BondOxDaiContract } from \"src/abi/bonds/OxDaiContract.json\";\nimport { abi as BondOxLusdContract } from \"src/abi/bonds/OxLusdContract.json\";\nimport { abi as BondOxEthContract } from \"src/abi/bonds/OxEthContract.json\";\n\nimport { abi as DaiBondContract } from \"src/abi/bonds/DaiContract.json\";\nimport { abi as ReserveOxLusdContract } from \"src/abi/reserves/OxLusd.json\";\nimport { abi as ReserveOxDaiContract } from \"src/abi/reserves/OxDai.json\";\nimport { abi as ReserveOxFraxContract } from \"src/abi/reserves/OxFrax.json\";\nimport { abi as ReserveOxEthContract } from \"src/abi/reserves/OxEth.json\";\n\nimport { abi as FraxBondContract } from \"src/abi/bonds/FraxContract.json\";\nimport { abi as LusdBondContract } from \"src/abi/bonds/LusdContract.json\";\nimport { abi as EthBondContract } from \"src/abi/bonds/EthContract.json\";\n\nimport { abi as ierc20Abi } from \"src/abi/IERC20.json\";\nimport { getBondCalculator } from \"src/helpers/BondCalculator\";\nimport { BigNumberish } from \"ethers\";\n\n// TODO(zx): Further modularize by splitting up reserveAssets into vendor token definitions\n//   and include that in the definition of a bond\nexport const busd = new StableBond({\n  name: \"busd\",\n  displayName: \"DAI\",\n  bondToken: \"DAI\",\n  isAvailable: {[NetworkID.BSCTestnet]: true, [NetworkID.Mumbai]: true, [NetworkID.Polygon]: true },\n  bondIconSvg: DaiImg,\n  bondContractABI: DaiBondContract,\n  networkAddrs: {\n    [NetworkID.Mumbai]: {\n      bondAddress: \"0x3c2b484057e7ba8832c2abc7774b30fba691c789\",\n      reserveAddress: \"0x8301f2213c0eed49a7e28ae4c3e91722919b8b47\",\n    },\n    [NetworkID.Polygon]: {\n      bondAddress: \"0xFDAACD04f8ad605e928F4A44864FF825dCd4796d\",\n      reserveAddress: \"0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063\",\n    },\n    [NetworkID.BSCTestnet]: {\n      bondAddress: \"0x9c0E2603FEF3Acc82Ad291CF8F07ef17f4E12939\",\n      reserveAddress: \"0x8301f2213c0eed49a7e28ae4c3e91722919b8b47\",\n    },\n  },\n});\n\n\nexport const alpha_dai = new LPBond({\n  name: \"alpha_dai_lp\",\n  displayName: \"OX-DAI LP\",\n  bondToken: \"DAI\",\n  isAvailable: {[NetworkID.BSCTestnet]: true, [NetworkID.Mumbai]: true, [NetworkID.Polygon]: true },\n  bondIconSvg: AlphaDaiImg,\n  bondContractABI: BondOxDaiContract,\n  reserveContract: ReserveOxDaiContract,\n  networkAddrs: {\n    [NetworkID.Mumbai]: {\n      bondAddress: \"0x695e445610c2dad7fb166acae7636a3b29936364\",\n      reserveAddress: \"0xf86868748f973322e38152f75275777a34d8e3fd\",\n    },\n    [NetworkID.Polygon]: {\n      bondAddress: \"0xbbA07bd5B20B63249398b831082ace6415afB7E0\",\n      reserveAddress: \"0x7c9B16d845FE163F464d265193cC2B4eE3faC326\",\n    },\n    [NetworkID.BSCTestnet]: {\n      bondAddress: \"0x9c0E2603FEF3Acc82Ad291CF8F07ef17f4E12939\",\n      reserveAddress: \"0x8301f2213c0eed49a7e28ae4c3e91722919b8b47\",\n    },\n  },\n  lpUrl:\n    \"\",\n});\n\n// HOW TO ADD A NEW BOND:\n// Is it a stableCoin bond? use `new StableBond`\n// Is it an LP Bond? use `new LPBond`\n// Add new bonds to this array!!\n\nexport const allBonds = [busd, alpha_dai];\nexport const allBondsMap = allBonds.reduce((prevVal, bond) => {\n  return { ...prevVal, [bond.name]: bond };\n}, {});\n\n// Debug Log\n// console.log(allBondsMap);\nexport default allBonds;\n","C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\33Together.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\index.js",[],"C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\QueryParameterHelper.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\helpers\\index.tsx",["370","371","372","373","374","375","376","377","378"],"import { EPOCH_INTERVAL, BLOCK_RATE_SECONDS, addresses } from \"../constants\";\nimport { BigNumber, ethers } from \"ethers\";\nimport axios from \"axios\";\nimport { abi as PairContractABI } from \"../abi/PairContract.json\";\nimport { abi as RedeemHelperABI } from \"../abi/RedeemHelper.json\";\n\nimport { SvgIcon } from \"@material-ui/core\";\nimport { ReactComponent as OxImg } from \"../assets/tokens/token_OX.svg\";\nimport { ReactComponent as SOxImg } from \"../assets/tokens/token_sOX.svg\";\n\nimport { alpha_dai } from \"./AllBonds\";\nimport { JsonRpcSigner, StaticJsonRpcProvider } from \"@ethersproject/providers\";\nimport { IBaseAsyncThunk } from \"src/slices/interfaces\";\nimport { PairContract, RedeemHelper } from \"../typechain\";\n\nexport async function getMarketPrice({ networkID, provider }: IBaseAsyncThunk) {\n  console.log(\"line17 Git **********8\")\n  if  (networkID !== 80001 && networkID !== 97) {\n    console.log(\"insideif\")\n    return 0\n  } \n\n  const alpha_dai_address = alpha_dai.getAddressForReserve(networkID);\n  console.log(\"line24**********\")\n  const pairContract = new ethers.Contract(alpha_dai_address, PairContractABI, provider) as PairContract;\n  console.log(\"line26**********\")\n  const reserves = await pairContract.getReserves();\n  console.log(\"line28**********\")\n  console.log(`reserves ${reserves}`);\n  const marketPrice = Number(reserves[1].toString()) / Number(reserves[0].toString());\nconsole.log(marketPrice,\"line31**********\")\n  return marketPrice;\n}\n\nexport async function getTokenPrice(tokenId = \"alpha\") {\n  const resp = await axios.get(`https://api.coingecko.com/api/v3/simple/price?ids=${tokenId}&vs_currencies=usd`);\n  let tokenPrice: number = resp.data[tokenId].usd;\n  return tokenPrice;\n}\n\nexport function shorten(str: string) {\n  if (str.length < 10) return str;\n  return `${str.slice(0, 6)}...${str.slice(str.length - 4)}`;\n}\n\nexport function formatCurrency(c: number, precision = 0) {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    maximumFractionDigits: precision,\n    minimumFractionDigits: precision,\n  }).format(c);\n}\n\nexport function trim(number = 0, precision = 0) {\n  // why would number ever be undefined??? what are we trimming?\n  const array = number.toString().split(\".\");\n  if (array.length === 1) return number.toString();\n  if (precision === 0) return array[0].toString();\n\n  const poppedNumber = array.pop() || \"0\";\n  array.push(poppedNumber.substring(0, precision));\n  const trimmedNumber = array.join(\".\");\n  return trimmedNumber;\n}\n\nexport function getRebaseBlock(currentBlock: number) {\n  return currentBlock + EPOCH_INTERVAL - (currentBlock % EPOCH_INTERVAL);\n}\n\nexport function secondsUntilBlock(startBlock: number, endBlock: number) {\n  const blocksAway = endBlock - startBlock;\n  const secondsAway = blocksAway * BLOCK_RATE_SECONDS;\n\n  return secondsAway;\n}\n\nexport function prettyVestingPeriod(currentBlock: number, vestingBlock: number) {\n  if (vestingBlock === 0) {\n    return \"\";\n  }\n\n  const seconds = secondsUntilBlock(currentBlock, vestingBlock);\n  if (seconds < 0) {\n    return \"Fully Vested\";\n  }\n  return prettifySeconds(seconds);\n}\n\nexport function prettifySeconds(seconds: number, resolution?: string) {\n  if (seconds !== 0 && !seconds) {\n    return \"\";\n  }\n\n  const d = Math.floor(seconds / (3600 * 24));\n  const h = Math.floor((seconds % (3600 * 24)) / 3600);\n  const m = Math.floor((seconds % 3600) / 60);\n\n  if (resolution === \"day\") {\n    return d + (d == 1 ? \" day\" : \" days\");\n  }\n\n  const dDisplay = d > 0 ? d + (d == 1 ? \" day, \" : \" days, \") : \"\";\n  const hDisplay = h > 0 ? h + (h == 1 ? \" hr, \" : \" hrs, \") : \"\";\n  const mDisplay = m > 0 ? m + (m == 1 ? \" min\" : \" mins\") : \"\";\n\n  let result = dDisplay + hDisplay + mDisplay;\n  if (mDisplay === \"\") {\n    result = result.slice(0, result.length - 2);\n  }\n\n  return result;\n}\n\nfunction getSohmTokenImage() {\n  return <SvgIcon component={SOxImg} viewBox=\"0 0 100 100\" style={{ height: \"1rem\", width: \"1rem\" }} />;\n}\n\nexport function getOxTokenImage(w?: number, h?: number) {\n  const height = h == null ? \"32px\" : `${h}px`;\n  const width = w == null ? \"32px\" : `${w}px`;\n  return <SvgIcon component={OxImg} viewBox=\"0 0 32 32\" style={{ height, width }} />;\n}\n\nexport function getTokenImage(name: string) {\n  if (name === \"ox\") return getOxTokenImage();\n  if (name === \"sox\") return getSohmTokenImage();\n}\n\n// TS-REFACTOR-NOTE - Used for:\n// AccountSlice.ts, AppSlice.ts, LusdSlice.ts\nexport function setAll(state: any, properties: any) {\n  if (!properties) return;\n  const props = Object.keys(properties);\n  props.forEach(key => {\n    state[key] = properties[key];\n  });\n}\n\nexport function contractForRedeemHelper({\n  networkID,\n  provider,\n}: {\n  networkID: number;\n  provider: StaticJsonRpcProvider | JsonRpcSigner;\n}) {\n  return new ethers.Contract(\n    addresses[networkID].REDEEM_HELPER_ADDRESS as string,\n    RedeemHelperABI,\n    provider,\n  ) as RedeemHelper;\n}\n\n/**\n * returns false if SafetyCheck has fired in this Session. True otherwise\n * @returns boolean\n */\nexport const shouldTriggerSafetyCheck = () => {\n  const _storage = window.sessionStorage;\n  const _safetyCheckKey = \"-oly-safety\";\n  // check if sessionStorage item exists for SafetyCheck\n  if (!_storage.getItem(_safetyCheckKey)) {\n    _storage.setItem(_safetyCheckKey, \"true\");\n    return true;\n  }\n  return false;\n};\n\n/**\n * returns unix timestamp for x minutes ago\n * @param x minutes as a number\n */\nexport const minutesAgo = (x: number) => {\n  const now = new Date().getTime();\n  return new Date(now - x * 60000).getTime();\n};\n\n/**\n * subtracts two dates for use in 33-together timer\n * param (Date) dateA is the ending date object\n * param (Date) dateB is the current date object\n * returns days, hours, minutes, seconds\n * NOTE: this func previously used parseInt() to convert to whole numbers, however, typescript doesn't like\n * ... using parseInt on number params. It only allows parseInt on string params. So we converted usage to\n * ... Math.trunc which accomplishes the same result as parseInt.\n */\nexport const subtractDates = (dateA: Date, dateB: Date) => {\n  let msA: number = dateA.getTime();\n  let msB: number = dateB.getTime();\n\n  let diff: number = msA - msB;\n\n  let days: number = 0;\n  if (diff >= 86400000) {\n    days = Math.trunc(diff / 86400000);\n    diff -= days * 86400000;\n  }\n\n  let hours: number = 0;\n  if (days || diff >= 3600000) {\n    hours = Math.trunc(diff / 3600000);\n    diff -= hours * 3600000;\n  }\n\n  let minutes: number = 0;\n  if (hours || diff >= 60000) {\n    minutes = Math.trunc(diff / 60000);\n    diff -= minutes * 60000;\n  }\n\n  let seconds: number = 0;\n  if (minutes || diff >= 1000) {\n    seconds = Math.trunc(diff / 1000);\n  }\n  return {\n    days,\n    hours,\n    minutes,\n    seconds,\n  };\n};\n","C:\\alphaomega\\AlphaDAO-react\\src\\components\\Messages\\ConsoleInterceptor.js",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\Sidebar\\externalUrls.js",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\Claim\\Claim.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\33Together\\33Together.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\Sidebar\\Social.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\lib\\Bond.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\33Together\\poolData.js",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\TreasuryDashboard\\TreasuryDashboard.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\Dashboard\\Dashboard.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\Bond\\Bond.jsx",["379","380"],"import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { formatCurrency, trim } from \"../../helpers\";\nimport {\n  Backdrop,\n  Box,\n  Fade,\n  Grid,\n  Paper,\n  Tab,\n  Tabs,\n  Typography,\n  makeStyles,\n  Button,\n  SvgIcon,\n  Link,\n} from \"@material-ui/core\";\nimport TabPanel from \"../../components/TabPanel\";\nimport BondHeader from \"./BondHeader\";\nimport BondRedeem from \"./BondRedeem\";\nimport BondPurchase from \"./BondPurchase\";\nimport \"./bond.scss\";\nimport { useWeb3Context } from \"src/hooks/web3Context\";\nimport { Skeleton } from \"@material-ui/lab\";\n// import { isPendingTxn, txnButtonText } from \"../../slices/PendingTxnsSlice\";\nimport { ReactComponent as LinkIcon } from \"../../assets/icons/link.svg\";\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles({\n  customStyleOnTab: {\n    width: \"145px\",\n  },\n});\n\nfunction Bond({ bond, nft }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { provider, address, chainID } = useWeb3Context();\n\n  const [slippage, setSlippage] = useState(0.5);\n  const [recipientAddress, setRecipientAddress] = useState(address);\n\n  const [view, setView] = useState(0);\n  const [quantity, setQuantity] = useState();\n\n  const isBondLoading = useSelector(state => state.bonding.loading ?? true);\n\n  const onRecipientAddressChange = e => {\n    return setRecipientAddress(e.target.value);\n  };\n\n  const onSlippageChange = e => {\n    return setSlippage(e.target.value);\n  };\n\n  useEffect(() => {\n    if (address) setRecipientAddress(address);\n  }, [provider, quantity, address]);\n\n  const changeView = (event, newView) => {\n    setView(newView);\n  };\n\n  if (nft) {\n    return (\n      <Fade in={true} mountOnEnter unmountOnExit>\n        <Grid container id=\"bond-view\">\n          <Backdrop open={true}>\n            <Fade in={true}>\n              <Paper className=\"ox-card ox-modal\">\n                <BondHeader bond={bond} nft />\n                <Box direction=\"column\" className=\"bond-price-data-column\">\n                  <Typography variant=\"h6\" color=\"textSecondary\">\n                    Bond with real world assets\n                  </Typography>\n                  <Typography variant=\"h5\" color=\"textPrimary\">\n                    Gold, Fine Wine, Real Estate and Art\n                  </Typography>\n                </Box>\n\n                <Tabs\n                  centered\n                  value={view}\n                  textColor=\"primary\"\n                  indicatorColor=\"primary\"\n                  onChange={changeView}\n                  aria-label=\"bond tabs\"\n                >\n                  <Tab label={<span className={classes.customStyleOnTab}>BOND</span>} {...a11yProps(0)} />\n                </Tabs>\n\n                <TabPanel value={view} index={0}>\n                  <Box className=\"wallet-menu bond-nft-box\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      id=\"bond-coming-soon-btn\"\n                      className=\"nft-coming-soon-button nft-coming-soon-button-text \"\n                      disabled={true}\n                      onClick={() => {}}\n                    >\n                      COMING SOON\n                    </Button>\n                    <Typography className=\"bond-nft-description\">\n                      OX is the first algorithmic currency backed by real world assets. Enabled by our partnership\n                      with Tangible, the AlphaDAO treasury is filled with gold, fine wine and other tangible assets.\n                    </Typography>\n                    <Button\n                      href=\"https://medium.com/tangible/introducing-tangible-5f3947276125\"\n                      target=\"_blank\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      id=\"bond-approve-btn\"\n                      className=\"transaction-button nft-coming-soon-button\"\n                      disabled={false}\n                      endIcon={<SvgIcon component={LinkIcon} className=\"nft-learn-more-button\" />}\n                    >\n                      Learn More\n                    </Button>\n                  </Box>\n                </TabPanel>\n              </Paper>\n            </Fade>\n          </Backdrop>\n        </Grid>\n      </Fade>\n    );\n  }\n\n  return (\n    <Fade in={true} mountOnEnter unmountOnExit>\n      <Grid container id=\"bond-view\">\n        <Backdrop open={true}>\n          <Fade in={true}>\n            <Paper className=\"ox-card ox-modal\">\n              <BondHeader\n                bond={bond}\n                slippage={slippage}\n                recipientAddress={recipientAddress}\n                onSlippageChange={onSlippageChange}\n                onRecipientAddressChange={onRecipientAddressChange}\n              />\n\n              <Box direction=\"row\" className=\"bond-price-data-row\">\n                <div className=\"bond-price-data\">\n                  <Typography variant=\"h5\" color=\"textSecondary\">\n                    Bond Price\n                  </Typography>\n                  <Typography variant=\"h3\" className=\"price\" color=\"primary\">\n                    {isBondLoading ? <Skeleton /> : formatCurrency(bond.bondPrice, 2)}\n                  </Typography>\n                </div>\n                <div className=\"bond-price-data\">\n                  <Typography variant=\"h5\" color=\"textSecondary\">\n                    Market Price\n                  </Typography>\n                  <Typography variant=\"h3\" color=\"primary\" className=\"price\">\n                    {isBondLoading ? <Skeleton /> : formatCurrency(bond.marketPrice, 2)}\n                  </Typography>\n                </div>\n              </Box>\n\n              <Tabs\n                centered\n                value={view}\n                textColor=\"primary\"\n                indicatorColor=\"primary\"\n                onChange={changeView}\n                aria-label=\"bond tabs\"\n              >\n                <Tab label={<span className={classes.customStyleOnTab}>BOND</span>} {...a11yProps(0)} />\n                <Tab label={<span className={classes.customStyleOnTab}>REDEEM</span>} {...a11yProps(1)} />\n              </Tabs>\n\n              <TabPanel value={view} index={0}>\n                <BondPurchase bond={bond} slippage={slippage} recipientAddress={recipientAddress} />\n              </TabPanel>\n\n              <TabPanel value={view} index={1}>\n                <BondRedeem bond={bond} />\n              </TabPanel>\n            </Paper>\n          </Fade>\n        </Backdrop>\n      </Grid>\n    </Fade>\n  );\n}\n\n// export function DisplayBondPrice({ bond }) {\n//   const { chainID } = useWeb3Context();\n//   return (\n//     <>\n//       {!bond.isAvailable[chainID] ? (\n//         <>--</>\n//       ) : (\n//         `${new Intl.NumberFormat(\"en-US\", {\n//           style: \"currency\",\n//           currency: \"USD\",\n//           maximumFractionDigits: 2,\n//           minimumFractionDigits: 2,\n//         }).format(bond.bondPrice)}`\n//       )}\n//     </>\n//   );\n// }\n\nexport function DisplayBondDiscount({ bond }) {\n  const { chainID } = useWeb3Context();\n  return <>{!bond.isAvailable[chainID] ? <>--</> : `${bond.bondDiscount && trim(bond.bondDiscount * 100, 2)}%`}</>;\n}\n\nexport default Bond;\n","C:\\alphaomega\\AlphaDAO-react\\src\\views\\Wrap\\Wrap.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\ChooseBond\\ChooseBond.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\Stake\\Stake.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\TreasuryDashboard\\treasuryData.js",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\InfoTooltip\\InfoTooltip.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\EarlyClaim\\EarlyClaim.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\lib\\apolloClient.js",[],"C:\\alphaomega\\AlphaDAO-react\\src\\slices\\StakeThunk.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\Stake\\ExternalStakePool.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\ConnectButton.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\TabPanel.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\RebaseTimer\\RebaseTimer.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\ChooseBond\\ClaimBonds.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\ChooseBond\\BondRow.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\BondLogo.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\ChooseBond\\ClaimRow.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\CardHeader\\CardHeader.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\Chart\\Chart.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\slices\\WrapThunk.ts",["381"],"import { ethers, BigNumber } from \"ethers\";\nimport { addresses } from \"../constants\";\nimport { abi as ierc20ABI } from \"../abi/IERC20.json\";\nimport { abi as wsOX } from \"../abi/wsOX.json\";\nimport { clearPendingTxn, fetchPendingTxns, getWrappingTypeText } from \"./PendingTxnsSlice\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchAccountSuccess, getBalances } from \"./AccountSlice\";\nimport { error, info } from \"../slices/MessagesSlice\";\nimport { IActionValueAsyncThunk, IChangeApprovalAsyncThunk, IJsonRPCError } from \"./interfaces\";\nimport { segmentUA } from \"../helpers/userAnalyticHelpers\";\nimport { IERC20, WsOX } from \"src/typechain\";\n\ninterface IUAData {\n  address: string;\n  value: string;\n  approved: boolean;\n  txHash: string | null;\n  type: string | null;\n}\n\nfunction alreadyApprovedToken(token: string, wrapAllowance: BigNumber, unwrapAllowance: BigNumber) {\n  // set defaults\n  let bigZero = BigNumber.from(\"0\");\n  let applicableAllowance = bigZero;\n\n  // determine which allowance to check\n  if (token === \"sox\") {\n    applicableAllowance = wrapAllowance;\n  } else if (token === \"wsox\") {\n    applicableAllowance = unwrapAllowance;\n  }\n\n  // check if allowance exists\n  if (applicableAllowance.gt(bigZero)) return true;\n\n  return false;\n}\n\nexport const changeApproval = createAsyncThunk(\n  \"wrap/changeApproval\",\n  async ({ token, provider, address, networkID }: IChangeApprovalAsyncThunk, { dispatch }) => {\n    if (!provider) {\n      dispatch(error(\"Please connect your wallet!\"));\n      return;\n    }\n\n    const signer = provider.getSigner();\n    const soxContract = new ethers.Contract(addresses[networkID].SOX_ADDRESS as string, ierc20ABI, signer) as IERC20;\n    const wsoxContract = new ethers.Contract(\n      addresses[networkID].WSOX_ADDRESS as string,\n      ierc20ABI,\n      signer,\n    ) as IERC20;\n    let approveTx;\n    let wrapAllowance = await soxContract.allowance(address, addresses[networkID].WSOX_ADDRESS);\n    let unwrapAllowance = await wsoxContract.allowance(address, addresses[networkID].WSOX_ADDRESS);\n\n    // return early if approval has already happened\n    if (alreadyApprovedToken(token, wrapAllowance, unwrapAllowance)) {\n      dispatch(info(\"Approval completed.\"));\n      return dispatch(\n        fetchAccountSuccess({\n          wrapping: {\n            ohmWrap: +wrapAllowance,\n            ohmUnwrap: +unwrapAllowance,\n          },\n        }),\n      );\n    }\n\n    try {\n      if (token === \"sox\") {\n        // won't run if wrapAllowance > 0\n        approveTx = await soxContract.approve(\n          addresses[networkID].WSOX_ADDRESS,\n          ethers.utils.parseUnits(\"1000000000\", \"gwei\").toString(),\n        );\n      } else if (token === \"wsox\") {\n        approveTx = await wsoxContract.approve(\n          addresses[networkID].WSOX_ADDRESS,\n          ethers.utils.parseUnits(\"1000000000\", \"gwei\").toString(),\n        );\n      }\n\n      const text = \"Approve \" + (token === \"sox\" ? \"Wrapping\" : \"Unwrapping\");\n      const pendingTxnType = token === \"sox\" ? \"approve_wrapping\" : \"approve_unwrapping\";\n      if (approveTx) {\n        dispatch(fetchPendingTxns({ txnHash: approveTx.hash, text, type: pendingTxnType }));\n\n        await approveTx.wait();\n      }\n    } catch (e: unknown) {\n      dispatch(error((e as IJsonRPCError).message));\n      return;\n    } finally {\n      if (approveTx) {\n        dispatch(clearPendingTxn(approveTx.hash));\n      }\n    }\n\n    // go get fresh allowances\n    wrapAllowance = await soxContract.allowance(address, addresses[networkID].WSOX_ADDRESS);\n    unwrapAllowance = await wsoxContract.allowance(address, addresses[networkID].WSOX_ADDRESS);\n\n    return dispatch(\n      fetchAccountSuccess({\n        wrapping: {\n          ohmWrap: +wrapAllowance,\n          ohmUnwrap: +unwrapAllowance,\n        },\n      }),\n    );\n  },\n);\n\nexport const changeWrap = createAsyncThunk(\n  \"wrap/changeWrap\",\n  async ({ action, value, provider, address, networkID }: IActionValueAsyncThunk, { dispatch }) => {\n    if (!provider) {\n      dispatch(error(\"Please connect your wallet!\"));\n      return;\n    }\n\n    const signer = provider.getSigner();\n    const wsoxContract = new ethers.Contract(addresses[networkID].WSOX_ADDRESS as string, wsOX, signer) as WsOX;\n\n    let wrapTx;\n    let uaData: IUAData = {\n      address: address,\n      value: value,\n      approved: true,\n      txHash: null,\n      type: null,\n    };\n    try {\n      if (action === \"wrap\") {\n        uaData.type = \"wrap\";\n        wrapTx = await wsoxContract.wrap(ethers.utils.parseUnits(value, \"gwei\"));\n      } else {\n        uaData.type = \"unwrap\";\n        wrapTx = await wsoxContract.unwrap(ethers.utils.parseUnits(value));\n      }\n      const pendingTxnType = action === \"wrap\" ? \"wrapping\" : \"unwrapping\";\n      uaData.txHash = wrapTx.hash;\n      dispatch(fetchPendingTxns({ txnHash: wrapTx.hash, text: getWrappingTypeText(action), type: pendingTxnType }));\n      await wrapTx.wait();\n    } catch (e: unknown) {\n      uaData.approved = false;\n      const rpcError = e as IJsonRPCError;\n      if (rpcError.code === -32603 && rpcError.message.indexOf(\"ds-math-sub-underflow\") >= 0) {\n        dispatch(\n          error(\"You may be trying to wrap more than your balance! Error code: 32603. Message: ds-math-sub-underflow\"),\n        );\n      } else {\n        dispatch(error(rpcError.message));\n      }\n      return;\n    } finally {\n      if (wrapTx) {\n        segmentUA(uaData);\n\n        dispatch(clearPendingTxn(wrapTx.hash));\n      }\n    }\n    dispatch(getBalances({ address, networkID, provider }));\n  },\n);\n","C:\\alphaomega\\AlphaDAO-react\\src\\views\\Bond\\BondPurchase.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\Bond\\BondRedeem.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\Bond\\BondHeader.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\index.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\Chart\\ExpandedChart.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\Chart\\CustomTooltip.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\Debounce.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\hooks\\useEscape.ts",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\Bond\\AdvancedSettings.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\33Together\\PoolPrize.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\33Together\\PoolInfo.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\33Together\\PoolDeposit.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\views\\33Together\\PoolWithdraw.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\InfoTooltip\\InfoTooltipMulti.jsx",[],"C:\\alphaomega\\AlphaDAO-react\\src\\components\\TopBar\\OxMenu.jsx",[],{"ruleId":"382","severity":1,"message":"383","line":13,"column":1,"nodeType":null,"messageId":"384","endLine":13,"endColumn":2,"fix":"385"},{"ruleId":"382","severity":1,"message":"386","line":22,"column":1,"nodeType":null,"messageId":"384","endLine":23,"endColumn":1,"fix":"387"},{"ruleId":"382","severity":1,"message":"386","line":25,"column":2,"nodeType":null,"messageId":"384","endLine":26,"endColumn":1,"fix":"388"},{"ruleId":"382","severity":1,"message":"383","line":31,"column":1,"nodeType":null,"messageId":"384","endLine":31,"endColumn":2,"fix":"389"},{"ruleId":"382","severity":1,"message":"383","line":42,"column":1,"nodeType":null,"messageId":"384","endLine":42,"endColumn":2,"fix":"390"},{"ruleId":"382","severity":1,"message":"391","line":118,"column":1,"nodeType":null,"messageId":"392","endLine":120,"endColumn":6,"fix":"393"},{"ruleId":"382","severity":1,"message":"394","line":137,"column":1,"nodeType":null,"messageId":"384","endLine":137,"endColumn":3,"fix":"395"},{"ruleId":"382","severity":1,"message":"396","line":163,"column":1,"nodeType":null,"messageId":"384","endLine":163,"endColumn":4,"fix":"397"},{"ruleId":"382","severity":1,"message":"398","line":43,"column":49,"nodeType":null,"messageId":"392","endLine":47,"endColumn":5,"fix":"399"},{"ruleId":"382","severity":1,"message":"400","line":79,"column":1,"nodeType":null,"messageId":"392","endLine":79,"endColumn":64,"fix":"401"},{"ruleId":"382","severity":1,"message":"402","line":143,"column":3,"nodeType":null,"messageId":"384","endLine":144,"endColumn":3,"fix":"403"},{"ruleId":"382","severity":1,"message":"383","line":148,"column":28,"nodeType":null,"messageId":"384","endLine":148,"endColumn":29,"fix":"404"},{"ruleId":"382","severity":1,"message":"405","line":154,"column":29,"nodeType":null,"messageId":"406","endLine":154,"endColumn":29,"fix":"407"},{"ruleId":"382","severity":1,"message":"386","line":8,"column":1,"nodeType":null,"messageId":"384","endLine":9,"endColumn":1,"fix":"408"},{"ruleId":"382","severity":1,"message":"396","line":12,"column":1,"nodeType":null,"messageId":"384","endLine":12,"endColumn":4,"fix":"409"},{"ruleId":"382","severity":1,"message":"396","line":23,"column":1,"nodeType":null,"messageId":"384","endLine":23,"endColumn":4,"fix":"410"},{"ruleId":"382","severity":1,"message":"411","line":36,"column":1,"nodeType":null,"messageId":"392","endLine":37,"endColumn":1,"fix":"412"},{"ruleId":"382","severity":1,"message":"396","line":41,"column":1,"nodeType":null,"messageId":"384","endLine":41,"endColumn":4,"fix":"413"},{"ruleId":"382","severity":1,"message":"396","line":67,"column":1,"nodeType":null,"messageId":"384","endLine":67,"endColumn":4,"fix":"414"},{"ruleId":"382","severity":1,"message":"396","line":83,"column":1,"nodeType":null,"messageId":"384","endLine":83,"endColumn":4,"fix":"415"},{"ruleId":"382","severity":1,"message":"394","line":55,"column":1,"nodeType":null,"messageId":"384","endLine":55,"endColumn":3,"fix":"416"},{"ruleId":"382","severity":1,"message":"405","line":58,"column":21,"nodeType":null,"messageId":"406","endLine":58,"endColumn":21,"fix":"417"},{"ruleId":"382","severity":1,"message":"418","line":69,"column":62,"nodeType":null,"messageId":"406","endLine":69,"endColumn":62,"fix":"419"},{"ruleId":"382","severity":1,"message":"405","line":38,"column":17,"nodeType":null,"messageId":"406","endLine":38,"endColumn":17,"fix":"420"},{"ruleId":"382","severity":1,"message":"386","line":55,"column":4,"nodeType":null,"messageId":"384","endLine":56,"endColumn":1,"fix":"421"},{"ruleId":"382","severity":1,"message":"405","line":62,"column":17,"nodeType":null,"messageId":"406","endLine":62,"endColumn":17,"fix":"422"},{"ruleId":"382","severity":1,"message":"423","line":80,"column":9,"nodeType":null,"messageId":"384","endLine":81,"endColumn":4,"fix":"424"},{"ruleId":"382","severity":1,"message":"425","line":17,"column":40,"nodeType":null,"messageId":"406","endLine":17,"endColumn":40,"fix":"426"},{"ruleId":"382","severity":1,"message":"383","line":18,"column":5,"nodeType":null,"messageId":"384","endLine":18,"endColumn":6,"fix":"427"},{"ruleId":"382","severity":1,"message":"425","line":19,"column":28,"nodeType":null,"messageId":"406","endLine":19,"endColumn":28,"fix":"428"},{"ruleId":"382","severity":1,"message":"425","line":20,"column":13,"nodeType":null,"messageId":"406","endLine":20,"endColumn":13,"fix":"429"},{"ruleId":"382","severity":1,"message":"383","line":21,"column":4,"nodeType":null,"messageId":"384","endLine":21,"endColumn":5,"fix":"430"},{"ruleId":"382","severity":1,"message":"425","line":24,"column":34,"nodeType":null,"messageId":"406","endLine":24,"endColumn":34,"fix":"431"},{"ruleId":"382","severity":1,"message":"425","line":26,"column":34,"nodeType":null,"messageId":"406","endLine":26,"endColumn":34,"fix":"432"},{"ruleId":"382","severity":1,"message":"425","line":28,"column":34,"nodeType":null,"messageId":"406","endLine":28,"endColumn":34,"fix":"433"},{"ruleId":"382","severity":1,"message":"434","line":31,"column":1,"nodeType":null,"messageId":"392","endLine":31,"endColumn":44,"fix":"435"},{"ruleId":"382","severity":1,"message":"436","line":111,"column":115,"nodeType":null,"messageId":"406","endLine":111,"endColumn":115,"fix":"437"},{"ruleId":"382","severity":1,"message":"438","line":112,"column":22,"nodeType":null,"messageId":"384","endLine":112,"endColumn":27,"fix":"439"},{"ruleId":"382","severity":1,"message":"440","line":49,"column":46,"nodeType":null,"messageId":"392","endLine":53,"endColumn":5,"fix":"441"},"prettier/prettier","Delete `·`","delete",{"range":"442","text":"443"},"Delete `⏎`",{"range":"444","text":"443"},{"range":"445","text":"443"},{"range":"446","text":"443"},{"range":"447","text":"443"},"Replace `↹↹↹··97:·getBSCTestnetURI(),⏎↹↹↹··⏎↹↹↹··` with `··············97:·getBSCTestnetURI(),`","replace",{"range":"448","text":"449"},"Delete `··`",{"range":"450","text":"443"},"Delete `···`",{"range":"451","text":"443"},"Replace `⏎······addresses[networkID].SOX_ADDRESS·as·string,⏎······sOXv2,⏎······provider,⏎····` with `addresses[networkID].SOX_ADDRESS·as·string,·sOXv2,·provider`",{"range":"452","text":"453"},"Replace `console.log(currentIndex,·stakingAPY,·\"****·Line79test·*****\"·)` with `····console.log(currentIndex,·stakingAPY,·\"****·Line79test·*****\");`",{"range":"454","text":"455"},"Delete `⏎··`",{"range":"456","text":"443"},{"range":"457","text":"443"},"Insert `·`","insert",{"range":"458","text":"459"},{"range":"460","text":"443"},{"range":"461","text":"443"},{"range":"462","text":"443"},"Replace `⏎` with `·`",{"range":"463","text":"459"},{"range":"464","text":"443"},{"range":"465","text":"443"},{"range":"466","text":"443"},{"range":"467","text":"443"},{"range":"468","text":"459"},"Insert `,`",{"range":"469","text":"470"},{"range":"471","text":"459"},{"range":"472","text":"443"},{"range":"473","text":"459"},"Delete `⏎···`",{"range":"474","text":"443"},"Insert `;`",{"range":"475","text":"476"},{"range":"477","text":"443"},{"range":"478","text":"476"},{"range":"479","text":"476"},{"range":"480","text":"443"},{"range":"481","text":"476"},{"range":"482","text":"476"},{"range":"483","text":"476"},"Replace `console.log(marketPrice,\"line31**********\")` with `··console.log(marketPrice,·\"line31**********\");`",{"range":"484","text":"485"},"Insert `·with`",{"range":"486","text":"487"},"Delete `·with`",{"range":"488","text":"443"},"Replace `⏎······addresses[networkID].WSOX_ADDRESS·as·string,⏎······ierc20ABI,⏎······signer,⏎····` with `addresses[networkID].WSOX_ADDRESS·as·string,·ierc20ABI,·signer`",{"range":"489","text":"490"},[546,547],"",[682,683],[748,749],[801,802],[1005,1006],[3353,3393],"              97: getBSCTestnetURI(),",[3847,3849],[4525,4528],[1658,1742],"addresses[networkID].SOX_ADDRESS as string, sOXv2, provider",[3166,3229],"    console.log(currentIndex, stakingAPY, \"**** Line79test *****\");",[5159,5162],[5371,5372],[5562,5562]," ",[245,246],[286,289],[518,521],[747,748],[887,890],[1828,1831],[2371,2374],[2902,2904],[2950,2950],[3734,3734],",",[2060,2060],[2733,2734],[2862,2862],[3588,3592],[836,836],";",[841,842],[914,914],[927,927],[931,932],[1038,1038],[1178,1178],[1265,1265],[1392,1435],"  console.log(marketPrice, \"line31**********\");",[3523,3523]," with",[3545,3550],[1742,1829],"addresses[networkID].WSOX_ADDRESS as string, ierc20ABI, signer"]